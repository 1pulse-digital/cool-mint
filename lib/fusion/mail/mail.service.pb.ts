// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: mail/mail.service.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface SendMailRequest {
  order: string;
}

export interface SendMailResponse {
  url: string;
}

//========================================//
//      MailService Protobuf Client       //
//========================================//

export async function SendMail(
  sendMailRequest: SendMailRequest,
  config?: ClientConfiguration,
): Promise<SendMailResponse> {
  const response = await PBrequest(
    "/mail.MailService/SendMail",
    SendMailRequest.encode(sendMailRequest),
    config,
  );
  return SendMailResponse.decode(response);
}

//========================================//
//        MailService JSON Client         //
//========================================//

export async function SendMailJSON(
  sendMailRequest: SendMailRequest,
  config?: ClientConfiguration,
): Promise<SendMailResponse> {
  const response = await JSONrequest(
    "/mail.MailService/SendMail",
    SendMailRequestJSON.encode(sendMailRequest),
    config,
  );
  return SendMailResponseJSON.decode(response);
}

//========================================//
//              MailService               //
//========================================//

export interface MailService<Context = unknown> {
  SendMail: (
    sendMailRequest: SendMailRequest,
    context: Context,
  ) => Promise<SendMailResponse> | SendMailResponse;
}

export function createMailService<Context>(service: MailService<Context>) {
  return {
    name: "mail.MailService",
    methods: {
      SendMail: {
        name: "SendMail",
        handler: service.SendMail,
        input: { protobuf: SendMailRequest, json: SendMailRequestJSON },
        output: { protobuf: SendMailResponse, json: SendMailResponseJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const SendMailRequest = {
  /**
   * Serializes SendMailRequest to protobuf.
   */
  encode: function (msg: PartialDeep<SendMailRequest>): Uint8Array {
    return SendMailRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SendMailRequest from protobuf.
   */
  decode: function (bytes: ByteSource): SendMailRequest {
    return SendMailRequest._readMessage(
      SendMailRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SendMailRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SendMailRequest>): SendMailRequest {
    return {
      order: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SendMailRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.order) {
      writer.writeString(1, msg.order);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendMailRequest,
    reader: protoscript.BinaryReader,
  ): SendMailRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.order = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SendMailResponse = {
  /**
   * Serializes SendMailResponse to protobuf.
   */
  encode: function (msg: PartialDeep<SendMailResponse>): Uint8Array {
    return SendMailResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SendMailResponse from protobuf.
   */
  decode: function (bytes: ByteSource): SendMailResponse {
    return SendMailResponse._readMessage(
      SendMailResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SendMailResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SendMailResponse>): SendMailResponse {
    return {
      url: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SendMailResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.url) {
      writer.writeString(1, msg.url);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendMailResponse,
    reader: protoscript.BinaryReader,
  ): SendMailResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.url = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const SendMailRequestJSON = {
  /**
   * Serializes SendMailRequest to JSON.
   */
  encode: function (msg: PartialDeep<SendMailRequest>): string {
    return JSON.stringify(SendMailRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes SendMailRequest from JSON.
   */
  decode: function (json: string): SendMailRequest {
    return SendMailRequestJSON._readMessage(
      SendMailRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SendMailRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SendMailRequest>): SendMailRequest {
    return {
      order: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SendMailRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.order) {
      json["order"] = msg.order;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SendMailRequest, json: any): SendMailRequest {
    const _order_ = json["order"];
    if (_order_) {
      msg.order = _order_;
    }
    return msg;
  },
};

export const SendMailResponseJSON = {
  /**
   * Serializes SendMailResponse to JSON.
   */
  encode: function (msg: PartialDeep<SendMailResponse>): string {
    return JSON.stringify(SendMailResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes SendMailResponse from JSON.
   */
  decode: function (json: string): SendMailResponse {
    return SendMailResponseJSON._readMessage(
      SendMailResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SendMailResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SendMailResponse>): SendMailResponse {
    return {
      url: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SendMailResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.url) {
      json["url"] = msg.url;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SendMailResponse, json: any): SendMailResponse {
    const _url_ = json["url"];
    if (_url_) {
      msg.url = _url_;
    }
    return msg;
  },
};
