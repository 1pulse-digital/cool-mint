// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: workshop/contact.service.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface ContactUsRequest {
  customer: Customer;
}

export interface ContactUsResponse {
  message: string;
}

export interface Customer {
  firstName: string;
  lastName: string;
  email: string;
  contactNumber: string;
  interests: string[];
  message: string;
  newsletter: boolean;
}

//========================================//
//     ContactService Protobuf Client     //
//========================================//

/**
 * Contact us will be a service to manage contact us form submissions
 */
export async function ContactUs(
  contactUsRequest: ContactUsRequest,
  config?: ClientConfiguration,
): Promise<ContactUsResponse> {
  const response = await PBrequest(
    "/workshop.ContactService/ContactUs",
    ContactUsRequest.encode(contactUsRequest),
    config,
  );
  return ContactUsResponse.decode(response);
}

//========================================//
//       ContactService JSON Client       //
//========================================//

/**
 * Contact us will be a service to manage contact us form submissions
 */
export async function ContactUsJSON(
  contactUsRequest: ContactUsRequest,
  config?: ClientConfiguration,
): Promise<ContactUsResponse> {
  const response = await JSONrequest(
    "/workshop.ContactService/ContactUs",
    ContactUsRequestJSON.encode(contactUsRequest),
    config,
  );
  return ContactUsResponseJSON.decode(response);
}

//========================================//
//             ContactService             //
//========================================//

export interface ContactService<Context = unknown> {
  /**
   * Contact us will be a service to manage contact us form submissions
   */
  ContactUs: (
    contactUsRequest: ContactUsRequest,
    context: Context,
  ) => Promise<ContactUsResponse> | ContactUsResponse;
}

export function createContactService<Context>(
  service: ContactService<Context>,
) {
  return {
    name: "workshop.ContactService",
    methods: {
      ContactUs: {
        name: "ContactUs",
        handler: service.ContactUs,
        input: { protobuf: ContactUsRequest, json: ContactUsRequestJSON },
        output: { protobuf: ContactUsResponse, json: ContactUsResponseJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ContactUsRequest = {
  /**
   * Serializes ContactUsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ContactUsRequest>): Uint8Array {
    return ContactUsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ContactUsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ContactUsRequest {
    return ContactUsRequest._readMessage(
      ContactUsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ContactUsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ContactUsRequest>): ContactUsRequest {
    return {
      customer: Customer.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ContactUsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.customer) {
      writer.writeMessage(1, msg.customer, Customer._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ContactUsRequest,
    reader: protoscript.BinaryReader,
  ): ContactUsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.customer, Customer._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ContactUsResponse = {
  /**
   * Serializes ContactUsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ContactUsResponse>): Uint8Array {
    return ContactUsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ContactUsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ContactUsResponse {
    return ContactUsResponse._readMessage(
      ContactUsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ContactUsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ContactUsResponse>): ContactUsResponse {
    return {
      message: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ContactUsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.message) {
      writer.writeString(1, msg.message);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ContactUsResponse,
    reader: protoscript.BinaryReader,
  ): ContactUsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.message = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Customer = {
  /**
   * Serializes Customer to protobuf.
   */
  encode: function (msg: PartialDeep<Customer>): Uint8Array {
    return Customer._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Customer from protobuf.
   */
  decode: function (bytes: ByteSource): Customer {
    return Customer._readMessage(
      Customer.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Customer with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Customer>): Customer {
    return {
      firstName: "",
      lastName: "",
      email: "",
      contactNumber: "",
      interests: [],
      message: "",
      newsletter: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Customer>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.firstName) {
      writer.writeString(1, msg.firstName);
    }
    if (msg.lastName) {
      writer.writeString(2, msg.lastName);
    }
    if (msg.email) {
      writer.writeString(3, msg.email);
    }
    if (msg.contactNumber) {
      writer.writeString(4, msg.contactNumber);
    }
    if (msg.interests?.length) {
      writer.writeRepeatedString(5, msg.interests);
    }
    if (msg.message) {
      writer.writeString(6, msg.message);
    }
    if (msg.newsletter) {
      writer.writeBool(7, msg.newsletter);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Customer,
    reader: protoscript.BinaryReader,
  ): Customer {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.firstName = reader.readString();
          break;
        }
        case 2: {
          msg.lastName = reader.readString();
          break;
        }
        case 3: {
          msg.email = reader.readString();
          break;
        }
        case 4: {
          msg.contactNumber = reader.readString();
          break;
        }
        case 5: {
          msg.interests.push(reader.readString());
          break;
        }
        case 6: {
          msg.message = reader.readString();
          break;
        }
        case 7: {
          msg.newsletter = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ContactUsRequestJSON = {
  /**
   * Serializes ContactUsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ContactUsRequest>): string {
    return JSON.stringify(ContactUsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ContactUsRequest from JSON.
   */
  decode: function (json: string): ContactUsRequest {
    return ContactUsRequestJSON._readMessage(
      ContactUsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ContactUsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ContactUsRequest>): ContactUsRequest {
    return {
      customer: CustomerJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ContactUsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.customer) {
      const _customer_ = CustomerJSON._writeMessage(msg.customer);
      if (Object.keys(_customer_).length > 0) {
        json["customer"] = _customer_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ContactUsRequest, json: any): ContactUsRequest {
    const _customer_ = json["customer"];
    if (_customer_) {
      CustomerJSON._readMessage(msg.customer, _customer_);
    }
    return msg;
  },
};

export const ContactUsResponseJSON = {
  /**
   * Serializes ContactUsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ContactUsResponse>): string {
    return JSON.stringify(ContactUsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ContactUsResponse from JSON.
   */
  decode: function (json: string): ContactUsResponse {
    return ContactUsResponseJSON._readMessage(
      ContactUsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ContactUsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ContactUsResponse>): ContactUsResponse {
    return {
      message: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ContactUsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.message) {
      json["message"] = msg.message;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ContactUsResponse,
    json: any,
  ): ContactUsResponse {
    const _message_ = json["message"];
    if (_message_) {
      msg.message = _message_;
    }
    return msg;
  },
};

export const CustomerJSON = {
  /**
   * Serializes Customer to JSON.
   */
  encode: function (msg: PartialDeep<Customer>): string {
    return JSON.stringify(CustomerJSON._writeMessage(msg));
  },

  /**
   * Deserializes Customer from JSON.
   */
  decode: function (json: string): Customer {
    return CustomerJSON._readMessage(
      CustomerJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes Customer with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Customer>): Customer {
    return {
      firstName: "",
      lastName: "",
      email: "",
      contactNumber: "",
      interests: [],
      message: "",
      newsletter: false,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Customer>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.firstName) {
      json["firstName"] = msg.firstName;
    }
    if (msg.lastName) {
      json["lastName"] = msg.lastName;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.contactNumber) {
      json["contactNumber"] = msg.contactNumber;
    }
    if (msg.interests?.length) {
      json["interests"] = msg.interests;
    }
    if (msg.message) {
      json["message"] = msg.message;
    }
    if (msg.newsletter) {
      json["newsletter"] = msg.newsletter;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Customer, json: any): Customer {
    const _firstName_ = json["firstName"];
    if (_firstName_) {
      msg.firstName = _firstName_;
    }
    const _lastName_ = json["lastName"];
    if (_lastName_) {
      msg.lastName = _lastName_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _contactNumber_ = json["contactNumber"];
    if (_contactNumber_) {
      msg.contactNumber = _contactNumber_;
    }
    const _interests_ = json["interests"];
    if (_interests_) {
      msg.interests = _interests_;
    }
    const _message_ = json["message"];
    if (_message_) {
      msg.message = _message_;
    }
    const _newsletter_ = json["newsletter"];
    if (_newsletter_) {
      msg.newsletter = _newsletter_;
    }
    return msg;
  },
};
