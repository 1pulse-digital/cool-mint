// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: workshop/tourBooking.repository.sky.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as workshopTourBooking from "./tourBooking.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListTourBookingsRequest {
  /**
   * Filter allows you to search by fields set as searchable.
   * TODO Generate the list of searchable fields for this comment
   */
  filter: string;
}

export interface ListTourBookingsResponse {
  TourBookings: workshopTourBooking.TourBooking[];
  total: bigint;
}

export interface CreateTourBookingRequest {
  /**
   * The name to use for the tourBooking, which will become the final component of
   * the tourBooking's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  tourBookingId: string;
  /**
   * The tourBooking to create.
   */
  tourBooking: workshopTourBooking.TourBooking;
}

export interface GetTourBookingRequest {
  name: string;
}

export interface UpdateTourBookingRequest {
  /**
   * The tourBooking to update.
   *
   * The tourBooking's 'name' field is used to identify the tourBooking to be updated.
   * Format: workshop/tourbooking}}
   */
  tourBooking: workshopTourBooking.TourBooking;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeleteTourBookingRequest {
  name: string;
}

//========================================//
// TourBookingRepository Protobuf Client  //
//========================================//

export async function ListTourBookings(
  listTourBookingsRequest: ListTourBookingsRequest,
  config?: ClientConfiguration,
): Promise<ListTourBookingsResponse> {
  const response = await PBrequest(
    "/workshop.TourBookingRepository/ListTourBookings",
    ListTourBookingsRequest.encode(listTourBookingsRequest),
    config,
  );
  return ListTourBookingsResponse.decode(response);
}

export async function CreateTourBooking(
  createTourBookingRequest: CreateTourBookingRequest,
  config?: ClientConfiguration,
): Promise<workshopTourBooking.TourBooking> {
  const response = await PBrequest(
    "/workshop.TourBookingRepository/CreateTourBooking",
    CreateTourBookingRequest.encode(createTourBookingRequest),
    config,
  );
  return workshopTourBooking.TourBooking.decode(response);
}

export async function GetTourBooking(
  getTourBookingRequest: GetTourBookingRequest,
  config?: ClientConfiguration,
): Promise<workshopTourBooking.TourBooking> {
  const response = await PBrequest(
    "/workshop.TourBookingRepository/GetTourBooking",
    GetTourBookingRequest.encode(getTourBookingRequest),
    config,
  );
  return workshopTourBooking.TourBooking.decode(response);
}

export async function UpdateTourBooking(
  updateTourBookingRequest: UpdateTourBookingRequest,
  config?: ClientConfiguration,
): Promise<workshopTourBooking.TourBooking> {
  const response = await PBrequest(
    "/workshop.TourBookingRepository/UpdateTourBooking",
    UpdateTourBookingRequest.encode(updateTourBookingRequest),
    config,
  );
  return workshopTourBooking.TourBooking.decode(response);
}

export async function DeleteTourBooking(
  deleteTourBookingRequest: DeleteTourBookingRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/workshop.TourBookingRepository/DeleteTourBooking",
    DeleteTourBookingRequest.encode(deleteTourBookingRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//   TourBookingRepository JSON Client    //
//========================================//

export async function ListTourBookingsJSON(
  listTourBookingsRequest: ListTourBookingsRequest,
  config?: ClientConfiguration,
): Promise<ListTourBookingsResponse> {
  const response = await JSONrequest(
    "/workshop.TourBookingRepository/ListTourBookings",
    ListTourBookingsRequestJSON.encode(listTourBookingsRequest),
    config,
  );
  return ListTourBookingsResponseJSON.decode(response);
}

export async function CreateTourBookingJSON(
  createTourBookingRequest: CreateTourBookingRequest,
  config?: ClientConfiguration,
): Promise<workshopTourBooking.TourBooking> {
  const response = await JSONrequest(
    "/workshop.TourBookingRepository/CreateTourBooking",
    CreateTourBookingRequestJSON.encode(createTourBookingRequest),
    config,
  );
  return workshopTourBooking.TourBookingJSON.decode(response);
}

export async function GetTourBookingJSON(
  getTourBookingRequest: GetTourBookingRequest,
  config?: ClientConfiguration,
): Promise<workshopTourBooking.TourBooking> {
  const response = await JSONrequest(
    "/workshop.TourBookingRepository/GetTourBooking",
    GetTourBookingRequestJSON.encode(getTourBookingRequest),
    config,
  );
  return workshopTourBooking.TourBookingJSON.decode(response);
}

export async function UpdateTourBookingJSON(
  updateTourBookingRequest: UpdateTourBookingRequest,
  config?: ClientConfiguration,
): Promise<workshopTourBooking.TourBooking> {
  const response = await JSONrequest(
    "/workshop.TourBookingRepository/UpdateTourBooking",
    UpdateTourBookingRequestJSON.encode(updateTourBookingRequest),
    config,
  );
  return workshopTourBooking.TourBookingJSON.decode(response);
}

export async function DeleteTourBookingJSON(
  deleteTourBookingRequest: DeleteTourBookingRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/workshop.TourBookingRepository/DeleteTourBooking",
    DeleteTourBookingRequestJSON.encode(deleteTourBookingRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//         TourBookingRepository          //
//========================================//

/**
 *
 * TourBookingRepository allows you to manage TourBookings.
 */
export interface TourBookingRepository<Context = unknown> {
  ListTourBookings: (
    listTourBookingsRequest: ListTourBookingsRequest,
    context: Context,
  ) => Promise<ListTourBookingsResponse> | ListTourBookingsResponse;
  CreateTourBooking: (
    createTourBookingRequest: CreateTourBookingRequest,
    context: Context,
  ) =>
    | Promise<workshopTourBooking.TourBooking>
    | workshopTourBooking.TourBooking;
  GetTourBooking: (
    getTourBookingRequest: GetTourBookingRequest,
    context: Context,
  ) =>
    | Promise<workshopTourBooking.TourBooking>
    | workshopTourBooking.TourBooking;
  UpdateTourBooking: (
    updateTourBookingRequest: UpdateTourBookingRequest,
    context: Context,
  ) =>
    | Promise<workshopTourBooking.TourBooking>
    | workshopTourBooking.TourBooking;
  DeleteTourBooking: (
    deleteTourBookingRequest: DeleteTourBookingRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createTourBookingRepository<Context>(
  service: TourBookingRepository<Context>,
) {
  return {
    name: "workshop.TourBookingRepository",
    methods: {
      ListTourBookings: {
        name: "ListTourBookings",
        handler: service.ListTourBookings,
        input: {
          protobuf: ListTourBookingsRequest,
          json: ListTourBookingsRequestJSON,
        },
        output: {
          protobuf: ListTourBookingsResponse,
          json: ListTourBookingsResponseJSON,
        },
      },
      CreateTourBooking: {
        name: "CreateTourBooking",
        handler: service.CreateTourBooking,
        input: {
          protobuf: CreateTourBookingRequest,
          json: CreateTourBookingRequestJSON,
        },
        output: {
          protobuf: workshopTourBooking.TourBooking,
          json: workshopTourBooking.TourBookingJSON,
        },
      },
      GetTourBooking: {
        name: "GetTourBooking",
        handler: service.GetTourBooking,
        input: {
          protobuf: GetTourBookingRequest,
          json: GetTourBookingRequestJSON,
        },
        output: {
          protobuf: workshopTourBooking.TourBooking,
          json: workshopTourBooking.TourBookingJSON,
        },
      },
      UpdateTourBooking: {
        name: "UpdateTourBooking",
        handler: service.UpdateTourBooking,
        input: {
          protobuf: UpdateTourBookingRequest,
          json: UpdateTourBookingRequestJSON,
        },
        output: {
          protobuf: workshopTourBooking.TourBooking,
          json: workshopTourBooking.TourBookingJSON,
        },
      },
      DeleteTourBooking: {
        name: "DeleteTourBooking",
        handler: service.DeleteTourBooking,
        input: {
          protobuf: DeleteTourBookingRequest,
          json: DeleteTourBookingRequestJSON,
        },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListTourBookingsRequest = {
  /**
   * Serializes ListTourBookingsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListTourBookingsRequest>): Uint8Array {
    return ListTourBookingsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListTourBookingsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListTourBookingsRequest {
    return ListTourBookingsRequest._readMessage(
      ListTourBookingsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListTourBookingsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListTourBookingsRequest>,
  ): ListTourBookingsRequest {
    return {
      filter: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListTourBookingsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTourBookingsRequest,
    reader: protoscript.BinaryReader,
  ): ListTourBookingsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListTourBookingsResponse = {
  /**
   * Serializes ListTourBookingsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListTourBookingsResponse>): Uint8Array {
    return ListTourBookingsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListTourBookingsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListTourBookingsResponse {
    return ListTourBookingsResponse._readMessage(
      ListTourBookingsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListTourBookingsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListTourBookingsResponse>,
  ): ListTourBookingsResponse {
    return {
      TourBookings: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListTourBookingsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.TourBookings?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.TourBookings as any,
        workshopTourBooking.TourBooking._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTourBookingsResponse,
    reader: protoscript.BinaryReader,
  ): ListTourBookingsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = workshopTourBooking.TourBooking.initialize();
          reader.readMessage(m, workshopTourBooking.TourBooking._readMessage);
          msg.TourBookings.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateTourBookingRequest = {
  /**
   * Serializes CreateTourBookingRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateTourBookingRequest>): Uint8Array {
    return CreateTourBookingRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateTourBookingRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateTourBookingRequest {
    return CreateTourBookingRequest._readMessage(
      CreateTourBookingRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateTourBookingRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateTourBookingRequest>,
  ): CreateTourBookingRequest {
    return {
      tourBookingId: "",
      tourBooking: workshopTourBooking.TourBooking.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateTourBookingRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.tourBookingId) {
      writer.writeString(1, msg.tourBookingId);
    }
    if (msg.tourBooking) {
      writer.writeMessage(
        2,
        msg.tourBooking,
        workshopTourBooking.TourBooking._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateTourBookingRequest,
    reader: protoscript.BinaryReader,
  ): CreateTourBookingRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.tourBookingId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(
            msg.tourBooking,
            workshopTourBooking.TourBooking._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetTourBookingRequest = {
  /**
   * Serializes GetTourBookingRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetTourBookingRequest>): Uint8Array {
    return GetTourBookingRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetTourBookingRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetTourBookingRequest {
    return GetTourBookingRequest._readMessage(
      GetTourBookingRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetTourBookingRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetTourBookingRequest>,
  ): GetTourBookingRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetTourBookingRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetTourBookingRequest,
    reader: protoscript.BinaryReader,
  ): GetTourBookingRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateTourBookingRequest = {
  /**
   * Serializes UpdateTourBookingRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateTourBookingRequest>): Uint8Array {
    return UpdateTourBookingRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateTourBookingRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateTourBookingRequest {
    return UpdateTourBookingRequest._readMessage(
      UpdateTourBookingRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateTourBookingRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateTourBookingRequest>,
  ): UpdateTourBookingRequest {
    return {
      tourBooking: workshopTourBooking.TourBooking.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateTourBookingRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.tourBooking) {
      writer.writeMessage(
        1,
        msg.tourBooking,
        workshopTourBooking.TourBooking._writeMessage,
      );
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateTourBookingRequest,
    reader: protoscript.BinaryReader,
  ): UpdateTourBookingRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(
            msg.tourBooking,
            workshopTourBooking.TourBooking._readMessage,
          );
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteTourBookingRequest = {
  /**
   * Serializes DeleteTourBookingRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteTourBookingRequest>): Uint8Array {
    return DeleteTourBookingRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteTourBookingRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteTourBookingRequest {
    return DeleteTourBookingRequest._readMessage(
      DeleteTourBookingRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteTourBookingRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteTourBookingRequest>,
  ): DeleteTourBookingRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteTourBookingRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteTourBookingRequest,
    reader: protoscript.BinaryReader,
  ): DeleteTourBookingRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListTourBookingsRequestJSON = {
  /**
   * Serializes ListTourBookingsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListTourBookingsRequest>): string {
    return JSON.stringify(ListTourBookingsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListTourBookingsRequest from JSON.
   */
  decode: function (json: string): ListTourBookingsRequest {
    return ListTourBookingsRequestJSON._readMessage(
      ListTourBookingsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListTourBookingsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListTourBookingsRequest>,
  ): ListTourBookingsRequest {
    return {
      filter: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListTourBookingsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTourBookingsRequest,
    json: any,
  ): ListTourBookingsRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    return msg;
  },
};

export const ListTourBookingsResponseJSON = {
  /**
   * Serializes ListTourBookingsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListTourBookingsResponse>): string {
    return JSON.stringify(ListTourBookingsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListTourBookingsResponse from JSON.
   */
  decode: function (json: string): ListTourBookingsResponse {
    return ListTourBookingsResponseJSON._readMessage(
      ListTourBookingsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListTourBookingsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListTourBookingsResponse>,
  ): ListTourBookingsResponse {
    return {
      TourBookings: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListTourBookingsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.TourBookings?.length) {
      json["TourBookings"] = msg.TourBookings.map(
        workshopTourBooking.TourBookingJSON._writeMessage,
      );
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListTourBookingsResponse,
    json: any,
  ): ListTourBookingsResponse {
    const _TourBookings_ = json["TourBookings"];
    if (_TourBookings_) {
      for (const item of _TourBookings_) {
        const m = workshopTourBooking.TourBookingJSON.initialize();
        workshopTourBooking.TourBookingJSON._readMessage(m, item);
        msg.TourBookings.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    return msg;
  },
};

export const CreateTourBookingRequestJSON = {
  /**
   * Serializes CreateTourBookingRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateTourBookingRequest>): string {
    return JSON.stringify(CreateTourBookingRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateTourBookingRequest from JSON.
   */
  decode: function (json: string): CreateTourBookingRequest {
    return CreateTourBookingRequestJSON._readMessage(
      CreateTourBookingRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateTourBookingRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateTourBookingRequest>,
  ): CreateTourBookingRequest {
    return {
      tourBookingId: "",
      tourBooking: workshopTourBooking.TourBookingJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateTourBookingRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.tourBookingId) {
      json["tourBookingId"] = msg.tourBookingId;
    }
    if (msg.tourBooking) {
      const _tourBooking_ = workshopTourBooking.TourBookingJSON._writeMessage(
        msg.tourBooking,
      );
      if (Object.keys(_tourBooking_).length > 0) {
        json["tourBooking"] = _tourBooking_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateTourBookingRequest,
    json: any,
  ): CreateTourBookingRequest {
    const _tourBookingId_ = json["tourBookingId"] ?? json["tourBooking_id"];
    if (_tourBookingId_) {
      msg.tourBookingId = _tourBookingId_;
    }
    const _tourBooking_ = json["tourBooking"];
    if (_tourBooking_) {
      workshopTourBooking.TourBookingJSON._readMessage(
        msg.tourBooking,
        _tourBooking_,
      );
    }
    return msg;
  },
};

export const GetTourBookingRequestJSON = {
  /**
   * Serializes GetTourBookingRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetTourBookingRequest>): string {
    return JSON.stringify(GetTourBookingRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetTourBookingRequest from JSON.
   */
  decode: function (json: string): GetTourBookingRequest {
    return GetTourBookingRequestJSON._readMessage(
      GetTourBookingRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetTourBookingRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetTourBookingRequest>,
  ): GetTourBookingRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetTourBookingRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetTourBookingRequest,
    json: any,
  ): GetTourBookingRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdateTourBookingRequestJSON = {
  /**
   * Serializes UpdateTourBookingRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateTourBookingRequest>): string {
    return JSON.stringify(UpdateTourBookingRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateTourBookingRequest from JSON.
   */
  decode: function (json: string): UpdateTourBookingRequest {
    return UpdateTourBookingRequestJSON._readMessage(
      UpdateTourBookingRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateTourBookingRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateTourBookingRequest>,
  ): UpdateTourBookingRequest {
    return {
      tourBooking: workshopTourBooking.TourBookingJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateTourBookingRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.tourBooking) {
      const _tourBooking_ = workshopTourBooking.TourBookingJSON._writeMessage(
        msg.tourBooking,
      );
      if (Object.keys(_tourBooking_).length > 0) {
        json["tourBooking"] = _tourBooking_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateTourBookingRequest,
    json: any,
  ): UpdateTourBookingRequest {
    const _tourBooking_ = json["tourBooking"];
    if (_tourBooking_) {
      workshopTourBooking.TourBookingJSON._readMessage(
        msg.tourBooking,
        _tourBooking_,
      );
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeleteTourBookingRequestJSON = {
  /**
   * Serializes DeleteTourBookingRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteTourBookingRequest>): string {
    return JSON.stringify(DeleteTourBookingRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteTourBookingRequest from JSON.
   */
  decode: function (json: string): DeleteTourBookingRequest {
    return DeleteTourBookingRequestJSON._readMessage(
      DeleteTourBookingRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteTourBookingRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteTourBookingRequest>,
  ): DeleteTourBookingRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteTourBookingRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteTourBookingRequest,
    json: any,
  ): DeleteTourBookingRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
