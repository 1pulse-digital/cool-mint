// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: workshop/machine.manager.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as workshopMachine from "./machine.pb";

//========================================//
//                 Types                  //
//========================================//

export interface FlipMachineRequest {
  /**
   * The filter allows you to search by [TODO1, TODO2] fields
   */
  filter: string;
  /**
   * The maximum number of items to return.
   */
  pageSize: number;
  /**
   * The next_page_token value returned from a previous List request, if any.
   */
  pageToken: string;
}

export interface FlipMachineResponse {
  /**
   * There will be a maximum number of records returned based on the page_size field in the request.
   */
  Machines: workshopMachine.Machine[];
  total: bigint;
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

//========================================//
//        Manager Protobuf Client         //
//========================================//

export async function FlipMachine(
  flipMachineRequest: FlipMachineRequest,
  config?: ClientConfiguration,
): Promise<FlipMachineResponse> {
  const response = await PBrequest(
    "/workshop.Manager/FlipMachine",
    FlipMachineRequest.encode(flipMachineRequest),
    config,
  );
  return FlipMachineResponse.decode(response);
}

//========================================//
//          Manager JSON Client           //
//========================================//

export async function FlipMachineJSON(
  flipMachineRequest: FlipMachineRequest,
  config?: ClientConfiguration,
): Promise<FlipMachineResponse> {
  const response = await JSONrequest(
    "/workshop.Manager/FlipMachine",
    FlipMachineRequestJSON.encode(flipMachineRequest),
    config,
  );
  return FlipMachineResponseJSON.decode(response);
}

//========================================//
//                Manager                 //
//========================================//

/**
 *
 * MachineManager allows you to manage Machines.
 */
export interface Manager<Context = unknown> {
  FlipMachine: (
    flipMachineRequest: FlipMachineRequest,
    context: Context,
  ) => Promise<FlipMachineResponse> | FlipMachineResponse;
}

export function createManager<Context>(service: Manager<Context>) {
  return {
    name: "workshop.Manager",
    methods: {
      FlipMachine: {
        name: "FlipMachine",
        handler: service.FlipMachine,
        input: { protobuf: FlipMachineRequest, json: FlipMachineRequestJSON },
        output: {
          protobuf: FlipMachineResponse,
          json: FlipMachineResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const FlipMachineRequest = {
  /**
   * Serializes FlipMachineRequest to protobuf.
   */
  encode: function (msg: PartialDeep<FlipMachineRequest>): Uint8Array {
    return FlipMachineRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FlipMachineRequest from protobuf.
   */
  decode: function (bytes: ByteSource): FlipMachineRequest {
    return FlipMachineRequest._readMessage(
      FlipMachineRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FlipMachineRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FlipMachineRequest>): FlipMachineRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FlipMachineRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    if (msg.pageSize) {
      writer.writeInt32(2, msg.pageSize);
    }
    if (msg.pageToken) {
      writer.writeString(3, msg.pageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FlipMachineRequest,
    reader: protoscript.BinaryReader,
  ): FlipMachineRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        case 2: {
          msg.pageSize = reader.readInt32();
          break;
        }
        case 3: {
          msg.pageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FlipMachineResponse = {
  /**
   * Serializes FlipMachineResponse to protobuf.
   */
  encode: function (msg: PartialDeep<FlipMachineResponse>): Uint8Array {
    return FlipMachineResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes FlipMachineResponse from protobuf.
   */
  decode: function (bytes: ByteSource): FlipMachineResponse {
    return FlipMachineResponse._readMessage(
      FlipMachineResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes FlipMachineResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<FlipMachineResponse>,
  ): FlipMachineResponse {
    return {
      Machines: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FlipMachineResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.Machines?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.Machines as any,
        workshopMachine.Machine._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    if (msg.nextPageToken) {
      writer.writeString(3, msg.nextPageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FlipMachineResponse,
    reader: protoscript.BinaryReader,
  ): FlipMachineResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = workshopMachine.Machine.initialize();
          reader.readMessage(m, workshopMachine.Machine._readMessage);
          msg.Machines.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.nextPageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const FlipMachineRequestJSON = {
  /**
   * Serializes FlipMachineRequest to JSON.
   */
  encode: function (msg: PartialDeep<FlipMachineRequest>): string {
    return JSON.stringify(FlipMachineRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes FlipMachineRequest from JSON.
   */
  decode: function (json: string): FlipMachineRequest {
    return FlipMachineRequestJSON._readMessage(
      FlipMachineRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FlipMachineRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<FlipMachineRequest>): FlipMachineRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FlipMachineRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    if (msg.pageSize) {
      json["pageSize"] = msg.pageSize;
    }
    if (msg.pageToken) {
      json["pageToken"] = msg.pageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FlipMachineRequest,
    json: any,
  ): FlipMachineRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    const _pageSize_ = json["pageSize"];
    if (_pageSize_) {
      msg.pageSize = protoscript.parseNumber(_pageSize_);
    }
    const _pageToken_ = json["pageToken"];
    if (_pageToken_) {
      msg.pageToken = _pageToken_;
    }
    return msg;
  },
};

export const FlipMachineResponseJSON = {
  /**
   * Serializes FlipMachineResponse to JSON.
   */
  encode: function (msg: PartialDeep<FlipMachineResponse>): string {
    return JSON.stringify(FlipMachineResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes FlipMachineResponse from JSON.
   */
  decode: function (json: string): FlipMachineResponse {
    return FlipMachineResponseJSON._readMessage(
      FlipMachineResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes FlipMachineResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<FlipMachineResponse>,
  ): FlipMachineResponse {
    return {
      Machines: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<FlipMachineResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Machines?.length) {
      json["Machines"] = msg.Machines.map(
        workshopMachine.MachineJSON._writeMessage,
      );
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    if (msg.nextPageToken) {
      json["nextPageToken"] = msg.nextPageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: FlipMachineResponse,
    json: any,
  ): FlipMachineResponse {
    const _Machines_ = json["Machines"];
    if (_Machines_) {
      for (const item of _Machines_) {
        const m = workshopMachine.MachineJSON.initialize();
        workshopMachine.MachineJSON._readMessage(m, item);
        msg.Machines.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    const _nextPageToken_ = json["nextPageToken"];
    if (_nextPageToken_) {
      msg.nextPageToken = _nextPageToken_;
    }
    return msg;
  },
};
