// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: workshop/contact.repository.sky.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as workshopContact from "./contact.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListContactsRequest {
  /**
   * Filter allows you to search by fields set as searchable.
   * TODO Generate the list of searchable fields for this comment
   */
  filter: string;
  /**
   * The maximum number of items to return.
   */
  pageSize: number;
  /**
   * The next_page_token value returned from a previous List request, if any.
   */
  pageToken: string;
}

export interface ListContactsResponse {
  /**
   * There will be a maximum number of records returned based on the page_size field in the request.
   */
  Contacts: workshopContact.Contact[];
  total: bigint;
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

export interface CreateContactRequest {
  /**
   * The name to use for the contact, which will become the final component of
   * the contact's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  contactId: string;
  /**
   * The contact to create.
   */
  contact: workshopContact.Contact;
}

export interface GetContactRequest {
  name: string;
}

export interface UpdateContactRequest {
  /**
   * The contact to update.
   *
   * The contact's 'name' field is used to identify the contact to be updated.
   * Format: workshop/contact}}
   */
  contact: workshopContact.Contact;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeleteContactRequest {
  name: string;
}

//========================================//
//   ContactRepository Protobuf Client    //
//========================================//

export async function ListContacts(
  listContactsRequest: ListContactsRequest,
  config?: ClientConfiguration,
): Promise<ListContactsResponse> {
  const response = await PBrequest(
    "/workshop.ContactRepository/ListContacts",
    ListContactsRequest.encode(listContactsRequest),
    config,
  );
  return ListContactsResponse.decode(response);
}

export async function CreateContact(
  createContactRequest: CreateContactRequest,
  config?: ClientConfiguration,
): Promise<workshopContact.Contact> {
  const response = await PBrequest(
    "/workshop.ContactRepository/CreateContact",
    CreateContactRequest.encode(createContactRequest),
    config,
  );
  return workshopContact.Contact.decode(response);
}

export async function GetContact(
  getContactRequest: GetContactRequest,
  config?: ClientConfiguration,
): Promise<workshopContact.Contact> {
  const response = await PBrequest(
    "/workshop.ContactRepository/GetContact",
    GetContactRequest.encode(getContactRequest),
    config,
  );
  return workshopContact.Contact.decode(response);
}

export async function UpdateContact(
  updateContactRequest: UpdateContactRequest,
  config?: ClientConfiguration,
): Promise<workshopContact.Contact> {
  const response = await PBrequest(
    "/workshop.ContactRepository/UpdateContact",
    UpdateContactRequest.encode(updateContactRequest),
    config,
  );
  return workshopContact.Contact.decode(response);
}

export async function DeleteContact(
  deleteContactRequest: DeleteContactRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/workshop.ContactRepository/DeleteContact",
    DeleteContactRequest.encode(deleteContactRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//     ContactRepository JSON Client      //
//========================================//

export async function ListContactsJSON(
  listContactsRequest: ListContactsRequest,
  config?: ClientConfiguration,
): Promise<ListContactsResponse> {
  const response = await JSONrequest(
    "/workshop.ContactRepository/ListContacts",
    ListContactsRequestJSON.encode(listContactsRequest),
    config,
  );
  return ListContactsResponseJSON.decode(response);
}

export async function CreateContactJSON(
  createContactRequest: CreateContactRequest,
  config?: ClientConfiguration,
): Promise<workshopContact.Contact> {
  const response = await JSONrequest(
    "/workshop.ContactRepository/CreateContact",
    CreateContactRequestJSON.encode(createContactRequest),
    config,
  );
  return workshopContact.ContactJSON.decode(response);
}

export async function GetContactJSON(
  getContactRequest: GetContactRequest,
  config?: ClientConfiguration,
): Promise<workshopContact.Contact> {
  const response = await JSONrequest(
    "/workshop.ContactRepository/GetContact",
    GetContactRequestJSON.encode(getContactRequest),
    config,
  );
  return workshopContact.ContactJSON.decode(response);
}

export async function UpdateContactJSON(
  updateContactRequest: UpdateContactRequest,
  config?: ClientConfiguration,
): Promise<workshopContact.Contact> {
  const response = await JSONrequest(
    "/workshop.ContactRepository/UpdateContact",
    UpdateContactRequestJSON.encode(updateContactRequest),
    config,
  );
  return workshopContact.ContactJSON.decode(response);
}

export async function DeleteContactJSON(
  deleteContactRequest: DeleteContactRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/workshop.ContactRepository/DeleteContact",
    DeleteContactRequestJSON.encode(deleteContactRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//           ContactRepository            //
//========================================//

/**
 *
 * ContactRepository allows you to manage Contacts.
 */
export interface ContactRepository<Context = unknown> {
  ListContacts: (
    listContactsRequest: ListContactsRequest,
    context: Context,
  ) => Promise<ListContactsResponse> | ListContactsResponse;
  CreateContact: (
    createContactRequest: CreateContactRequest,
    context: Context,
  ) => Promise<workshopContact.Contact> | workshopContact.Contact;
  GetContact: (
    getContactRequest: GetContactRequest,
    context: Context,
  ) => Promise<workshopContact.Contact> | workshopContact.Contact;
  UpdateContact: (
    updateContactRequest: UpdateContactRequest,
    context: Context,
  ) => Promise<workshopContact.Contact> | workshopContact.Contact;
  DeleteContact: (
    deleteContactRequest: DeleteContactRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createContactRepository<Context>(
  service: ContactRepository<Context>,
) {
  return {
    name: "workshop.ContactRepository",
    methods: {
      ListContacts: {
        name: "ListContacts",
        handler: service.ListContacts,
        input: { protobuf: ListContactsRequest, json: ListContactsRequestJSON },
        output: {
          protobuf: ListContactsResponse,
          json: ListContactsResponseJSON,
        },
      },
      CreateContact: {
        name: "CreateContact",
        handler: service.CreateContact,
        input: {
          protobuf: CreateContactRequest,
          json: CreateContactRequestJSON,
        },
        output: {
          protobuf: workshopContact.Contact,
          json: workshopContact.ContactJSON,
        },
      },
      GetContact: {
        name: "GetContact",
        handler: service.GetContact,
        input: { protobuf: GetContactRequest, json: GetContactRequestJSON },
        output: {
          protobuf: workshopContact.Contact,
          json: workshopContact.ContactJSON,
        },
      },
      UpdateContact: {
        name: "UpdateContact",
        handler: service.UpdateContact,
        input: {
          protobuf: UpdateContactRequest,
          json: UpdateContactRequestJSON,
        },
        output: {
          protobuf: workshopContact.Contact,
          json: workshopContact.ContactJSON,
        },
      },
      DeleteContact: {
        name: "DeleteContact",
        handler: service.DeleteContact,
        input: {
          protobuf: DeleteContactRequest,
          json: DeleteContactRequestJSON,
        },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListContactsRequest = {
  /**
   * Serializes ListContactsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListContactsRequest>): Uint8Array {
    return ListContactsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListContactsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListContactsRequest {
    return ListContactsRequest._readMessage(
      ListContactsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListContactsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListContactsRequest>,
  ): ListContactsRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListContactsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    if (msg.pageSize) {
      writer.writeInt32(2, msg.pageSize);
    }
    if (msg.pageToken) {
      writer.writeString(3, msg.pageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListContactsRequest,
    reader: protoscript.BinaryReader,
  ): ListContactsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        case 2: {
          msg.pageSize = reader.readInt32();
          break;
        }
        case 3: {
          msg.pageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListContactsResponse = {
  /**
   * Serializes ListContactsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListContactsResponse>): Uint8Array {
    return ListContactsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListContactsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListContactsResponse {
    return ListContactsResponse._readMessage(
      ListContactsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListContactsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListContactsResponse>,
  ): ListContactsResponse {
    return {
      Contacts: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListContactsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.Contacts?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.Contacts as any,
        workshopContact.Contact._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    if (msg.nextPageToken) {
      writer.writeString(3, msg.nextPageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListContactsResponse,
    reader: protoscript.BinaryReader,
  ): ListContactsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = workshopContact.Contact.initialize();
          reader.readMessage(m, workshopContact.Contact._readMessage);
          msg.Contacts.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.nextPageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateContactRequest = {
  /**
   * Serializes CreateContactRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateContactRequest>): Uint8Array {
    return CreateContactRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateContactRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateContactRequest {
    return CreateContactRequest._readMessage(
      CreateContactRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateContactRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateContactRequest>,
  ): CreateContactRequest {
    return {
      contactId: "",
      contact: workshopContact.Contact.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateContactRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.contactId) {
      writer.writeString(1, msg.contactId);
    }
    if (msg.contact) {
      writer.writeMessage(
        2,
        msg.contact,
        workshopContact.Contact._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateContactRequest,
    reader: protoscript.BinaryReader,
  ): CreateContactRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.contactId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.contact, workshopContact.Contact._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetContactRequest = {
  /**
   * Serializes GetContactRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetContactRequest>): Uint8Array {
    return GetContactRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetContactRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetContactRequest {
    return GetContactRequest._readMessage(
      GetContactRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetContactRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetContactRequest>): GetContactRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetContactRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetContactRequest,
    reader: protoscript.BinaryReader,
  ): GetContactRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateContactRequest = {
  /**
   * Serializes UpdateContactRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateContactRequest>): Uint8Array {
    return UpdateContactRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateContactRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateContactRequest {
    return UpdateContactRequest._readMessage(
      UpdateContactRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateContactRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateContactRequest>,
  ): UpdateContactRequest {
    return {
      contact: workshopContact.Contact.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateContactRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.contact) {
      writer.writeMessage(
        1,
        msg.contact,
        workshopContact.Contact._writeMessage,
      );
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateContactRequest,
    reader: protoscript.BinaryReader,
  ): UpdateContactRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.contact, workshopContact.Contact._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteContactRequest = {
  /**
   * Serializes DeleteContactRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteContactRequest>): Uint8Array {
    return DeleteContactRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteContactRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteContactRequest {
    return DeleteContactRequest._readMessage(
      DeleteContactRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteContactRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteContactRequest>,
  ): DeleteContactRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteContactRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteContactRequest,
    reader: protoscript.BinaryReader,
  ): DeleteContactRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListContactsRequestJSON = {
  /**
   * Serializes ListContactsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListContactsRequest>): string {
    return JSON.stringify(ListContactsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListContactsRequest from JSON.
   */
  decode: function (json: string): ListContactsRequest {
    return ListContactsRequestJSON._readMessage(
      ListContactsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListContactsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListContactsRequest>,
  ): ListContactsRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListContactsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    if (msg.pageSize) {
      json["pageSize"] = msg.pageSize;
    }
    if (msg.pageToken) {
      json["pageToken"] = msg.pageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListContactsRequest,
    json: any,
  ): ListContactsRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    const _pageSize_ = json["pageSize"] ?? json["page_size"];
    if (_pageSize_) {
      msg.pageSize = protoscript.parseNumber(_pageSize_);
    }
    const _pageToken_ = json["pageToken"] ?? json["page_token"];
    if (_pageToken_) {
      msg.pageToken = _pageToken_;
    }
    return msg;
  },
};

export const ListContactsResponseJSON = {
  /**
   * Serializes ListContactsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListContactsResponse>): string {
    return JSON.stringify(ListContactsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListContactsResponse from JSON.
   */
  decode: function (json: string): ListContactsResponse {
    return ListContactsResponseJSON._readMessage(
      ListContactsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListContactsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListContactsResponse>,
  ): ListContactsResponse {
    return {
      Contacts: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListContactsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Contacts?.length) {
      json["Contacts"] = msg.Contacts.map(
        workshopContact.ContactJSON._writeMessage,
      );
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    if (msg.nextPageToken) {
      json["nextPageToken"] = msg.nextPageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListContactsResponse,
    json: any,
  ): ListContactsResponse {
    const _Contacts_ = json["Contacts"];
    if (_Contacts_) {
      for (const item of _Contacts_) {
        const m = workshopContact.ContactJSON.initialize();
        workshopContact.ContactJSON._readMessage(m, item);
        msg.Contacts.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    const _nextPageToken_ = json["nextPageToken"] ?? json["next_page_token"];
    if (_nextPageToken_) {
      msg.nextPageToken = _nextPageToken_;
    }
    return msg;
  },
};

export const CreateContactRequestJSON = {
  /**
   * Serializes CreateContactRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateContactRequest>): string {
    return JSON.stringify(CreateContactRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateContactRequest from JSON.
   */
  decode: function (json: string): CreateContactRequest {
    return CreateContactRequestJSON._readMessage(
      CreateContactRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateContactRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateContactRequest>,
  ): CreateContactRequest {
    return {
      contactId: "",
      contact: workshopContact.ContactJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateContactRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.contactId) {
      json["contactId"] = msg.contactId;
    }
    if (msg.contact) {
      const _contact_ = workshopContact.ContactJSON._writeMessage(msg.contact);
      if (Object.keys(_contact_).length > 0) {
        json["contact"] = _contact_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateContactRequest,
    json: any,
  ): CreateContactRequest {
    const _contactId_ = json["contactId"] ?? json["contact_id"];
    if (_contactId_) {
      msg.contactId = _contactId_;
    }
    const _contact_ = json["contact"];
    if (_contact_) {
      workshopContact.ContactJSON._readMessage(msg.contact, _contact_);
    }
    return msg;
  },
};

export const GetContactRequestJSON = {
  /**
   * Serializes GetContactRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetContactRequest>): string {
    return JSON.stringify(GetContactRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetContactRequest from JSON.
   */
  decode: function (json: string): GetContactRequest {
    return GetContactRequestJSON._readMessage(
      GetContactRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetContactRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetContactRequest>): GetContactRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetContactRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetContactRequest,
    json: any,
  ): GetContactRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdateContactRequestJSON = {
  /**
   * Serializes UpdateContactRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateContactRequest>): string {
    return JSON.stringify(UpdateContactRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateContactRequest from JSON.
   */
  decode: function (json: string): UpdateContactRequest {
    return UpdateContactRequestJSON._readMessage(
      UpdateContactRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateContactRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateContactRequest>,
  ): UpdateContactRequest {
    return {
      contact: workshopContact.ContactJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateContactRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.contact) {
      const _contact_ = workshopContact.ContactJSON._writeMessage(msg.contact);
      if (Object.keys(_contact_).length > 0) {
        json["contact"] = _contact_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateContactRequest,
    json: any,
  ): UpdateContactRequest {
    const _contact_ = json["contact"];
    if (_contact_) {
      workshopContact.ContactJSON._readMessage(msg.contact, _contact_);
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeleteContactRequestJSON = {
  /**
   * Serializes DeleteContactRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteContactRequest>): string {
    return JSON.stringify(DeleteContactRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteContactRequest from JSON.
   */
  decode: function (json: string): DeleteContactRequest {
    return DeleteContactRequestJSON._readMessage(
      DeleteContactRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteContactRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteContactRequest>,
  ): DeleteContactRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteContactRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteContactRequest,
    json: any,
  ): DeleteContactRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
