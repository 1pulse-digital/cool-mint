// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: workshop/machine.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

import * as mediaGallery from "../media/gallery.pb";

//========================================//
//                 Types                  //
//========================================//

export type MachineCategory = "Woodwork" | "Metalwork" | "Engineering";

export interface MachineAttribute {
  name: string;
  value: string;
}

export interface Machine {
  name: string;
  uid: string;
  displayName: string;
  description: string;
  categories: MachineCategory[];
  attributes: MachineAttribute[];
  gallery: mediaGallery.Gallery;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const MachineCategory = {
  Woodwork: "Woodwork",
  Metalwork: "Metalwork",
  Engineering: "Engineering",
  /**
   * @private
   */
  _fromInt: function (i: number): MachineCategory {
    switch (i) {
      case 0: {
        return "Woodwork";
      }
      case 1: {
        return "Metalwork";
      }
      case 2: {
        return "Engineering";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as MachineCategory;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: MachineCategory): number {
    switch (i) {
      case "Woodwork": {
        return 0;
      }
      case "Metalwork": {
        return 1;
      }
      case "Engineering": {
        return 2;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const MachineAttribute = {
  /**
   * Serializes MachineAttribute to protobuf.
   */
  encode: function (msg: PartialDeep<MachineAttribute>): Uint8Array {
    return MachineAttribute._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes MachineAttribute from protobuf.
   */
  decode: function (bytes: ByteSource): MachineAttribute {
    return MachineAttribute._readMessage(
      MachineAttribute.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes MachineAttribute with all fields set to their default value.
   */
  initialize: function (msg?: Partial<MachineAttribute>): MachineAttribute {
    return {
      name: "",
      value: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<MachineAttribute>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.value) {
      writer.writeString(2, msg.value);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MachineAttribute,
    reader: protoscript.BinaryReader,
  ): MachineAttribute {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.value = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Machine = {
  /**
   * Serializes Machine to protobuf.
   */
  encode: function (msg: PartialDeep<Machine>): Uint8Array {
    return Machine._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Machine from protobuf.
   */
  decode: function (bytes: ByteSource): Machine {
    return Machine._readMessage(
      Machine.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Machine with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Machine>): Machine {
    return {
      name: "",
      uid: "",
      displayName: "",
      description: "",
      categories: [],
      attributes: [],
      gallery: mediaGallery.Gallery.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Machine>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.uid) {
      writer.writeString(2, msg.uid);
    }
    if (msg.displayName) {
      writer.writeString(3, msg.displayName);
    }
    if (msg.description) {
      writer.writeString(4, msg.description);
    }
    if (msg.categories?.length) {
      writer.writePackedEnum(5, msg.categories.map(MachineCategory._toInt));
    }
    if (msg.attributes?.length) {
      writer.writeRepeatedMessage(
        6,
        msg.attributes as any,
        MachineAttribute._writeMessage,
      );
    }
    if (msg.gallery) {
      writer.writeMessage(7, msg.gallery, mediaGallery.Gallery._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Machine,
    reader: protoscript.BinaryReader,
  ): Machine {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.uid = reader.readString();
          break;
        }
        case 3: {
          msg.displayName = reader.readString();
          break;
        }
        case 4: {
          msg.description = reader.readString();
          break;
        }
        case 5: {
          if (reader.isDelimited()) {
            msg.categories.push(
              ...reader.readPackedEnum().map(MachineCategory._fromInt),
            );
          } else {
            msg.categories.push(MachineCategory._fromInt(reader.readEnum()));
          }
          break;
        }
        case 6: {
          const m = MachineAttribute.initialize();
          reader.readMessage(m, MachineAttribute._readMessage);
          msg.attributes.push(m);
          break;
        }
        case 7: {
          reader.readMessage(msg.gallery, mediaGallery.Gallery._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const MachineCategoryJSON = {
  Woodwork: "Woodwork",
  Metalwork: "Metalwork",
  Engineering: "Engineering",
  /**
   * @private
   */
  _fromInt: function (i: number): MachineCategory {
    switch (i) {
      case 0: {
        return "Woodwork";
      }
      case 1: {
        return "Metalwork";
      }
      case 2: {
        return "Engineering";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as MachineCategory;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: MachineCategory): number {
    switch (i) {
      case "Woodwork": {
        return 0;
      }
      case "Metalwork": {
        return 1;
      }
      case "Engineering": {
        return 2;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const MachineAttributeJSON = {
  /**
   * Serializes MachineAttribute to JSON.
   */
  encode: function (msg: PartialDeep<MachineAttribute>): string {
    return JSON.stringify(MachineAttributeJSON._writeMessage(msg));
  },

  /**
   * Deserializes MachineAttribute from JSON.
   */
  decode: function (json: string): MachineAttribute {
    return MachineAttributeJSON._readMessage(
      MachineAttributeJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes MachineAttribute with all fields set to their default value.
   */
  initialize: function (msg?: Partial<MachineAttribute>): MachineAttribute {
    return {
      name: "",
      value: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<MachineAttribute>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.value) {
      json["value"] = msg.value;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MachineAttribute, json: any): MachineAttribute {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _value_ = json["value"];
    if (_value_) {
      msg.value = _value_;
    }
    return msg;
  },
};

export const MachineJSON = {
  /**
   * Serializes Machine to JSON.
   */
  encode: function (msg: PartialDeep<Machine>): string {
    return JSON.stringify(MachineJSON._writeMessage(msg));
  },

  /**
   * Deserializes Machine from JSON.
   */
  decode: function (json: string): Machine {
    return MachineJSON._readMessage(MachineJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Machine with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Machine>): Machine {
    return {
      name: "",
      uid: "",
      displayName: "",
      description: "",
      categories: [],
      attributes: [],
      gallery: mediaGallery.GalleryJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Machine>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.uid) {
      json["uid"] = msg.uid;
    }
    if (msg.displayName) {
      json["displayName"] = msg.displayName;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.categories?.length) {
      json["categories"] = msg.categories;
    }
    if (msg.attributes?.length) {
      json["attributes"] = msg.attributes.map(
        MachineAttributeJSON._writeMessage,
      );
    }
    if (msg.gallery) {
      const _gallery_ = mediaGallery.GalleryJSON._writeMessage(msg.gallery);
      if (Object.keys(_gallery_).length > 0) {
        json["gallery"] = _gallery_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Machine, json: any): Machine {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _uid_ = json["uid"];
    if (_uid_) {
      msg.uid = _uid_;
    }
    const _displayName_ = json["displayName"];
    if (_displayName_) {
      msg.displayName = _displayName_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _categories_ = json["categories"];
    if (_categories_) {
      msg.categories = _categories_.map(MachineCategory._fromInt);
    }
    const _attributes_ = json["attributes"];
    if (_attributes_) {
      for (const item of _attributes_) {
        const m = MachineAttributeJSON.initialize();
        MachineAttributeJSON._readMessage(m, item);
        msg.attributes.push(m);
      }
    }
    const _gallery_ = json["gallery"];
    if (_gallery_) {
      mediaGallery.GalleryJSON._readMessage(msg.gallery, _gallery_);
    }
    return msg;
  },
};
