// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: workshop/contact.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

import * as auditEntry from "../audit/entry.pb";

//========================================//
//                 Types                  //
//========================================//

export interface Contact {
  name: string;
  uid: string;
  firstName: string;
  lastName: string;
  email: string;
  contactNumber: string;
  interests: string[];
  message: string;
  newsletter: boolean;
  auditEntry: auditEntry.Entry;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Contact = {
  /**
   * Serializes Contact to protobuf.
   */
  encode: function (msg: PartialDeep<Contact>): Uint8Array {
    return Contact._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Contact from protobuf.
   */
  decode: function (bytes: ByteSource): Contact {
    return Contact._readMessage(
      Contact.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Contact with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Contact>): Contact {
    return {
      name: "",
      uid: "",
      firstName: "",
      lastName: "",
      email: "",
      contactNumber: "",
      interests: [],
      message: "",
      newsletter: false,
      auditEntry: auditEntry.Entry.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Contact>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.uid) {
      writer.writeString(2, msg.uid);
    }
    if (msg.firstName) {
      writer.writeString(3, msg.firstName);
    }
    if (msg.lastName) {
      writer.writeString(4, msg.lastName);
    }
    if (msg.email) {
      writer.writeString(5, msg.email);
    }
    if (msg.contactNumber) {
      writer.writeString(6, msg.contactNumber);
    }
    if (msg.interests?.length) {
      writer.writeRepeatedString(7, msg.interests);
    }
    if (msg.message) {
      writer.writeString(8, msg.message);
    }
    if (msg.newsletter) {
      writer.writeBool(9, msg.newsletter);
    }
    if (msg.auditEntry) {
      writer.writeMessage(10, msg.auditEntry, auditEntry.Entry._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Contact,
    reader: protoscript.BinaryReader,
  ): Contact {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.uid = reader.readString();
          break;
        }
        case 3: {
          msg.firstName = reader.readString();
          break;
        }
        case 4: {
          msg.lastName = reader.readString();
          break;
        }
        case 5: {
          msg.email = reader.readString();
          break;
        }
        case 6: {
          msg.contactNumber = reader.readString();
          break;
        }
        case 7: {
          msg.interests.push(reader.readString());
          break;
        }
        case 8: {
          msg.message = reader.readString();
          break;
        }
        case 9: {
          msg.newsletter = reader.readBool();
          break;
        }
        case 10: {
          reader.readMessage(msg.auditEntry, auditEntry.Entry._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ContactJSON = {
  /**
   * Serializes Contact to JSON.
   */
  encode: function (msg: PartialDeep<Contact>): string {
    return JSON.stringify(ContactJSON._writeMessage(msg));
  },

  /**
   * Deserializes Contact from JSON.
   */
  decode: function (json: string): Contact {
    return ContactJSON._readMessage(ContactJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Contact with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Contact>): Contact {
    return {
      name: "",
      uid: "",
      firstName: "",
      lastName: "",
      email: "",
      contactNumber: "",
      interests: [],
      message: "",
      newsletter: false,
      auditEntry: auditEntry.EntryJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Contact>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.uid) {
      json["uid"] = msg.uid;
    }
    if (msg.firstName) {
      json["firstName"] = msg.firstName;
    }
    if (msg.lastName) {
      json["lastName"] = msg.lastName;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.contactNumber) {
      json["contactNumber"] = msg.contactNumber;
    }
    if (msg.interests?.length) {
      json["interests"] = msg.interests;
    }
    if (msg.message) {
      json["message"] = msg.message;
    }
    if (msg.newsletter) {
      json["newsletter"] = msg.newsletter;
    }
    if (msg.auditEntry) {
      const _auditEntry_ = auditEntry.EntryJSON._writeMessage(msg.auditEntry);
      if (Object.keys(_auditEntry_).length > 0) {
        json["auditEntry"] = _auditEntry_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Contact, json: any): Contact {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _uid_ = json["uid"];
    if (_uid_) {
      msg.uid = _uid_;
    }
    const _firstName_ = json["firstName"];
    if (_firstName_) {
      msg.firstName = _firstName_;
    }
    const _lastName_ = json["lastName"];
    if (_lastName_) {
      msg.lastName = _lastName_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _contactNumber_ = json["contactNumber"];
    if (_contactNumber_) {
      msg.contactNumber = _contactNumber_;
    }
    const _interests_ = json["interests"];
    if (_interests_) {
      msg.interests = _interests_;
    }
    const _message_ = json["message"];
    if (_message_) {
      msg.message = _message_;
    }
    const _newsletter_ = json["newsletter"];
    if (_newsletter_) {
      msg.newsletter = _newsletter_;
    }
    const _auditEntry_ = json["auditEntry"];
    if (_auditEntry_) {
      auditEntry.EntryJSON._readMessage(msg.auditEntry, _auditEntry_);
    }
    return msg;
  },
};
