// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: media/object.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface ObjectAttribute {
  name: string;
  value: string;
}

export interface Object {
  /**
   * Name is the name of the object.
   */
  name: string;
  /**
   * Description is the description of the object.
   * Use this field as the alt text for the object.
   */
  description: string;
  /**
   * ContentType is the MIME type of the object's content.
   */
  contentType: string;
  /**
   * Size is the size of the objects content.
   */
  size: bigint;
  /**
   * URL is the URL to the object.
   */
  url: string;
  /**
   * Prefix is the prefix of the object.
   */
  prefix: string;
  /**
   * LastModified is the last modified time of the object.
   */
  lastModified: string;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ObjectAttribute = {
  /**
   * Serializes ObjectAttribute to protobuf.
   */
  encode: function (msg: PartialDeep<ObjectAttribute>): Uint8Array {
    return ObjectAttribute._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ObjectAttribute from protobuf.
   */
  decode: function (bytes: ByteSource): ObjectAttribute {
    return ObjectAttribute._readMessage(
      ObjectAttribute.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ObjectAttribute with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ObjectAttribute>): ObjectAttribute {
    return {
      name: "",
      value: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ObjectAttribute>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.value) {
      writer.writeString(2, msg.value);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ObjectAttribute,
    reader: protoscript.BinaryReader,
  ): ObjectAttribute {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.value = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Object = {
  /**
   * Serializes Object to protobuf.
   */
  encode: function (msg: PartialDeep<Object>): Uint8Array {
    return Object._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Object from protobuf.
   */
  decode: function (bytes: ByteSource): Object {
    return Object._readMessage(
      Object.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Object with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Object>): Object {
    return {
      name: "",
      description: "",
      contentType: "",
      size: 0n,
      url: "",
      prefix: "",
      lastModified: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Object>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.description) {
      writer.writeString(2, msg.description);
    }
    if (msg.contentType) {
      writer.writeString(3, msg.contentType);
    }
    if (msg.size) {
      writer.writeInt64String(4, msg.size.toString() as any);
    }
    if (msg.url) {
      writer.writeString(5, msg.url);
    }
    if (msg.prefix) {
      writer.writeString(6, msg.prefix);
    }
    if (msg.lastModified) {
      writer.writeString(7, msg.lastModified);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Object,
    reader: protoscript.BinaryReader,
  ): Object {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.description = reader.readString();
          break;
        }
        case 3: {
          msg.contentType = reader.readString();
          break;
        }
        case 4: {
          msg.size = BigInt(reader.readInt64String());
          break;
        }
        case 5: {
          msg.url = reader.readString();
          break;
        }
        case 6: {
          msg.prefix = reader.readString();
          break;
        }
        case 7: {
          msg.lastModified = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ObjectAttributeJSON = {
  /**
   * Serializes ObjectAttribute to JSON.
   */
  encode: function (msg: PartialDeep<ObjectAttribute>): string {
    return JSON.stringify(ObjectAttributeJSON._writeMessage(msg));
  },

  /**
   * Deserializes ObjectAttribute from JSON.
   */
  decode: function (json: string): ObjectAttribute {
    return ObjectAttributeJSON._readMessage(
      ObjectAttributeJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ObjectAttribute with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ObjectAttribute>): ObjectAttribute {
    return {
      name: "",
      value: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ObjectAttribute>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.value) {
      json["value"] = msg.value;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ObjectAttribute, json: any): ObjectAttribute {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _value_ = json["value"];
    if (_value_) {
      msg.value = _value_;
    }
    return msg;
  },
};

export const ObjectJSON = {
  /**
   * Serializes Object to JSON.
   */
  encode: function (msg: PartialDeep<Object>): string {
    return JSON.stringify(ObjectJSON._writeMessage(msg));
  },

  /**
   * Deserializes Object from JSON.
   */
  decode: function (json: string): Object {
    return ObjectJSON._readMessage(ObjectJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Object with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Object>): Object {
    return {
      name: "",
      description: "",
      contentType: "",
      size: 0n,
      url: "",
      prefix: "",
      lastModified: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Object>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.contentType) {
      json["contentType"] = msg.contentType;
    }
    if (msg.size) {
      json["size"] = String(msg.size);
    }
    if (msg.url) {
      json["url"] = msg.url;
    }
    if (msg.prefix) {
      json["prefix"] = msg.prefix;
    }
    if (msg.lastModified) {
      json["lastModified"] = msg.lastModified;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Object, json: any): Object {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _contentType_ = json["contentType"];
    if (_contentType_) {
      msg.contentType = _contentType_;
    }
    const _size_ = json["size"];
    if (_size_) {
      msg.size = BigInt(_size_);
    }
    const _url_ = json["url"];
    if (_url_) {
      msg.url = _url_;
    }
    const _prefix_ = json["prefix"];
    if (_prefix_) {
      msg.prefix = _prefix_;
    }
    const _lastModified_ = json["lastModified"];
    if (_lastModified_) {
      msg.lastModified = _lastModified_;
    }
    return msg;
  },
};
