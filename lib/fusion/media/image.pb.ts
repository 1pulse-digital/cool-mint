// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: media/image.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface Image {
  name: string;
  uid: string;
  url: string;
  alt: string;
  caption: string;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Image = {
  /**
   * Serializes Image to protobuf.
   */
  encode: function (msg: PartialDeep<Image>): Uint8Array {
    return Image._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Image from protobuf.
   */
  decode: function (bytes: ByteSource): Image {
    return Image._readMessage(
      Image.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Image with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Image>): Image {
    return {
      name: "",
      uid: "",
      url: "",
      alt: "",
      caption: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Image>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.uid) {
      writer.writeString(2, msg.uid);
    }
    if (msg.url) {
      writer.writeString(3, msg.url);
    }
    if (msg.alt) {
      writer.writeString(4, msg.alt);
    }
    if (msg.caption) {
      writer.writeString(6, msg.caption);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Image, reader: protoscript.BinaryReader): Image {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.uid = reader.readString();
          break;
        }
        case 3: {
          msg.url = reader.readString();
          break;
        }
        case 4: {
          msg.alt = reader.readString();
          break;
        }
        case 6: {
          msg.caption = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ImageJSON = {
  /**
   * Serializes Image to JSON.
   */
  encode: function (msg: PartialDeep<Image>): string {
    return JSON.stringify(ImageJSON._writeMessage(msg));
  },

  /**
   * Deserializes Image from JSON.
   */
  decode: function (json: string): Image {
    return ImageJSON._readMessage(ImageJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Image with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Image>): Image {
    return {
      name: "",
      uid: "",
      url: "",
      alt: "",
      caption: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Image>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.uid) {
      json["uid"] = msg.uid;
    }
    if (msg.url) {
      json["url"] = msg.url;
    }
    if (msg.alt) {
      json["alt"] = msg.alt;
    }
    if (msg.caption) {
      json["caption"] = msg.caption;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Image, json: any): Image {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _uid_ = json["uid"];
    if (_uid_) {
      msg.uid = _uid_;
    }
    const _url_ = json["url"];
    if (_url_) {
      msg.url = _url_;
    }
    const _alt_ = json["alt"];
    if (_alt_) {
      msg.alt = _alt_;
    }
    const _caption_ = json["caption"];
    if (_caption_) {
      msg.caption = _caption_;
    }
    return msg;
  },
};
