// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: legal/company.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

import * as legalContact from "./contact.pb";

//========================================//
//                 Types                  //
//========================================//

export interface Company {
  name: string;
  uid: string;
  tradingName: string;
  registeredName: string;
  registrationNumber: string;
  contactPerson: string;
  contactInfo: legalContact.Contact;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Company = {
  /**
   * Serializes Company to protobuf.
   */
  encode: function (msg: PartialDeep<Company>): Uint8Array {
    return Company._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Company from protobuf.
   */
  decode: function (bytes: ByteSource): Company {
    return Company._readMessage(
      Company.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Company with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Company>): Company {
    return {
      name: "",
      uid: "",
      tradingName: "",
      registeredName: "",
      registrationNumber: "",
      contactPerson: "",
      contactInfo: legalContact.Contact.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Company>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.uid) {
      writer.writeString(2, msg.uid);
    }
    if (msg.tradingName) {
      writer.writeString(3, msg.tradingName);
    }
    if (msg.registeredName) {
      writer.writeString(4, msg.registeredName);
    }
    if (msg.registrationNumber) {
      writer.writeString(5, msg.registrationNumber);
    }
    if (msg.contactPerson) {
      writer.writeString(6, msg.contactPerson);
    }
    if (msg.contactInfo) {
      writer.writeMessage(
        7,
        msg.contactInfo,
        legalContact.Contact._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Company,
    reader: protoscript.BinaryReader,
  ): Company {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.uid = reader.readString();
          break;
        }
        case 3: {
          msg.tradingName = reader.readString();
          break;
        }
        case 4: {
          msg.registeredName = reader.readString();
          break;
        }
        case 5: {
          msg.registrationNumber = reader.readString();
          break;
        }
        case 6: {
          msg.contactPerson = reader.readString();
          break;
        }
        case 7: {
          reader.readMessage(
            msg.contactInfo,
            legalContact.Contact._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const CompanyJSON = {
  /**
   * Serializes Company to JSON.
   */
  encode: function (msg: PartialDeep<Company>): string {
    return JSON.stringify(CompanyJSON._writeMessage(msg));
  },

  /**
   * Deserializes Company from JSON.
   */
  decode: function (json: string): Company {
    return CompanyJSON._readMessage(CompanyJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Company with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Company>): Company {
    return {
      name: "",
      uid: "",
      tradingName: "",
      registeredName: "",
      registrationNumber: "",
      contactPerson: "",
      contactInfo: legalContact.ContactJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Company>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.uid) {
      json["uid"] = msg.uid;
    }
    if (msg.tradingName) {
      json["tradingName"] = msg.tradingName;
    }
    if (msg.registeredName) {
      json["registeredName"] = msg.registeredName;
    }
    if (msg.registrationNumber) {
      json["registrationNumber"] = msg.registrationNumber;
    }
    if (msg.contactPerson) {
      json["contactPerson"] = msg.contactPerson;
    }
    if (msg.contactInfo) {
      const _contactInfo_ = legalContact.ContactJSON._writeMessage(
        msg.contactInfo,
      );
      if (Object.keys(_contactInfo_).length > 0) {
        json["contactInfo"] = _contactInfo_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Company, json: any): Company {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _uid_ = json["uid"];
    if (_uid_) {
      msg.uid = _uid_;
    }
    const _tradingName_ = json["tradingName"];
    if (_tradingName_) {
      msg.tradingName = _tradingName_;
    }
    const _registeredName_ = json["registeredName"];
    if (_registeredName_) {
      msg.registeredName = _registeredName_;
    }
    const _registrationNumber_ = json["registrationNumber"];
    if (_registrationNumber_) {
      msg.registrationNumber = _registrationNumber_;
    }
    const _contactPerson_ = json["contactPerson"];
    if (_contactPerson_) {
      msg.contactPerson = _contactPerson_;
    }
    const _contactInfo_ = json["contactInfo"];
    if (_contactInfo_) {
      legalContact.ContactJSON._readMessage(msg.contactInfo, _contactInfo_);
    }
    return msg;
  },
};
