// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: legal/person.repository.sky.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as legalPerson from "./person.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListPeopleRequest {
  /**
   * Filter allows you to search by fields set as searchable.
   * TODO Generate the list of searchable fields for this comment
   */
  filter: string;
}

export interface ListPeopleResponse {
  People: legalPerson.Person[];
  total: bigint;
}

export interface CreatePersonRequest {
  /**
   * The name to use for the person, which will become the final component of
   * the person's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  personId: string;
  /**
   * The person to create.
   */
  person: legalPerson.Person;
}

export interface GetPersonRequest {
  name: string;
}

export interface UpdatePersonRequest {
  /**
   * The person to update.
   *
   * The person's 'name' field is used to identify the person to be updated.
   * Format: legal/person}}
   */
  person: legalPerson.Person;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeletePersonRequest {
  name: string;
}

//========================================//
//    PersonRepository Protobuf Client    //
//========================================//

export async function ListPeople(
  listPeopleRequest: ListPeopleRequest,
  config?: ClientConfiguration,
): Promise<ListPeopleResponse> {
  const response = await PBrequest(
    "/legal.PersonRepository/ListPeople",
    ListPeopleRequest.encode(listPeopleRequest),
    config,
  );
  return ListPeopleResponse.decode(response);
}

export async function CreatePerson(
  createPersonRequest: CreatePersonRequest,
  config?: ClientConfiguration,
): Promise<legalPerson.Person> {
  const response = await PBrequest(
    "/legal.PersonRepository/CreatePerson",
    CreatePersonRequest.encode(createPersonRequest),
    config,
  );
  return legalPerson.Person.decode(response);
}

export async function GetPerson(
  getPersonRequest: GetPersonRequest,
  config?: ClientConfiguration,
): Promise<legalPerson.Person> {
  const response = await PBrequest(
    "/legal.PersonRepository/GetPerson",
    GetPersonRequest.encode(getPersonRequest),
    config,
  );
  return legalPerson.Person.decode(response);
}

export async function UpdatePerson(
  updatePersonRequest: UpdatePersonRequest,
  config?: ClientConfiguration,
): Promise<legalPerson.Person> {
  const response = await PBrequest(
    "/legal.PersonRepository/UpdatePerson",
    UpdatePersonRequest.encode(updatePersonRequest),
    config,
  );
  return legalPerson.Person.decode(response);
}

export async function DeletePerson(
  deletePersonRequest: DeletePersonRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/legal.PersonRepository/DeletePerson",
    DeletePersonRequest.encode(deletePersonRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//      PersonRepository JSON Client      //
//========================================//

export async function ListPeopleJSON(
  listPeopleRequest: ListPeopleRequest,
  config?: ClientConfiguration,
): Promise<ListPeopleResponse> {
  const response = await JSONrequest(
    "/legal.PersonRepository/ListPeople",
    ListPeopleRequestJSON.encode(listPeopleRequest),
    config,
  );
  return ListPeopleResponseJSON.decode(response);
}

export async function CreatePersonJSON(
  createPersonRequest: CreatePersonRequest,
  config?: ClientConfiguration,
): Promise<legalPerson.Person> {
  const response = await JSONrequest(
    "/legal.PersonRepository/CreatePerson",
    CreatePersonRequestJSON.encode(createPersonRequest),
    config,
  );
  return legalPerson.PersonJSON.decode(response);
}

export async function GetPersonJSON(
  getPersonRequest: GetPersonRequest,
  config?: ClientConfiguration,
): Promise<legalPerson.Person> {
  const response = await JSONrequest(
    "/legal.PersonRepository/GetPerson",
    GetPersonRequestJSON.encode(getPersonRequest),
    config,
  );
  return legalPerson.PersonJSON.decode(response);
}

export async function UpdatePersonJSON(
  updatePersonRequest: UpdatePersonRequest,
  config?: ClientConfiguration,
): Promise<legalPerson.Person> {
  const response = await JSONrequest(
    "/legal.PersonRepository/UpdatePerson",
    UpdatePersonRequestJSON.encode(updatePersonRequest),
    config,
  );
  return legalPerson.PersonJSON.decode(response);
}

export async function DeletePersonJSON(
  deletePersonRequest: DeletePersonRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/legal.PersonRepository/DeletePerson",
    DeletePersonRequestJSON.encode(deletePersonRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//            PersonRepository            //
//========================================//

/**
 *
 * PersonRepository allows you to manage People.
 */
export interface PersonRepository<Context = unknown> {
  ListPeople: (
    listPeopleRequest: ListPeopleRequest,
    context: Context,
  ) => Promise<ListPeopleResponse> | ListPeopleResponse;
  CreatePerson: (
    createPersonRequest: CreatePersonRequest,
    context: Context,
  ) => Promise<legalPerson.Person> | legalPerson.Person;
  GetPerson: (
    getPersonRequest: GetPersonRequest,
    context: Context,
  ) => Promise<legalPerson.Person> | legalPerson.Person;
  UpdatePerson: (
    updatePersonRequest: UpdatePersonRequest,
    context: Context,
  ) => Promise<legalPerson.Person> | legalPerson.Person;
  DeletePerson: (
    deletePersonRequest: DeletePersonRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createPersonRepository<Context>(
  service: PersonRepository<Context>,
) {
  return {
    name: "legal.PersonRepository",
    methods: {
      ListPeople: {
        name: "ListPeople",
        handler: service.ListPeople,
        input: { protobuf: ListPeopleRequest, json: ListPeopleRequestJSON },
        output: { protobuf: ListPeopleResponse, json: ListPeopleResponseJSON },
      },
      CreatePerson: {
        name: "CreatePerson",
        handler: service.CreatePerson,
        input: { protobuf: CreatePersonRequest, json: CreatePersonRequestJSON },
        output: { protobuf: legalPerson.Person, json: legalPerson.PersonJSON },
      },
      GetPerson: {
        name: "GetPerson",
        handler: service.GetPerson,
        input: { protobuf: GetPersonRequest, json: GetPersonRequestJSON },
        output: { protobuf: legalPerson.Person, json: legalPerson.PersonJSON },
      },
      UpdatePerson: {
        name: "UpdatePerson",
        handler: service.UpdatePerson,
        input: { protobuf: UpdatePersonRequest, json: UpdatePersonRequestJSON },
        output: { protobuf: legalPerson.Person, json: legalPerson.PersonJSON },
      },
      DeletePerson: {
        name: "DeletePerson",
        handler: service.DeletePerson,
        input: { protobuf: DeletePersonRequest, json: DeletePersonRequestJSON },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListPeopleRequest = {
  /**
   * Serializes ListPeopleRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListPeopleRequest>): Uint8Array {
    return ListPeopleRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListPeopleRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListPeopleRequest {
    return ListPeopleRequest._readMessage(
      ListPeopleRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListPeopleRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListPeopleRequest>): ListPeopleRequest {
    return {
      filter: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListPeopleRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPeopleRequest,
    reader: protoscript.BinaryReader,
  ): ListPeopleRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListPeopleResponse = {
  /**
   * Serializes ListPeopleResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListPeopleResponse>): Uint8Array {
    return ListPeopleResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListPeopleResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListPeopleResponse {
    return ListPeopleResponse._readMessage(
      ListPeopleResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListPeopleResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListPeopleResponse>): ListPeopleResponse {
    return {
      People: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListPeopleResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.People?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.People as any,
        legalPerson.Person._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPeopleResponse,
    reader: protoscript.BinaryReader,
  ): ListPeopleResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = legalPerson.Person.initialize();
          reader.readMessage(m, legalPerson.Person._readMessage);
          msg.People.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreatePersonRequest = {
  /**
   * Serializes CreatePersonRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreatePersonRequest>): Uint8Array {
    return CreatePersonRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreatePersonRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreatePersonRequest {
    return CreatePersonRequest._readMessage(
      CreatePersonRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreatePersonRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreatePersonRequest>,
  ): CreatePersonRequest {
    return {
      personId: "",
      person: legalPerson.Person.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreatePersonRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.personId) {
      writer.writeString(1, msg.personId);
    }
    if (msg.person) {
      writer.writeMessage(2, msg.person, legalPerson.Person._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreatePersonRequest,
    reader: protoscript.BinaryReader,
  ): CreatePersonRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.personId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.person, legalPerson.Person._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetPersonRequest = {
  /**
   * Serializes GetPersonRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetPersonRequest>): Uint8Array {
    return GetPersonRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetPersonRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetPersonRequest {
    return GetPersonRequest._readMessage(
      GetPersonRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetPersonRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetPersonRequest>): GetPersonRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetPersonRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetPersonRequest,
    reader: protoscript.BinaryReader,
  ): GetPersonRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdatePersonRequest = {
  /**
   * Serializes UpdatePersonRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdatePersonRequest>): Uint8Array {
    return UpdatePersonRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdatePersonRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdatePersonRequest {
    return UpdatePersonRequest._readMessage(
      UpdatePersonRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdatePersonRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdatePersonRequest>,
  ): UpdatePersonRequest {
    return {
      person: legalPerson.Person.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdatePersonRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.person) {
      writer.writeMessage(1, msg.person, legalPerson.Person._writeMessage);
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdatePersonRequest,
    reader: protoscript.BinaryReader,
  ): UpdatePersonRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.person, legalPerson.Person._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeletePersonRequest = {
  /**
   * Serializes DeletePersonRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeletePersonRequest>): Uint8Array {
    return DeletePersonRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeletePersonRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeletePersonRequest {
    return DeletePersonRequest._readMessage(
      DeletePersonRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeletePersonRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeletePersonRequest>,
  ): DeletePersonRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeletePersonRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeletePersonRequest,
    reader: protoscript.BinaryReader,
  ): DeletePersonRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListPeopleRequestJSON = {
  /**
   * Serializes ListPeopleRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListPeopleRequest>): string {
    return JSON.stringify(ListPeopleRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListPeopleRequest from JSON.
   */
  decode: function (json: string): ListPeopleRequest {
    return ListPeopleRequestJSON._readMessage(
      ListPeopleRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListPeopleRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListPeopleRequest>): ListPeopleRequest {
    return {
      filter: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListPeopleRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPeopleRequest,
    json: any,
  ): ListPeopleRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    return msg;
  },
};

export const ListPeopleResponseJSON = {
  /**
   * Serializes ListPeopleResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListPeopleResponse>): string {
    return JSON.stringify(ListPeopleResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListPeopleResponse from JSON.
   */
  decode: function (json: string): ListPeopleResponse {
    return ListPeopleResponseJSON._readMessage(
      ListPeopleResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListPeopleResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListPeopleResponse>): ListPeopleResponse {
    return {
      People: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListPeopleResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.People?.length) {
      json["People"] = msg.People.map(legalPerson.PersonJSON._writeMessage);
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPeopleResponse,
    json: any,
  ): ListPeopleResponse {
    const _People_ = json["People"];
    if (_People_) {
      for (const item of _People_) {
        const m = legalPerson.PersonJSON.initialize();
        legalPerson.PersonJSON._readMessage(m, item);
        msg.People.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    return msg;
  },
};

export const CreatePersonRequestJSON = {
  /**
   * Serializes CreatePersonRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreatePersonRequest>): string {
    return JSON.stringify(CreatePersonRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreatePersonRequest from JSON.
   */
  decode: function (json: string): CreatePersonRequest {
    return CreatePersonRequestJSON._readMessage(
      CreatePersonRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreatePersonRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreatePersonRequest>,
  ): CreatePersonRequest {
    return {
      personId: "",
      person: legalPerson.PersonJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreatePersonRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.personId) {
      json["personId"] = msg.personId;
    }
    if (msg.person) {
      const _person_ = legalPerson.PersonJSON._writeMessage(msg.person);
      if (Object.keys(_person_).length > 0) {
        json["person"] = _person_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreatePersonRequest,
    json: any,
  ): CreatePersonRequest {
    const _personId_ = json["personId"] ?? json["person_id"];
    if (_personId_) {
      msg.personId = _personId_;
    }
    const _person_ = json["person"];
    if (_person_) {
      legalPerson.PersonJSON._readMessage(msg.person, _person_);
    }
    return msg;
  },
};

export const GetPersonRequestJSON = {
  /**
   * Serializes GetPersonRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetPersonRequest>): string {
    return JSON.stringify(GetPersonRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetPersonRequest from JSON.
   */
  decode: function (json: string): GetPersonRequest {
    return GetPersonRequestJSON._readMessage(
      GetPersonRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetPersonRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetPersonRequest>): GetPersonRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetPersonRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetPersonRequest, json: any): GetPersonRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdatePersonRequestJSON = {
  /**
   * Serializes UpdatePersonRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdatePersonRequest>): string {
    return JSON.stringify(UpdatePersonRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdatePersonRequest from JSON.
   */
  decode: function (json: string): UpdatePersonRequest {
    return UpdatePersonRequestJSON._readMessage(
      UpdatePersonRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdatePersonRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdatePersonRequest>,
  ): UpdatePersonRequest {
    return {
      person: legalPerson.PersonJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdatePersonRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.person) {
      const _person_ = legalPerson.PersonJSON._writeMessage(msg.person);
      if (Object.keys(_person_).length > 0) {
        json["person"] = _person_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdatePersonRequest,
    json: any,
  ): UpdatePersonRequest {
    const _person_ = json["person"];
    if (_person_) {
      legalPerson.PersonJSON._readMessage(msg.person, _person_);
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeletePersonRequestJSON = {
  /**
   * Serializes DeletePersonRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeletePersonRequest>): string {
    return JSON.stringify(DeletePersonRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeletePersonRequest from JSON.
   */
  decode: function (json: string): DeletePersonRequest {
    return DeletePersonRequestJSON._readMessage(
      DeletePersonRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeletePersonRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeletePersonRequest>,
  ): DeletePersonRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeletePersonRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeletePersonRequest,
    json: any,
  ): DeletePersonRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
