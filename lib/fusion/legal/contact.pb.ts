// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: legal/contact.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface Contact {
  email: string;
  phone: string;
  address: string;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Contact = {
  /**
   * Serializes Contact to protobuf.
   */
  encode: function (msg: PartialDeep<Contact>): Uint8Array {
    return Contact._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Contact from protobuf.
   */
  decode: function (bytes: ByteSource): Contact {
    return Contact._readMessage(
      Contact.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Contact with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Contact>): Contact {
    return {
      email: "",
      phone: "",
      address: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Contact>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.phone) {
      writer.writeString(2, msg.phone);
    }
    if (msg.address) {
      writer.writeString(3, msg.address);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Contact,
    reader: protoscript.BinaryReader,
  ): Contact {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.phone = reader.readString();
          break;
        }
        case 3: {
          msg.address = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ContactJSON = {
  /**
   * Serializes Contact to JSON.
   */
  encode: function (msg: PartialDeep<Contact>): string {
    return JSON.stringify(ContactJSON._writeMessage(msg));
  },

  /**
   * Deserializes Contact from JSON.
   */
  decode: function (json: string): Contact {
    return ContactJSON._readMessage(ContactJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Contact with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Contact>): Contact {
    return {
      email: "",
      phone: "",
      address: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Contact>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.email) {
      json["email"] = msg.email;
    }
    if (msg.phone) {
      json["phone"] = msg.phone;
    }
    if (msg.address) {
      json["address"] = msg.address;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Contact, json: any): Contact {
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    const _phone_ = json["phone"];
    if (_phone_) {
      msg.phone = _phone_;
    }
    const _address_ = json["address"];
    if (_address_) {
      msg.address = _address_;
    }
    return msg;
  },
};
