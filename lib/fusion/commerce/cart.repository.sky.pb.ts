// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: commerce/cart.repository.sky.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as commerceCart from "./cart.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListCartsRequest {
  /**
   * Filter allows you to search by fields set as searchable.
   * TODO Generate the list of searchable fields for this comment
   */
  filter: string;
  /**
   * The maximum number of items to return.
   */
  pageSize: number;
  /**
   * The next_page_token value returned from a previous List request, if any.
   */
  pageToken: string;
}

export interface ListCartsResponse {
  /**
   * There will be a maximum number of records returned based on the page_size field in the request.
   */
  Carts: commerceCart.Cart[];
  total: bigint;
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

export interface CreateCartRequest {
  /**
   * The name to use for the cart, which will become the final component of
   * the cart's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  cartId: string;
  /**
   * The cart to create.
   */
  cart: commerceCart.Cart;
}

export interface GetCartRequest {
  name: string;
}

export interface UpdateCartRequest {
  /**
   * The cart to update.
   *
   * The cart's 'name' field is used to identify the cart to be updated.
   * Format: commerce/cart}}
   */
  cart: commerceCart.Cart;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeleteCartRequest {
  name: string;
}

//========================================//
//     CartRepository Protobuf Client     //
//========================================//

export async function ListCarts(
  listCartsRequest: ListCartsRequest,
  config?: ClientConfiguration,
): Promise<ListCartsResponse> {
  const response = await PBrequest(
    "/commerce.CartRepository/ListCarts",
    ListCartsRequest.encode(listCartsRequest),
    config,
  );
  return ListCartsResponse.decode(response);
}

export async function CreateCart(
  createCartRequest: CreateCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await PBrequest(
    "/commerce.CartRepository/CreateCart",
    CreateCartRequest.encode(createCartRequest),
    config,
  );
  return commerceCart.Cart.decode(response);
}

export async function GetCart(
  getCartRequest: GetCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await PBrequest(
    "/commerce.CartRepository/GetCart",
    GetCartRequest.encode(getCartRequest),
    config,
  );
  return commerceCart.Cart.decode(response);
}

export async function UpdateCart(
  updateCartRequest: UpdateCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await PBrequest(
    "/commerce.CartRepository/UpdateCart",
    UpdateCartRequest.encode(updateCartRequest),
    config,
  );
  return commerceCart.Cart.decode(response);
}

export async function DeleteCart(
  deleteCartRequest: DeleteCartRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/commerce.CartRepository/DeleteCart",
    DeleteCartRequest.encode(deleteCartRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//       CartRepository JSON Client       //
//========================================//

export async function ListCartsJSON(
  listCartsRequest: ListCartsRequest,
  config?: ClientConfiguration,
): Promise<ListCartsResponse> {
  const response = await JSONrequest(
    "/commerce.CartRepository/ListCarts",
    ListCartsRequestJSON.encode(listCartsRequest),
    config,
  );
  return ListCartsResponseJSON.decode(response);
}

export async function CreateCartJSON(
  createCartRequest: CreateCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await JSONrequest(
    "/commerce.CartRepository/CreateCart",
    CreateCartRequestJSON.encode(createCartRequest),
    config,
  );
  return commerceCart.CartJSON.decode(response);
}

export async function GetCartJSON(
  getCartRequest: GetCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await JSONrequest(
    "/commerce.CartRepository/GetCart",
    GetCartRequestJSON.encode(getCartRequest),
    config,
  );
  return commerceCart.CartJSON.decode(response);
}

export async function UpdateCartJSON(
  updateCartRequest: UpdateCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await JSONrequest(
    "/commerce.CartRepository/UpdateCart",
    UpdateCartRequestJSON.encode(updateCartRequest),
    config,
  );
  return commerceCart.CartJSON.decode(response);
}

export async function DeleteCartJSON(
  deleteCartRequest: DeleteCartRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/commerce.CartRepository/DeleteCart",
    DeleteCartRequestJSON.encode(deleteCartRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//             CartRepository             //
//========================================//

/**
 *
 * CartRepository allows you to manage Carts.
 */
export interface CartRepository<Context = unknown> {
  ListCarts: (
    listCartsRequest: ListCartsRequest,
    context: Context,
  ) => Promise<ListCartsResponse> | ListCartsResponse;
  CreateCart: (
    createCartRequest: CreateCartRequest,
    context: Context,
  ) => Promise<commerceCart.Cart> | commerceCart.Cart;
  GetCart: (
    getCartRequest: GetCartRequest,
    context: Context,
  ) => Promise<commerceCart.Cart> | commerceCart.Cart;
  UpdateCart: (
    updateCartRequest: UpdateCartRequest,
    context: Context,
  ) => Promise<commerceCart.Cart> | commerceCart.Cart;
  DeleteCart: (
    deleteCartRequest: DeleteCartRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createCartRepository<Context>(
  service: CartRepository<Context>,
) {
  return {
    name: "commerce.CartRepository",
    methods: {
      ListCarts: {
        name: "ListCarts",
        handler: service.ListCarts,
        input: { protobuf: ListCartsRequest, json: ListCartsRequestJSON },
        output: { protobuf: ListCartsResponse, json: ListCartsResponseJSON },
      },
      CreateCart: {
        name: "CreateCart",
        handler: service.CreateCart,
        input: { protobuf: CreateCartRequest, json: CreateCartRequestJSON },
        output: { protobuf: commerceCart.Cart, json: commerceCart.CartJSON },
      },
      GetCart: {
        name: "GetCart",
        handler: service.GetCart,
        input: { protobuf: GetCartRequest, json: GetCartRequestJSON },
        output: { protobuf: commerceCart.Cart, json: commerceCart.CartJSON },
      },
      UpdateCart: {
        name: "UpdateCart",
        handler: service.UpdateCart,
        input: { protobuf: UpdateCartRequest, json: UpdateCartRequestJSON },
        output: { protobuf: commerceCart.Cart, json: commerceCart.CartJSON },
      },
      DeleteCart: {
        name: "DeleteCart",
        handler: service.DeleteCart,
        input: { protobuf: DeleteCartRequest, json: DeleteCartRequestJSON },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListCartsRequest = {
  /**
   * Serializes ListCartsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListCartsRequest>): Uint8Array {
    return ListCartsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListCartsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListCartsRequest {
    return ListCartsRequest._readMessage(
      ListCartsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListCartsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListCartsRequest>): ListCartsRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCartsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    if (msg.pageSize) {
      writer.writeInt32(2, msg.pageSize);
    }
    if (msg.pageToken) {
      writer.writeString(3, msg.pageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCartsRequest,
    reader: protoscript.BinaryReader,
  ): ListCartsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        case 2: {
          msg.pageSize = reader.readInt32();
          break;
        }
        case 3: {
          msg.pageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListCartsResponse = {
  /**
   * Serializes ListCartsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListCartsResponse>): Uint8Array {
    return ListCartsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListCartsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListCartsResponse {
    return ListCartsResponse._readMessage(
      ListCartsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListCartsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListCartsResponse>): ListCartsResponse {
    return {
      Carts: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCartsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.Carts?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.Carts as any,
        commerceCart.Cart._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    if (msg.nextPageToken) {
      writer.writeString(3, msg.nextPageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCartsResponse,
    reader: protoscript.BinaryReader,
  ): ListCartsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = commerceCart.Cart.initialize();
          reader.readMessage(m, commerceCart.Cart._readMessage);
          msg.Carts.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.nextPageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateCartRequest = {
  /**
   * Serializes CreateCartRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateCartRequest>): Uint8Array {
    return CreateCartRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateCartRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateCartRequest {
    return CreateCartRequest._readMessage(
      CreateCartRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateCartRequest>): CreateCartRequest {
    return {
      cartId: "",
      cart: commerceCart.Cart.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateCartRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.cartId) {
      writer.writeString(1, msg.cartId);
    }
    if (msg.cart) {
      writer.writeMessage(2, msg.cart, commerceCart.Cart._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateCartRequest,
    reader: protoscript.BinaryReader,
  ): CreateCartRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.cartId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.cart, commerceCart.Cart._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetCartRequest = {
  /**
   * Serializes GetCartRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetCartRequest>): Uint8Array {
    return GetCartRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetCartRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetCartRequest {
    return GetCartRequest._readMessage(
      GetCartRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetCartRequest>): GetCartRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetCartRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetCartRequest,
    reader: protoscript.BinaryReader,
  ): GetCartRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateCartRequest = {
  /**
   * Serializes UpdateCartRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateCartRequest>): Uint8Array {
    return UpdateCartRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateCartRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateCartRequest {
    return UpdateCartRequest._readMessage(
      UpdateCartRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateCartRequest>): UpdateCartRequest {
    return {
      cart: commerceCart.Cart.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateCartRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.cart) {
      writer.writeMessage(1, msg.cart, commerceCart.Cart._writeMessage);
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateCartRequest,
    reader: protoscript.BinaryReader,
  ): UpdateCartRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.cart, commerceCart.Cart._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteCartRequest = {
  /**
   * Serializes DeleteCartRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteCartRequest>): Uint8Array {
    return DeleteCartRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteCartRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteCartRequest {
    return DeleteCartRequest._readMessage(
      DeleteCartRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteCartRequest>): DeleteCartRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCartRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCartRequest,
    reader: protoscript.BinaryReader,
  ): DeleteCartRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListCartsRequestJSON = {
  /**
   * Serializes ListCartsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListCartsRequest>): string {
    return JSON.stringify(ListCartsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListCartsRequest from JSON.
   */
  decode: function (json: string): ListCartsRequest {
    return ListCartsRequestJSON._readMessage(
      ListCartsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListCartsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListCartsRequest>): ListCartsRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCartsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    if (msg.pageSize) {
      json["pageSize"] = msg.pageSize;
    }
    if (msg.pageToken) {
      json["pageToken"] = msg.pageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ListCartsRequest, json: any): ListCartsRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    const _pageSize_ = json["pageSize"] ?? json["page_size"];
    if (_pageSize_) {
      msg.pageSize = protoscript.parseNumber(_pageSize_);
    }
    const _pageToken_ = json["pageToken"] ?? json["page_token"];
    if (_pageToken_) {
      msg.pageToken = _pageToken_;
    }
    return msg;
  },
};

export const ListCartsResponseJSON = {
  /**
   * Serializes ListCartsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListCartsResponse>): string {
    return JSON.stringify(ListCartsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListCartsResponse from JSON.
   */
  decode: function (json: string): ListCartsResponse {
    return ListCartsResponseJSON._readMessage(
      ListCartsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListCartsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListCartsResponse>): ListCartsResponse {
    return {
      Carts: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCartsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Carts?.length) {
      json["Carts"] = msg.Carts.map(commerceCart.CartJSON._writeMessage);
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    if (msg.nextPageToken) {
      json["nextPageToken"] = msg.nextPageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCartsResponse,
    json: any,
  ): ListCartsResponse {
    const _Carts_ = json["Carts"];
    if (_Carts_) {
      for (const item of _Carts_) {
        const m = commerceCart.CartJSON.initialize();
        commerceCart.CartJSON._readMessage(m, item);
        msg.Carts.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    const _nextPageToken_ = json["nextPageToken"] ?? json["next_page_token"];
    if (_nextPageToken_) {
      msg.nextPageToken = _nextPageToken_;
    }
    return msg;
  },
};

export const CreateCartRequestJSON = {
  /**
   * Serializes CreateCartRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateCartRequest>): string {
    return JSON.stringify(CreateCartRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateCartRequest from JSON.
   */
  decode: function (json: string): CreateCartRequest {
    return CreateCartRequestJSON._readMessage(
      CreateCartRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateCartRequest>): CreateCartRequest {
    return {
      cartId: "",
      cart: commerceCart.CartJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateCartRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.cartId) {
      json["cartId"] = msg.cartId;
    }
    if (msg.cart) {
      const _cart_ = commerceCart.CartJSON._writeMessage(msg.cart);
      if (Object.keys(_cart_).length > 0) {
        json["cart"] = _cart_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateCartRequest,
    json: any,
  ): CreateCartRequest {
    const _cartId_ = json["cartId"] ?? json["cart_id"];
    if (_cartId_) {
      msg.cartId = _cartId_;
    }
    const _cart_ = json["cart"];
    if (_cart_) {
      commerceCart.CartJSON._readMessage(msg.cart, _cart_);
    }
    return msg;
  },
};

export const GetCartRequestJSON = {
  /**
   * Serializes GetCartRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetCartRequest>): string {
    return JSON.stringify(GetCartRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetCartRequest from JSON.
   */
  decode: function (json: string): GetCartRequest {
    return GetCartRequestJSON._readMessage(
      GetCartRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetCartRequest>): GetCartRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetCartRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetCartRequest, json: any): GetCartRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdateCartRequestJSON = {
  /**
   * Serializes UpdateCartRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateCartRequest>): string {
    return JSON.stringify(UpdateCartRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateCartRequest from JSON.
   */
  decode: function (json: string): UpdateCartRequest {
    return UpdateCartRequestJSON._readMessage(
      UpdateCartRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateCartRequest>): UpdateCartRequest {
    return {
      cart: commerceCart.CartJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateCartRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.cart) {
      const _cart_ = commerceCart.CartJSON._writeMessage(msg.cart);
      if (Object.keys(_cart_).length > 0) {
        json["cart"] = _cart_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateCartRequest,
    json: any,
  ): UpdateCartRequest {
    const _cart_ = json["cart"];
    if (_cart_) {
      commerceCart.CartJSON._readMessage(msg.cart, _cart_);
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeleteCartRequestJSON = {
  /**
   * Serializes DeleteCartRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteCartRequest>): string {
    return JSON.stringify(DeleteCartRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteCartRequest from JSON.
   */
  decode: function (json: string): DeleteCartRequest {
    return DeleteCartRequestJSON._readMessage(
      DeleteCartRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteCartRequest>): DeleteCartRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCartRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCartRequest,
    json: any,
  ): DeleteCartRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
