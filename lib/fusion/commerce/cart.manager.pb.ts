// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: commerce/cart.manager.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as commerceCart from "./cart.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ApplyCouponRequest {
  /**
   * The coupon code to apply
   */
  code: string;
}

export interface RemoveCouponRequest {
  /**
   * The coupon (name) to remove
   */
  coupon: string;
}

export interface AddToCartRequest {
  eTag: string;
  /**
   * product is the product.name to add to the cart
   */
  product: string;
  quantity: bigint;
  variant: string;
}

export interface RemoveFromCartRequest {
  eTag: string;
  /**
   * product is the product.name to remove from the cart
   */
  product: string;
  quantity: bigint;
}

export interface ClearCartRequest {}

export interface MyCartRequest {}

//========================================//
//      CartManager Protobuf Client       //
//========================================//

/**
 * AddToCart adds the specified quantity of the product to the user's cart
 */
export async function AddToCart(
  addToCartRequest: AddToCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await PBrequest(
    "/commerce.CartManager/AddToCart",
    AddToCartRequest.encode(addToCartRequest),
    config,
  );
  return commerceCart.Cart.decode(response);
}

/**
 * RemoveFromCart removes the specified quantity of the product from the user's cart
 */
export async function RemoveFromCart(
  removeFromCartRequest: RemoveFromCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await PBrequest(
    "/commerce.CartManager/RemoveFromCart",
    RemoveFromCartRequest.encode(removeFromCartRequest),
    config,
  );
  return commerceCart.Cart.decode(response);
}

/**
 * ClearCart removes all the products from the user's cart
 */
export async function ClearCart(
  clearCartRequest: ClearCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await PBrequest(
    "/commerce.CartManager/ClearCart",
    ClearCartRequest.encode(clearCartRequest),
    config,
  );
  return commerceCart.Cart.decode(response);
}

/**
 * MyCart returns the user's cart
 */
export async function MyCart(
  myCartRequest: MyCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await PBrequest(
    "/commerce.CartManager/MyCart",
    MyCartRequest.encode(myCartRequest),
    config,
  );
  return commerceCart.Cart.decode(response);
}

/**
 * ApplyCoupon applies the coupon to the user's cart, but does not persist the coupon
 */
export async function ApplyCoupon(
  applyCouponRequest: ApplyCouponRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await PBrequest(
    "/commerce.CartManager/ApplyCoupon",
    ApplyCouponRequest.encode(applyCouponRequest),
    config,
  );
  return commerceCart.Cart.decode(response);
}

/**
 * RemoveCoupon removes the coupon from the user's cart
 */
export async function RemoveCoupon(
  removeCouponRequest: RemoveCouponRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await PBrequest(
    "/commerce.CartManager/RemoveCoupon",
    RemoveCouponRequest.encode(removeCouponRequest),
    config,
  );
  return commerceCart.Cart.decode(response);
}

//========================================//
//        CartManager JSON Client         //
//========================================//

/**
 * AddToCart adds the specified quantity of the product to the user's cart
 */
export async function AddToCartJSON(
  addToCartRequest: AddToCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await JSONrequest(
    "/commerce.CartManager/AddToCart",
    AddToCartRequestJSON.encode(addToCartRequest),
    config,
  );
  return commerceCart.CartJSON.decode(response);
}

/**
 * RemoveFromCart removes the specified quantity of the product from the user's cart
 */
export async function RemoveFromCartJSON(
  removeFromCartRequest: RemoveFromCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await JSONrequest(
    "/commerce.CartManager/RemoveFromCart",
    RemoveFromCartRequestJSON.encode(removeFromCartRequest),
    config,
  );
  return commerceCart.CartJSON.decode(response);
}

/**
 * ClearCart removes all the products from the user's cart
 */
export async function ClearCartJSON(
  clearCartRequest: ClearCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await JSONrequest(
    "/commerce.CartManager/ClearCart",
    ClearCartRequestJSON.encode(clearCartRequest),
    config,
  );
  return commerceCart.CartJSON.decode(response);
}

/**
 * MyCart returns the user's cart
 */
export async function MyCartJSON(
  myCartRequest: MyCartRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await JSONrequest(
    "/commerce.CartManager/MyCart",
    MyCartRequestJSON.encode(myCartRequest),
    config,
  );
  return commerceCart.CartJSON.decode(response);
}

/**
 * ApplyCoupon applies the coupon to the user's cart, but does not persist the coupon
 */
export async function ApplyCouponJSON(
  applyCouponRequest: ApplyCouponRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await JSONrequest(
    "/commerce.CartManager/ApplyCoupon",
    ApplyCouponRequestJSON.encode(applyCouponRequest),
    config,
  );
  return commerceCart.CartJSON.decode(response);
}

/**
 * RemoveCoupon removes the coupon from the user's cart
 */
export async function RemoveCouponJSON(
  removeCouponRequest: RemoveCouponRequest,
  config?: ClientConfiguration,
): Promise<commerceCart.Cart> {
  const response = await JSONrequest(
    "/commerce.CartManager/RemoveCoupon",
    RemoveCouponRequestJSON.encode(removeCouponRequest),
    config,
  );
  return commerceCart.CartJSON.decode(response);
}

//========================================//
//              CartManager               //
//========================================//

/**
 * CartManager manages a user's cart by inspecting the uid in the context
 * This requires the uid and email to be set in the Context, usually in earlier middleware
 */
export interface CartManager<Context = unknown> {
  /**
   * AddToCart adds the specified quantity of the product to the user's cart
   */
  AddToCart: (
    addToCartRequest: AddToCartRequest,
    context: Context,
  ) => Promise<commerceCart.Cart> | commerceCart.Cart;
  /**
   * RemoveFromCart removes the specified quantity of the product from the user's cart
   */
  RemoveFromCart: (
    removeFromCartRequest: RemoveFromCartRequest,
    context: Context,
  ) => Promise<commerceCart.Cart> | commerceCart.Cart;
  /**
   * ClearCart removes all the products from the user's cart
   */
  ClearCart: (
    clearCartRequest: ClearCartRequest,
    context: Context,
  ) => Promise<commerceCart.Cart> | commerceCart.Cart;
  /**
   * MyCart returns the user's cart
   */
  MyCart: (
    myCartRequest: MyCartRequest,
    context: Context,
  ) => Promise<commerceCart.Cart> | commerceCart.Cart;
  /**
   * ApplyCoupon applies the coupon to the user's cart, but does not persist the coupon
   */
  ApplyCoupon: (
    applyCouponRequest: ApplyCouponRequest,
    context: Context,
  ) => Promise<commerceCart.Cart> | commerceCart.Cart;
  /**
   * RemoveCoupon removes the coupon from the user's cart
   */
  RemoveCoupon: (
    removeCouponRequest: RemoveCouponRequest,
    context: Context,
  ) => Promise<commerceCart.Cart> | commerceCart.Cart;
}

export function createCartManager<Context>(service: CartManager<Context>) {
  return {
    name: "commerce.CartManager",
    methods: {
      AddToCart: {
        name: "AddToCart",
        handler: service.AddToCart,
        input: { protobuf: AddToCartRequest, json: AddToCartRequestJSON },
        output: { protobuf: commerceCart.Cart, json: commerceCart.CartJSON },
      },
      RemoveFromCart: {
        name: "RemoveFromCart",
        handler: service.RemoveFromCart,
        input: {
          protobuf: RemoveFromCartRequest,
          json: RemoveFromCartRequestJSON,
        },
        output: { protobuf: commerceCart.Cart, json: commerceCart.CartJSON },
      },
      ClearCart: {
        name: "ClearCart",
        handler: service.ClearCart,
        input: { protobuf: ClearCartRequest, json: ClearCartRequestJSON },
        output: { protobuf: commerceCart.Cart, json: commerceCart.CartJSON },
      },
      MyCart: {
        name: "MyCart",
        handler: service.MyCart,
        input: { protobuf: MyCartRequest, json: MyCartRequestJSON },
        output: { protobuf: commerceCart.Cart, json: commerceCart.CartJSON },
      },
      ApplyCoupon: {
        name: "ApplyCoupon",
        handler: service.ApplyCoupon,
        input: { protobuf: ApplyCouponRequest, json: ApplyCouponRequestJSON },
        output: { protobuf: commerceCart.Cart, json: commerceCart.CartJSON },
      },
      RemoveCoupon: {
        name: "RemoveCoupon",
        handler: service.RemoveCoupon,
        input: { protobuf: RemoveCouponRequest, json: RemoveCouponRequestJSON },
        output: { protobuf: commerceCart.Cart, json: commerceCart.CartJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ApplyCouponRequest = {
  /**
   * Serializes ApplyCouponRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ApplyCouponRequest>): Uint8Array {
    return ApplyCouponRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ApplyCouponRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ApplyCouponRequest {
    return ApplyCouponRequest._readMessage(
      ApplyCouponRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ApplyCouponRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ApplyCouponRequest>): ApplyCouponRequest {
    return {
      code: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ApplyCouponRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.code) {
      writer.writeString(1, msg.code);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ApplyCouponRequest,
    reader: protoscript.BinaryReader,
  ): ApplyCouponRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.code = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RemoveCouponRequest = {
  /**
   * Serializes RemoveCouponRequest to protobuf.
   */
  encode: function (msg: PartialDeep<RemoveCouponRequest>): Uint8Array {
    return RemoveCouponRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes RemoveCouponRequest from protobuf.
   */
  decode: function (bytes: ByteSource): RemoveCouponRequest {
    return RemoveCouponRequest._readMessage(
      RemoveCouponRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes RemoveCouponRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<RemoveCouponRequest>,
  ): RemoveCouponRequest {
    return {
      coupon: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<RemoveCouponRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.coupon) {
      writer.writeString(1, msg.coupon);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RemoveCouponRequest,
    reader: protoscript.BinaryReader,
  ): RemoveCouponRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.coupon = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const AddToCartRequest = {
  /**
   * Serializes AddToCartRequest to protobuf.
   */
  encode: function (msg: PartialDeep<AddToCartRequest>): Uint8Array {
    return AddToCartRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes AddToCartRequest from protobuf.
   */
  decode: function (bytes: ByteSource): AddToCartRequest {
    return AddToCartRequest._readMessage(
      AddToCartRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes AddToCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<AddToCartRequest>): AddToCartRequest {
    return {
      eTag: "",
      product: "",
      quantity: 0n,
      variant: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AddToCartRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.eTag) {
      writer.writeString(1, msg.eTag);
    }
    if (msg.product) {
      writer.writeString(2, msg.product);
    }
    if (msg.quantity) {
      writer.writeInt64String(3, msg.quantity.toString() as any);
    }
    if (msg.variant) {
      writer.writeString(4, msg.variant);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: AddToCartRequest,
    reader: protoscript.BinaryReader,
  ): AddToCartRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.eTag = reader.readString();
          break;
        }
        case 2: {
          msg.product = reader.readString();
          break;
        }
        case 3: {
          msg.quantity = BigInt(reader.readInt64String());
          break;
        }
        case 4: {
          msg.variant = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RemoveFromCartRequest = {
  /**
   * Serializes RemoveFromCartRequest to protobuf.
   */
  encode: function (msg: PartialDeep<RemoveFromCartRequest>): Uint8Array {
    return RemoveFromCartRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes RemoveFromCartRequest from protobuf.
   */
  decode: function (bytes: ByteSource): RemoveFromCartRequest {
    return RemoveFromCartRequest._readMessage(
      RemoveFromCartRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes RemoveFromCartRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<RemoveFromCartRequest>,
  ): RemoveFromCartRequest {
    return {
      eTag: "",
      product: "",
      quantity: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<RemoveFromCartRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.eTag) {
      writer.writeString(1, msg.eTag);
    }
    if (msg.product) {
      writer.writeString(2, msg.product);
    }
    if (msg.quantity) {
      writer.writeInt64String(3, msg.quantity.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RemoveFromCartRequest,
    reader: protoscript.BinaryReader,
  ): RemoveFromCartRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.eTag = reader.readString();
          break;
        }
        case 2: {
          msg.product = reader.readString();
          break;
        }
        case 3: {
          msg.quantity = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ClearCartRequest = {
  /**
   * Serializes ClearCartRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<ClearCartRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ClearCartRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): ClearCartRequest {
    return {};
  },

  /**
   * Initializes ClearCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ClearCartRequest>): ClearCartRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ClearCartRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ClearCartRequest,
    _reader: protoscript.BinaryReader,
  ): ClearCartRequest {
    return _msg;
  },
};

export const MyCartRequest = {
  /**
   * Serializes MyCartRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<MyCartRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes MyCartRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): MyCartRequest {
    return {};
  },

  /**
   * Initializes MyCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<MyCartRequest>): MyCartRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<MyCartRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: MyCartRequest,
    _reader: protoscript.BinaryReader,
  ): MyCartRequest {
    return _msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ApplyCouponRequestJSON = {
  /**
   * Serializes ApplyCouponRequest to JSON.
   */
  encode: function (msg: PartialDeep<ApplyCouponRequest>): string {
    return JSON.stringify(ApplyCouponRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ApplyCouponRequest from JSON.
   */
  decode: function (json: string): ApplyCouponRequest {
    return ApplyCouponRequestJSON._readMessage(
      ApplyCouponRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ApplyCouponRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ApplyCouponRequest>): ApplyCouponRequest {
    return {
      code: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ApplyCouponRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.code) {
      json["code"] = msg.code;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ApplyCouponRequest,
    json: any,
  ): ApplyCouponRequest {
    const _code_ = json["code"];
    if (_code_) {
      msg.code = _code_;
    }
    return msg;
  },
};

export const RemoveCouponRequestJSON = {
  /**
   * Serializes RemoveCouponRequest to JSON.
   */
  encode: function (msg: PartialDeep<RemoveCouponRequest>): string {
    return JSON.stringify(RemoveCouponRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes RemoveCouponRequest from JSON.
   */
  decode: function (json: string): RemoveCouponRequest {
    return RemoveCouponRequestJSON._readMessage(
      RemoveCouponRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes RemoveCouponRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<RemoveCouponRequest>,
  ): RemoveCouponRequest {
    return {
      coupon: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<RemoveCouponRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.coupon) {
      json["coupon"] = msg.coupon;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RemoveCouponRequest,
    json: any,
  ): RemoveCouponRequest {
    const _coupon_ = json["coupon"];
    if (_coupon_) {
      msg.coupon = _coupon_;
    }
    return msg;
  },
};

export const AddToCartRequestJSON = {
  /**
   * Serializes AddToCartRequest to JSON.
   */
  encode: function (msg: PartialDeep<AddToCartRequest>): string {
    return JSON.stringify(AddToCartRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes AddToCartRequest from JSON.
   */
  decode: function (json: string): AddToCartRequest {
    return AddToCartRequestJSON._readMessage(
      AddToCartRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes AddToCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<AddToCartRequest>): AddToCartRequest {
    return {
      eTag: "",
      product: "",
      quantity: 0n,
      variant: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<AddToCartRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.eTag) {
      json["eTag"] = msg.eTag;
    }
    if (msg.product) {
      json["product"] = msg.product;
    }
    if (msg.quantity) {
      json["quantity"] = String(msg.quantity);
    }
    if (msg.variant) {
      json["variant"] = msg.variant;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: AddToCartRequest, json: any): AddToCartRequest {
    const _eTag_ = json["eTag"] ?? json["e_tag"];
    if (_eTag_) {
      msg.eTag = _eTag_;
    }
    const _product_ = json["product"];
    if (_product_) {
      msg.product = _product_;
    }
    const _quantity_ = json["quantity"];
    if (_quantity_) {
      msg.quantity = BigInt(_quantity_);
    }
    const _variant_ = json["variant"];
    if (_variant_) {
      msg.variant = _variant_;
    }
    return msg;
  },
};

export const RemoveFromCartRequestJSON = {
  /**
   * Serializes RemoveFromCartRequest to JSON.
   */
  encode: function (msg: PartialDeep<RemoveFromCartRequest>): string {
    return JSON.stringify(RemoveFromCartRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes RemoveFromCartRequest from JSON.
   */
  decode: function (json: string): RemoveFromCartRequest {
    return RemoveFromCartRequestJSON._readMessage(
      RemoveFromCartRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes RemoveFromCartRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<RemoveFromCartRequest>,
  ): RemoveFromCartRequest {
    return {
      eTag: "",
      product: "",
      quantity: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<RemoveFromCartRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.eTag) {
      json["eTag"] = msg.eTag;
    }
    if (msg.product) {
      json["product"] = msg.product;
    }
    if (msg.quantity) {
      json["quantity"] = String(msg.quantity);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RemoveFromCartRequest,
    json: any,
  ): RemoveFromCartRequest {
    const _eTag_ = json["eTag"] ?? json["e_tag"];
    if (_eTag_) {
      msg.eTag = _eTag_;
    }
    const _product_ = json["product"];
    if (_product_) {
      msg.product = _product_;
    }
    const _quantity_ = json["quantity"];
    if (_quantity_) {
      msg.quantity = BigInt(_quantity_);
    }
    return msg;
  },
};

export const ClearCartRequestJSON = {
  /**
   * Serializes ClearCartRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<ClearCartRequest>): string {
    return "{}";
  },

  /**
   * Deserializes ClearCartRequest from JSON.
   */
  decode: function (_json?: string): ClearCartRequest {
    return {};
  },

  /**
   * Initializes ClearCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ClearCartRequest>): ClearCartRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ClearCartRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: ClearCartRequest, _json: any): ClearCartRequest {
    return msg;
  },
};

export const MyCartRequestJSON = {
  /**
   * Serializes MyCartRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<MyCartRequest>): string {
    return "{}";
  },

  /**
   * Deserializes MyCartRequest from JSON.
   */
  decode: function (_json?: string): MyCartRequest {
    return {};
  },

  /**
   * Initializes MyCartRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<MyCartRequest>): MyCartRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<MyCartRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: MyCartRequest, _json: any): MyCartRequest {
    return msg;
  },
};
