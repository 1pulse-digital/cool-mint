// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: commerce/product.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

/**
 * ProductType represents the type of a product
 * extend as needed
 */
export type ProductType = "TYPE_UNSPECIFIED" | "TYPE_WORKSHOP";

export interface Product {
  name: string;
  uid: string;
  displayName: string;
  type: ProductType;
  description: string;
  shortDescription: string;
  /**
   * sku is the stock keeping unit
   * it MUST be unique
   * it can be set by the user, and will typically be a barcode value
   * if the product has variants, the sku MUST be empty, and the sku of the variants will be used
   */
  sku: string;
  /**
   * price is the current price of the product
   */
  price: bigint;
  /**
   * regularPrice is the regular price of the product, i.e when it is not on sale
   */
  regularPrice: bigint;
  /**
   * salePrice is the price of the product when it is on sale
   */
  salePrice: bigint;
  /**
   * stockQuantity is the total quantity of the product in stock
   */
  stockQuantity: bigint;
  /**
   * reservedQuantity is the total quantity of the product that has been reserved, but not yet purchased
   */
  reservedQuantity: bigint;
  variants: Variant[];
}

/**
 * Variant represents a product variant, such as size or color.
 */
export interface Variant {
  name: string;
  uid: string;
  displayName: string;
  description: string;
  sku: string;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ProductType = {
  TYPE_UNSPECIFIED: "TYPE_UNSPECIFIED",
  /**
   * TYPE_PHYSICAL = 1;
   * TYPE_DIGITAL = 2; // pdf or other digital product
   * TYPE_SERVICE = 3;
   */
  TYPE_WORKSHOP: "TYPE_WORKSHOP",
  /**
   * @private
   */
  _fromInt: function (i: number): ProductType {
    switch (i) {
      case 0: {
        return "TYPE_UNSPECIFIED";
      }
      case 4: {
        return "TYPE_WORKSHOP";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as ProductType;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: ProductType): number {
    switch (i) {
      case "TYPE_UNSPECIFIED": {
        return 0;
      }
      case "TYPE_WORKSHOP": {
        return 4;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const Product = {
  /**
   * Serializes Product to protobuf.
   */
  encode: function (msg: PartialDeep<Product>): Uint8Array {
    return Product._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Product from protobuf.
   */
  decode: function (bytes: ByteSource): Product {
    return Product._readMessage(
      Product.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Product with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Product>): Product {
    return {
      name: "",
      uid: "",
      displayName: "",
      type: ProductType._fromInt(0),
      description: "",
      shortDescription: "",
      sku: "",
      price: 0n,
      regularPrice: 0n,
      salePrice: 0n,
      stockQuantity: 0n,
      reservedQuantity: 0n,
      variants: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Product>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.uid) {
      writer.writeString(2, msg.uid);
    }
    if (msg.displayName) {
      writer.writeString(3, msg.displayName);
    }
    if (msg.type && ProductType._toInt(msg.type)) {
      writer.writeEnum(4, ProductType._toInt(msg.type));
    }
    if (msg.description) {
      writer.writeString(5, msg.description);
    }
    if (msg.shortDescription) {
      writer.writeString(6, msg.shortDescription);
    }
    if (msg.sku) {
      writer.writeString(7, msg.sku);
    }
    if (msg.price) {
      writer.writeInt64String(8, msg.price.toString() as any);
    }
    if (msg.regularPrice) {
      writer.writeInt64String(9, msg.regularPrice.toString() as any);
    }
    if (msg.salePrice) {
      writer.writeInt64String(10, msg.salePrice.toString() as any);
    }
    if (msg.stockQuantity) {
      writer.writeInt64String(11, msg.stockQuantity.toString() as any);
    }
    if (msg.reservedQuantity) {
      writer.writeInt64String(12, msg.reservedQuantity.toString() as any);
    }
    if (msg.variants?.length) {
      writer.writeRepeatedMessage(
        13,
        msg.variants as any,
        Variant._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Product,
    reader: protoscript.BinaryReader,
  ): Product {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.uid = reader.readString();
          break;
        }
        case 3: {
          msg.displayName = reader.readString();
          break;
        }
        case 4: {
          msg.type = ProductType._fromInt(reader.readEnum());
          break;
        }
        case 5: {
          msg.description = reader.readString();
          break;
        }
        case 6: {
          msg.shortDescription = reader.readString();
          break;
        }
        case 7: {
          msg.sku = reader.readString();
          break;
        }
        case 8: {
          msg.price = BigInt(reader.readInt64String());
          break;
        }
        case 9: {
          msg.regularPrice = BigInt(reader.readInt64String());
          break;
        }
        case 10: {
          msg.salePrice = BigInt(reader.readInt64String());
          break;
        }
        case 11: {
          msg.stockQuantity = BigInt(reader.readInt64String());
          break;
        }
        case 12: {
          msg.reservedQuantity = BigInt(reader.readInt64String());
          break;
        }
        case 13: {
          const m = Variant.initialize();
          reader.readMessage(m, Variant._readMessage);
          msg.variants.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Variant = {
  /**
   * Serializes Variant to protobuf.
   */
  encode: function (msg: PartialDeep<Variant>): Uint8Array {
    return Variant._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Variant from protobuf.
   */
  decode: function (bytes: ByteSource): Variant {
    return Variant._readMessage(
      Variant.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Variant with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Variant>): Variant {
    return {
      name: "",
      uid: "",
      displayName: "",
      description: "",
      sku: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Variant>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.uid) {
      writer.writeString(2, msg.uid);
    }
    if (msg.displayName) {
      writer.writeString(3, msg.displayName);
    }
    if (msg.description) {
      writer.writeString(4, msg.description);
    }
    if (msg.sku) {
      writer.writeString(5, msg.sku);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Variant,
    reader: protoscript.BinaryReader,
  ): Variant {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.uid = reader.readString();
          break;
        }
        case 3: {
          msg.displayName = reader.readString();
          break;
        }
        case 4: {
          msg.description = reader.readString();
          break;
        }
        case 5: {
          msg.sku = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ProductTypeJSON = {
  TYPE_UNSPECIFIED: "TYPE_UNSPECIFIED",
  /**
   * TYPE_PHYSICAL = 1;
   * TYPE_DIGITAL = 2; // pdf or other digital product
   * TYPE_SERVICE = 3;
   */
  TYPE_WORKSHOP: "TYPE_WORKSHOP",
  /**
   * @private
   */
  _fromInt: function (i: number): ProductType {
    switch (i) {
      case 0: {
        return "TYPE_UNSPECIFIED";
      }
      case 4: {
        return "TYPE_WORKSHOP";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as ProductType;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: ProductType): number {
    switch (i) {
      case "TYPE_UNSPECIFIED": {
        return 0;
      }
      case "TYPE_WORKSHOP": {
        return 4;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const ProductJSON = {
  /**
   * Serializes Product to JSON.
   */
  encode: function (msg: PartialDeep<Product>): string {
    return JSON.stringify(ProductJSON._writeMessage(msg));
  },

  /**
   * Deserializes Product from JSON.
   */
  decode: function (json: string): Product {
    return ProductJSON._readMessage(ProductJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Product with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Product>): Product {
    return {
      name: "",
      uid: "",
      displayName: "",
      type: ProductType._fromInt(0),
      description: "",
      shortDescription: "",
      sku: "",
      price: 0n,
      regularPrice: 0n,
      salePrice: 0n,
      stockQuantity: 0n,
      reservedQuantity: 0n,
      variants: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Product>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.uid) {
      json["uid"] = msg.uid;
    }
    if (msg.displayName) {
      json["displayName"] = msg.displayName;
    }
    if (msg.type && ProductTypeJSON._toInt(msg.type)) {
      json["type"] = msg.type;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.shortDescription) {
      json["shortDescription"] = msg.shortDescription;
    }
    if (msg.sku) {
      json["sku"] = msg.sku;
    }
    if (msg.price) {
      json["price"] = String(msg.price);
    }
    if (msg.regularPrice) {
      json["regularPrice"] = String(msg.regularPrice);
    }
    if (msg.salePrice) {
      json["salePrice"] = String(msg.salePrice);
    }
    if (msg.stockQuantity) {
      json["stockQuantity"] = String(msg.stockQuantity);
    }
    if (msg.reservedQuantity) {
      json["reservedQuantity"] = String(msg.reservedQuantity);
    }
    if (msg.variants?.length) {
      json["variants"] = msg.variants.map(VariantJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Product, json: any): Product {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _uid_ = json["uid"];
    if (_uid_) {
      msg.uid = _uid_;
    }
    const _displayName_ = json["displayName"];
    if (_displayName_) {
      msg.displayName = _displayName_;
    }
    const _type_ = json["type"];
    if (_type_) {
      msg.type = ProductType._fromInt(_type_);
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _shortDescription_ = json["shortDescription"];
    if (_shortDescription_) {
      msg.shortDescription = _shortDescription_;
    }
    const _sku_ = json["sku"];
    if (_sku_) {
      msg.sku = _sku_;
    }
    const _price_ = json["price"];
    if (_price_) {
      msg.price = BigInt(_price_);
    }
    const _regularPrice_ = json["regularPrice"];
    if (_regularPrice_) {
      msg.regularPrice = BigInt(_regularPrice_);
    }
    const _salePrice_ = json["salePrice"];
    if (_salePrice_) {
      msg.salePrice = BigInt(_salePrice_);
    }
    const _stockQuantity_ = json["stockQuantity"];
    if (_stockQuantity_) {
      msg.stockQuantity = BigInt(_stockQuantity_);
    }
    const _reservedQuantity_ = json["reservedQuantity"];
    if (_reservedQuantity_) {
      msg.reservedQuantity = BigInt(_reservedQuantity_);
    }
    const _variants_ = json["variants"];
    if (_variants_) {
      for (const item of _variants_) {
        const m = VariantJSON.initialize();
        VariantJSON._readMessage(m, item);
        msg.variants.push(m);
      }
    }
    return msg;
  },
};

export const VariantJSON = {
  /**
   * Serializes Variant to JSON.
   */
  encode: function (msg: PartialDeep<Variant>): string {
    return JSON.stringify(VariantJSON._writeMessage(msg));
  },

  /**
   * Deserializes Variant from JSON.
   */
  decode: function (json: string): Variant {
    return VariantJSON._readMessage(VariantJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Variant with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Variant>): Variant {
    return {
      name: "",
      uid: "",
      displayName: "",
      description: "",
      sku: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Variant>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.uid) {
      json["uid"] = msg.uid;
    }
    if (msg.displayName) {
      json["displayName"] = msg.displayName;
    }
    if (msg.description) {
      json["description"] = msg.description;
    }
    if (msg.sku) {
      json["sku"] = msg.sku;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Variant, json: any): Variant {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _uid_ = json["uid"];
    if (_uid_) {
      msg.uid = _uid_;
    }
    const _displayName_ = json["displayName"];
    if (_displayName_) {
      msg.displayName = _displayName_;
    }
    const _description_ = json["description"];
    if (_description_) {
      msg.description = _description_;
    }
    const _sku_ = json["sku"];
    if (_sku_) {
      msg.sku = _sku_;
    }
    return msg;
  },
};
