// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: commerce/price.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface Price {
  currencyCode: string;
  units: bigint;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Price = {
  /**
   * Serializes Price to protobuf.
   */
  encode: function (msg: PartialDeep<Price>): Uint8Array {
    return Price._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Price from protobuf.
   */
  decode: function (bytes: ByteSource): Price {
    return Price._readMessage(
      Price.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Price with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Price>): Price {
    return {
      currencyCode: "",
      units: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Price>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.currencyCode) {
      writer.writeString(1, msg.currencyCode);
    }
    if (msg.units) {
      writer.writeInt64String(2, msg.units.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Price, reader: protoscript.BinaryReader): Price {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.currencyCode = reader.readString();
          break;
        }
        case 2: {
          msg.units = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const PriceJSON = {
  /**
   * Serializes Price to JSON.
   */
  encode: function (msg: PartialDeep<Price>): string {
    return JSON.stringify(PriceJSON._writeMessage(msg));
  },

  /**
   * Deserializes Price from JSON.
   */
  decode: function (json: string): Price {
    return PriceJSON._readMessage(PriceJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Price with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Price>): Price {
    return {
      currencyCode: "",
      units: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Price>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.currencyCode) {
      json["currencyCode"] = msg.currencyCode;
    }
    if (msg.units) {
      json["units"] = String(msg.units);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Price, json: any): Price {
    const _currencyCode_ = json["currencyCode"];
    if (_currencyCode_) {
      msg.currencyCode = _currencyCode_;
    }
    const _units_ = json["units"];
    if (_units_) {
      msg.units = BigInt(_units_);
    }
    return msg;
  },
};
