// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: commerce/payment.repository.sky.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as commercePayment from "./payment.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListPaymentsRequest {
  /**
   * Filter allows you to search by fields set as searchable.
   * TODO Generate the list of searchable fields for this comment
   */
  filter: string;
  /**
   * The maximum number of items to return.
   */
  pageSize: number;
  /**
   * The next_page_token value returned from a previous List request, if any.
   */
  pageToken: string;
}

export interface ListPaymentsResponse {
  /**
   * There will be a maximum number of records returned based on the page_size field in the request.
   */
  Payments: commercePayment.Payment[];
  total: bigint;
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

export interface CreatePaymentRequest {
  /**
   * The name to use for the payment, which will become the final component of
   * the payment's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  paymentId: string;
  /**
   * The payment to create.
   */
  payment: commercePayment.Payment;
}

export interface GetPaymentRequest {
  name: string;
}

export interface UpdatePaymentRequest {
  /**
   * The payment to update.
   *
   * The payment's 'name' field is used to identify the payment to be updated.
   * Format: commerce/payment}}
   */
  payment: commercePayment.Payment;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeletePaymentRequest {
  name: string;
}

//========================================//
//   PaymentRepository Protobuf Client    //
//========================================//

export async function ListPayments(
  listPaymentsRequest: ListPaymentsRequest,
  config?: ClientConfiguration,
): Promise<ListPaymentsResponse> {
  const response = await PBrequest(
    "/commerce.PaymentRepository/ListPayments",
    ListPaymentsRequest.encode(listPaymentsRequest),
    config,
  );
  return ListPaymentsResponse.decode(response);
}

export async function CreatePayment(
  createPaymentRequest: CreatePaymentRequest,
  config?: ClientConfiguration,
): Promise<commercePayment.Payment> {
  const response = await PBrequest(
    "/commerce.PaymentRepository/CreatePayment",
    CreatePaymentRequest.encode(createPaymentRequest),
    config,
  );
  return commercePayment.Payment.decode(response);
}

export async function GetPayment(
  getPaymentRequest: GetPaymentRequest,
  config?: ClientConfiguration,
): Promise<commercePayment.Payment> {
  const response = await PBrequest(
    "/commerce.PaymentRepository/GetPayment",
    GetPaymentRequest.encode(getPaymentRequest),
    config,
  );
  return commercePayment.Payment.decode(response);
}

export async function UpdatePayment(
  updatePaymentRequest: UpdatePaymentRequest,
  config?: ClientConfiguration,
): Promise<commercePayment.Payment> {
  const response = await PBrequest(
    "/commerce.PaymentRepository/UpdatePayment",
    UpdatePaymentRequest.encode(updatePaymentRequest),
    config,
  );
  return commercePayment.Payment.decode(response);
}

export async function DeletePayment(
  deletePaymentRequest: DeletePaymentRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/commerce.PaymentRepository/DeletePayment",
    DeletePaymentRequest.encode(deletePaymentRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//     PaymentRepository JSON Client      //
//========================================//

export async function ListPaymentsJSON(
  listPaymentsRequest: ListPaymentsRequest,
  config?: ClientConfiguration,
): Promise<ListPaymentsResponse> {
  const response = await JSONrequest(
    "/commerce.PaymentRepository/ListPayments",
    ListPaymentsRequestJSON.encode(listPaymentsRequest),
    config,
  );
  return ListPaymentsResponseJSON.decode(response);
}

export async function CreatePaymentJSON(
  createPaymentRequest: CreatePaymentRequest,
  config?: ClientConfiguration,
): Promise<commercePayment.Payment> {
  const response = await JSONrequest(
    "/commerce.PaymentRepository/CreatePayment",
    CreatePaymentRequestJSON.encode(createPaymentRequest),
    config,
  );
  return commercePayment.PaymentJSON.decode(response);
}

export async function GetPaymentJSON(
  getPaymentRequest: GetPaymentRequest,
  config?: ClientConfiguration,
): Promise<commercePayment.Payment> {
  const response = await JSONrequest(
    "/commerce.PaymentRepository/GetPayment",
    GetPaymentRequestJSON.encode(getPaymentRequest),
    config,
  );
  return commercePayment.PaymentJSON.decode(response);
}

export async function UpdatePaymentJSON(
  updatePaymentRequest: UpdatePaymentRequest,
  config?: ClientConfiguration,
): Promise<commercePayment.Payment> {
  const response = await JSONrequest(
    "/commerce.PaymentRepository/UpdatePayment",
    UpdatePaymentRequestJSON.encode(updatePaymentRequest),
    config,
  );
  return commercePayment.PaymentJSON.decode(response);
}

export async function DeletePaymentJSON(
  deletePaymentRequest: DeletePaymentRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/commerce.PaymentRepository/DeletePayment",
    DeletePaymentRequestJSON.encode(deletePaymentRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//           PaymentRepository            //
//========================================//

/**
 *
 * PaymentRepository allows you to manage Payments.
 */
export interface PaymentRepository<Context = unknown> {
  ListPayments: (
    listPaymentsRequest: ListPaymentsRequest,
    context: Context,
  ) => Promise<ListPaymentsResponse> | ListPaymentsResponse;
  CreatePayment: (
    createPaymentRequest: CreatePaymentRequest,
    context: Context,
  ) => Promise<commercePayment.Payment> | commercePayment.Payment;
  GetPayment: (
    getPaymentRequest: GetPaymentRequest,
    context: Context,
  ) => Promise<commercePayment.Payment> | commercePayment.Payment;
  UpdatePayment: (
    updatePaymentRequest: UpdatePaymentRequest,
    context: Context,
  ) => Promise<commercePayment.Payment> | commercePayment.Payment;
  DeletePayment: (
    deletePaymentRequest: DeletePaymentRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createPaymentRepository<Context>(
  service: PaymentRepository<Context>,
) {
  return {
    name: "commerce.PaymentRepository",
    methods: {
      ListPayments: {
        name: "ListPayments",
        handler: service.ListPayments,
        input: { protobuf: ListPaymentsRequest, json: ListPaymentsRequestJSON },
        output: {
          protobuf: ListPaymentsResponse,
          json: ListPaymentsResponseJSON,
        },
      },
      CreatePayment: {
        name: "CreatePayment",
        handler: service.CreatePayment,
        input: {
          protobuf: CreatePaymentRequest,
          json: CreatePaymentRequestJSON,
        },
        output: {
          protobuf: commercePayment.Payment,
          json: commercePayment.PaymentJSON,
        },
      },
      GetPayment: {
        name: "GetPayment",
        handler: service.GetPayment,
        input: { protobuf: GetPaymentRequest, json: GetPaymentRequestJSON },
        output: {
          protobuf: commercePayment.Payment,
          json: commercePayment.PaymentJSON,
        },
      },
      UpdatePayment: {
        name: "UpdatePayment",
        handler: service.UpdatePayment,
        input: {
          protobuf: UpdatePaymentRequest,
          json: UpdatePaymentRequestJSON,
        },
        output: {
          protobuf: commercePayment.Payment,
          json: commercePayment.PaymentJSON,
        },
      },
      DeletePayment: {
        name: "DeletePayment",
        handler: service.DeletePayment,
        input: {
          protobuf: DeletePaymentRequest,
          json: DeletePaymentRequestJSON,
        },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListPaymentsRequest = {
  /**
   * Serializes ListPaymentsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListPaymentsRequest>): Uint8Array {
    return ListPaymentsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListPaymentsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListPaymentsRequest {
    return ListPaymentsRequest._readMessage(
      ListPaymentsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListPaymentsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListPaymentsRequest>,
  ): ListPaymentsRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListPaymentsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    if (msg.pageSize) {
      writer.writeInt32(2, msg.pageSize);
    }
    if (msg.pageToken) {
      writer.writeString(3, msg.pageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPaymentsRequest,
    reader: protoscript.BinaryReader,
  ): ListPaymentsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        case 2: {
          msg.pageSize = reader.readInt32();
          break;
        }
        case 3: {
          msg.pageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListPaymentsResponse = {
  /**
   * Serializes ListPaymentsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListPaymentsResponse>): Uint8Array {
    return ListPaymentsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListPaymentsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListPaymentsResponse {
    return ListPaymentsResponse._readMessage(
      ListPaymentsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListPaymentsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListPaymentsResponse>,
  ): ListPaymentsResponse {
    return {
      Payments: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListPaymentsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.Payments?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.Payments as any,
        commercePayment.Payment._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    if (msg.nextPageToken) {
      writer.writeString(3, msg.nextPageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPaymentsResponse,
    reader: protoscript.BinaryReader,
  ): ListPaymentsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = commercePayment.Payment.initialize();
          reader.readMessage(m, commercePayment.Payment._readMessage);
          msg.Payments.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.nextPageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreatePaymentRequest = {
  /**
   * Serializes CreatePaymentRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreatePaymentRequest>): Uint8Array {
    return CreatePaymentRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreatePaymentRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreatePaymentRequest {
    return CreatePaymentRequest._readMessage(
      CreatePaymentRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreatePaymentRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreatePaymentRequest>,
  ): CreatePaymentRequest {
    return {
      paymentId: "",
      payment: commercePayment.Payment.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreatePaymentRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.paymentId) {
      writer.writeString(1, msg.paymentId);
    }
    if (msg.payment) {
      writer.writeMessage(
        2,
        msg.payment,
        commercePayment.Payment._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreatePaymentRequest,
    reader: protoscript.BinaryReader,
  ): CreatePaymentRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.paymentId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.payment, commercePayment.Payment._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetPaymentRequest = {
  /**
   * Serializes GetPaymentRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetPaymentRequest>): Uint8Array {
    return GetPaymentRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetPaymentRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetPaymentRequest {
    return GetPaymentRequest._readMessage(
      GetPaymentRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetPaymentRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetPaymentRequest>): GetPaymentRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetPaymentRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetPaymentRequest,
    reader: protoscript.BinaryReader,
  ): GetPaymentRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdatePaymentRequest = {
  /**
   * Serializes UpdatePaymentRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdatePaymentRequest>): Uint8Array {
    return UpdatePaymentRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdatePaymentRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdatePaymentRequest {
    return UpdatePaymentRequest._readMessage(
      UpdatePaymentRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdatePaymentRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdatePaymentRequest>,
  ): UpdatePaymentRequest {
    return {
      payment: commercePayment.Payment.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdatePaymentRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.payment) {
      writer.writeMessage(
        1,
        msg.payment,
        commercePayment.Payment._writeMessage,
      );
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdatePaymentRequest,
    reader: protoscript.BinaryReader,
  ): UpdatePaymentRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.payment, commercePayment.Payment._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeletePaymentRequest = {
  /**
   * Serializes DeletePaymentRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeletePaymentRequest>): Uint8Array {
    return DeletePaymentRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeletePaymentRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeletePaymentRequest {
    return DeletePaymentRequest._readMessage(
      DeletePaymentRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeletePaymentRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeletePaymentRequest>,
  ): DeletePaymentRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeletePaymentRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeletePaymentRequest,
    reader: protoscript.BinaryReader,
  ): DeletePaymentRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListPaymentsRequestJSON = {
  /**
   * Serializes ListPaymentsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListPaymentsRequest>): string {
    return JSON.stringify(ListPaymentsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListPaymentsRequest from JSON.
   */
  decode: function (json: string): ListPaymentsRequest {
    return ListPaymentsRequestJSON._readMessage(
      ListPaymentsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListPaymentsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListPaymentsRequest>,
  ): ListPaymentsRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListPaymentsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    if (msg.pageSize) {
      json["pageSize"] = msg.pageSize;
    }
    if (msg.pageToken) {
      json["pageToken"] = msg.pageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPaymentsRequest,
    json: any,
  ): ListPaymentsRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    const _pageSize_ = json["pageSize"] ?? json["page_size"];
    if (_pageSize_) {
      msg.pageSize = protoscript.parseNumber(_pageSize_);
    }
    const _pageToken_ = json["pageToken"] ?? json["page_token"];
    if (_pageToken_) {
      msg.pageToken = _pageToken_;
    }
    return msg;
  },
};

export const ListPaymentsResponseJSON = {
  /**
   * Serializes ListPaymentsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListPaymentsResponse>): string {
    return JSON.stringify(ListPaymentsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListPaymentsResponse from JSON.
   */
  decode: function (json: string): ListPaymentsResponse {
    return ListPaymentsResponseJSON._readMessage(
      ListPaymentsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListPaymentsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListPaymentsResponse>,
  ): ListPaymentsResponse {
    return {
      Payments: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListPaymentsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Payments?.length) {
      json["Payments"] = msg.Payments.map(
        commercePayment.PaymentJSON._writeMessage,
      );
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    if (msg.nextPageToken) {
      json["nextPageToken"] = msg.nextPageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListPaymentsResponse,
    json: any,
  ): ListPaymentsResponse {
    const _Payments_ = json["Payments"];
    if (_Payments_) {
      for (const item of _Payments_) {
        const m = commercePayment.PaymentJSON.initialize();
        commercePayment.PaymentJSON._readMessage(m, item);
        msg.Payments.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    const _nextPageToken_ = json["nextPageToken"] ?? json["next_page_token"];
    if (_nextPageToken_) {
      msg.nextPageToken = _nextPageToken_;
    }
    return msg;
  },
};

export const CreatePaymentRequestJSON = {
  /**
   * Serializes CreatePaymentRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreatePaymentRequest>): string {
    return JSON.stringify(CreatePaymentRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreatePaymentRequest from JSON.
   */
  decode: function (json: string): CreatePaymentRequest {
    return CreatePaymentRequestJSON._readMessage(
      CreatePaymentRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreatePaymentRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreatePaymentRequest>,
  ): CreatePaymentRequest {
    return {
      paymentId: "",
      payment: commercePayment.PaymentJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreatePaymentRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.paymentId) {
      json["paymentId"] = msg.paymentId;
    }
    if (msg.payment) {
      const _payment_ = commercePayment.PaymentJSON._writeMessage(msg.payment);
      if (Object.keys(_payment_).length > 0) {
        json["payment"] = _payment_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreatePaymentRequest,
    json: any,
  ): CreatePaymentRequest {
    const _paymentId_ = json["paymentId"] ?? json["payment_id"];
    if (_paymentId_) {
      msg.paymentId = _paymentId_;
    }
    const _payment_ = json["payment"];
    if (_payment_) {
      commercePayment.PaymentJSON._readMessage(msg.payment, _payment_);
    }
    return msg;
  },
};

export const GetPaymentRequestJSON = {
  /**
   * Serializes GetPaymentRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetPaymentRequest>): string {
    return JSON.stringify(GetPaymentRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetPaymentRequest from JSON.
   */
  decode: function (json: string): GetPaymentRequest {
    return GetPaymentRequestJSON._readMessage(
      GetPaymentRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetPaymentRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetPaymentRequest>): GetPaymentRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetPaymentRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetPaymentRequest,
    json: any,
  ): GetPaymentRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdatePaymentRequestJSON = {
  /**
   * Serializes UpdatePaymentRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdatePaymentRequest>): string {
    return JSON.stringify(UpdatePaymentRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdatePaymentRequest from JSON.
   */
  decode: function (json: string): UpdatePaymentRequest {
    return UpdatePaymentRequestJSON._readMessage(
      UpdatePaymentRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdatePaymentRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdatePaymentRequest>,
  ): UpdatePaymentRequest {
    return {
      payment: commercePayment.PaymentJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdatePaymentRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.payment) {
      const _payment_ = commercePayment.PaymentJSON._writeMessage(msg.payment);
      if (Object.keys(_payment_).length > 0) {
        json["payment"] = _payment_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdatePaymentRequest,
    json: any,
  ): UpdatePaymentRequest {
    const _payment_ = json["payment"];
    if (_payment_) {
      commercePayment.PaymentJSON._readMessage(msg.payment, _payment_);
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeletePaymentRequestJSON = {
  /**
   * Serializes DeletePaymentRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeletePaymentRequest>): string {
    return JSON.stringify(DeletePaymentRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeletePaymentRequest from JSON.
   */
  decode: function (json: string): DeletePaymentRequest {
    return DeletePaymentRequestJSON._readMessage(
      DeletePaymentRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeletePaymentRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeletePaymentRequest>,
  ): DeletePaymentRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeletePaymentRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeletePaymentRequest,
    json: any,
  ): DeletePaymentRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
