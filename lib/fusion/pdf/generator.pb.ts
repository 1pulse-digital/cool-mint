// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: pdf/generator.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface GenerateInvoiceRequest {
  to: string;
}

export interface GenerateInvoiceResponse {
  data: Uint8Array;
}

//========================================//
//       Generator Protobuf Client        //
//========================================//

export async function GenerateInvoice(
  generateInvoiceRequest: GenerateInvoiceRequest,
  config?: ClientConfiguration,
): Promise<GenerateInvoiceResponse> {
  const response = await PBrequest(
    "/pdf.Generator/GenerateInvoice",
    GenerateInvoiceRequest.encode(generateInvoiceRequest),
    config,
  );
  return GenerateInvoiceResponse.decode(response);
}

//========================================//
//         Generator JSON Client          //
//========================================//

export async function GenerateInvoiceJSON(
  generateInvoiceRequest: GenerateInvoiceRequest,
  config?: ClientConfiguration,
): Promise<GenerateInvoiceResponse> {
  const response = await JSONrequest(
    "/pdf.Generator/GenerateInvoice",
    GenerateInvoiceRequestJSON.encode(generateInvoiceRequest),
    config,
  );
  return GenerateInvoiceResponseJSON.decode(response);
}

//========================================//
//               Generator                //
//========================================//

export interface Generator<Context = unknown> {
  GenerateInvoice: (
    generateInvoiceRequest: GenerateInvoiceRequest,
    context: Context,
  ) => Promise<GenerateInvoiceResponse> | GenerateInvoiceResponse;
}

export function createGenerator<Context>(service: Generator<Context>) {
  return {
    name: "pdf.Generator",
    methods: {
      GenerateInvoice: {
        name: "GenerateInvoice",
        handler: service.GenerateInvoice,
        input: {
          protobuf: GenerateInvoiceRequest,
          json: GenerateInvoiceRequestJSON,
        },
        output: {
          protobuf: GenerateInvoiceResponse,
          json: GenerateInvoiceResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const GenerateInvoiceRequest = {
  /**
   * Serializes GenerateInvoiceRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GenerateInvoiceRequest>): Uint8Array {
    return GenerateInvoiceRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GenerateInvoiceRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GenerateInvoiceRequest {
    return GenerateInvoiceRequest._readMessage(
      GenerateInvoiceRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GenerateInvoiceRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GenerateInvoiceRequest>,
  ): GenerateInvoiceRequest {
    return {
      to: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GenerateInvoiceRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.to) {
      writer.writeString(1, msg.to);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GenerateInvoiceRequest,
    reader: protoscript.BinaryReader,
  ): GenerateInvoiceRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.to = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GenerateInvoiceResponse = {
  /**
   * Serializes GenerateInvoiceResponse to protobuf.
   */
  encode: function (msg: PartialDeep<GenerateInvoiceResponse>): Uint8Array {
    return GenerateInvoiceResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GenerateInvoiceResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GenerateInvoiceResponse {
    return GenerateInvoiceResponse._readMessage(
      GenerateInvoiceResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GenerateInvoiceResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GenerateInvoiceResponse>,
  ): GenerateInvoiceResponse {
    return {
      data: new Uint8Array(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GenerateInvoiceResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.data?.length) {
      writer.writeBytes(1, msg.data);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GenerateInvoiceResponse,
    reader: protoscript.BinaryReader,
  ): GenerateInvoiceResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.data = reader.readBytes();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const GenerateInvoiceRequestJSON = {
  /**
   * Serializes GenerateInvoiceRequest to JSON.
   */
  encode: function (msg: PartialDeep<GenerateInvoiceRequest>): string {
    return JSON.stringify(GenerateInvoiceRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GenerateInvoiceRequest from JSON.
   */
  decode: function (json: string): GenerateInvoiceRequest {
    return GenerateInvoiceRequestJSON._readMessage(
      GenerateInvoiceRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GenerateInvoiceRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GenerateInvoiceRequest>,
  ): GenerateInvoiceRequest {
    return {
      to: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GenerateInvoiceRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.to) {
      json["to"] = msg.to;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GenerateInvoiceRequest,
    json: any,
  ): GenerateInvoiceRequest {
    const _to_ = json["to"];
    if (_to_) {
      msg.to = _to_;
    }
    return msg;
  },
};

export const GenerateInvoiceResponseJSON = {
  /**
   * Serializes GenerateInvoiceResponse to JSON.
   */
  encode: function (msg: PartialDeep<GenerateInvoiceResponse>): string {
    return JSON.stringify(GenerateInvoiceResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GenerateInvoiceResponse from JSON.
   */
  decode: function (json: string): GenerateInvoiceResponse {
    return GenerateInvoiceResponseJSON._readMessage(
      GenerateInvoiceResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GenerateInvoiceResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GenerateInvoiceResponse>,
  ): GenerateInvoiceResponse {
    return {
      data: new Uint8Array(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GenerateInvoiceResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.data?.length) {
      json["data"] = protoscript.serializeBytes(msg.data);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GenerateInvoiceResponse,
    json: any,
  ): GenerateInvoiceResponse {
    const _data_ = json["data"];
    if (_data_) {
      msg.data = protoscript.parseBytes(_data_);
    }
    return msg;
  },
};
