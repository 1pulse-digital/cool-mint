// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: auth/membership.repository.sky.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as authMembership from "./membership.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListMembershipsRequest {
  /**
   * Filter allows you to search by fields set as searchable.
   * TODO Generate the list of searchable fields for this comment
   */
  filter: string;
  /**
   * The maximum number of items to return.
   */
  pageSize: number;
  /**
   * The next_page_token value returned from a previous List request, if any.
   */
  pageToken: string;
}

export interface ListMembershipsResponse {
  /**
   * There will be a maximum number of records returned based on the page_size field in the request.
   */
  Memberships: authMembership.Membership[];
  total: bigint;
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

export interface CreateMembershipRequest {
  /**
   * The name to use for the membership, which will become the final component of
   * the membership's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  membershipId: string;
  /**
   * The membership to create.
   */
  membership: authMembership.Membership;
}

export interface GetMembershipRequest {
  name: string;
}

export interface UpdateMembershipRequest {
  /**
   * The membership to update.
   *
   * The membership's 'name' field is used to identify the membership to be updated.
   * Format: auth/membership}}
   */
  membership: authMembership.Membership;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeleteMembershipRequest {
  name: string;
}

//========================================//
//  MembershipRepository Protobuf Client  //
//========================================//

export async function ListMemberships(
  listMembershipsRequest: ListMembershipsRequest,
  config?: ClientConfiguration,
): Promise<ListMembershipsResponse> {
  const response = await PBrequest(
    "/auth.MembershipRepository/ListMemberships",
    ListMembershipsRequest.encode(listMembershipsRequest),
    config,
  );
  return ListMembershipsResponse.decode(response);
}

export async function CreateMembership(
  createMembershipRequest: CreateMembershipRequest,
  config?: ClientConfiguration,
): Promise<authMembership.Membership> {
  const response = await PBrequest(
    "/auth.MembershipRepository/CreateMembership",
    CreateMembershipRequest.encode(createMembershipRequest),
    config,
  );
  return authMembership.Membership.decode(response);
}

export async function GetMembership(
  getMembershipRequest: GetMembershipRequest,
  config?: ClientConfiguration,
): Promise<authMembership.Membership> {
  const response = await PBrequest(
    "/auth.MembershipRepository/GetMembership",
    GetMembershipRequest.encode(getMembershipRequest),
    config,
  );
  return authMembership.Membership.decode(response);
}

export async function UpdateMembership(
  updateMembershipRequest: UpdateMembershipRequest,
  config?: ClientConfiguration,
): Promise<authMembership.Membership> {
  const response = await PBrequest(
    "/auth.MembershipRepository/UpdateMembership",
    UpdateMembershipRequest.encode(updateMembershipRequest),
    config,
  );
  return authMembership.Membership.decode(response);
}

export async function DeleteMembership(
  deleteMembershipRequest: DeleteMembershipRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/auth.MembershipRepository/DeleteMembership",
    DeleteMembershipRequest.encode(deleteMembershipRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//    MembershipRepository JSON Client    //
//========================================//

export async function ListMembershipsJSON(
  listMembershipsRequest: ListMembershipsRequest,
  config?: ClientConfiguration,
): Promise<ListMembershipsResponse> {
  const response = await JSONrequest(
    "/auth.MembershipRepository/ListMemberships",
    ListMembershipsRequestJSON.encode(listMembershipsRequest),
    config,
  );
  return ListMembershipsResponseJSON.decode(response);
}

export async function CreateMembershipJSON(
  createMembershipRequest: CreateMembershipRequest,
  config?: ClientConfiguration,
): Promise<authMembership.Membership> {
  const response = await JSONrequest(
    "/auth.MembershipRepository/CreateMembership",
    CreateMembershipRequestJSON.encode(createMembershipRequest),
    config,
  );
  return authMembership.MembershipJSON.decode(response);
}

export async function GetMembershipJSON(
  getMembershipRequest: GetMembershipRequest,
  config?: ClientConfiguration,
): Promise<authMembership.Membership> {
  const response = await JSONrequest(
    "/auth.MembershipRepository/GetMembership",
    GetMembershipRequestJSON.encode(getMembershipRequest),
    config,
  );
  return authMembership.MembershipJSON.decode(response);
}

export async function UpdateMembershipJSON(
  updateMembershipRequest: UpdateMembershipRequest,
  config?: ClientConfiguration,
): Promise<authMembership.Membership> {
  const response = await JSONrequest(
    "/auth.MembershipRepository/UpdateMembership",
    UpdateMembershipRequestJSON.encode(updateMembershipRequest),
    config,
  );
  return authMembership.MembershipJSON.decode(response);
}

export async function DeleteMembershipJSON(
  deleteMembershipRequest: DeleteMembershipRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/auth.MembershipRepository/DeleteMembership",
    DeleteMembershipRequestJSON.encode(deleteMembershipRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//          MembershipRepository          //
//========================================//

/**
 *
 * MembershipRepository allows you to manage Memberships.
 */
export interface MembershipRepository<Context = unknown> {
  ListMemberships: (
    listMembershipsRequest: ListMembershipsRequest,
    context: Context,
  ) => Promise<ListMembershipsResponse> | ListMembershipsResponse;
  CreateMembership: (
    createMembershipRequest: CreateMembershipRequest,
    context: Context,
  ) => Promise<authMembership.Membership> | authMembership.Membership;
  GetMembership: (
    getMembershipRequest: GetMembershipRequest,
    context: Context,
  ) => Promise<authMembership.Membership> | authMembership.Membership;
  UpdateMembership: (
    updateMembershipRequest: UpdateMembershipRequest,
    context: Context,
  ) => Promise<authMembership.Membership> | authMembership.Membership;
  DeleteMembership: (
    deleteMembershipRequest: DeleteMembershipRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createMembershipRepository<Context>(
  service: MembershipRepository<Context>,
) {
  return {
    name: "auth.MembershipRepository",
    methods: {
      ListMemberships: {
        name: "ListMemberships",
        handler: service.ListMemberships,
        input: {
          protobuf: ListMembershipsRequest,
          json: ListMembershipsRequestJSON,
        },
        output: {
          protobuf: ListMembershipsResponse,
          json: ListMembershipsResponseJSON,
        },
      },
      CreateMembership: {
        name: "CreateMembership",
        handler: service.CreateMembership,
        input: {
          protobuf: CreateMembershipRequest,
          json: CreateMembershipRequestJSON,
        },
        output: {
          protobuf: authMembership.Membership,
          json: authMembership.MembershipJSON,
        },
      },
      GetMembership: {
        name: "GetMembership",
        handler: service.GetMembership,
        input: {
          protobuf: GetMembershipRequest,
          json: GetMembershipRequestJSON,
        },
        output: {
          protobuf: authMembership.Membership,
          json: authMembership.MembershipJSON,
        },
      },
      UpdateMembership: {
        name: "UpdateMembership",
        handler: service.UpdateMembership,
        input: {
          protobuf: UpdateMembershipRequest,
          json: UpdateMembershipRequestJSON,
        },
        output: {
          protobuf: authMembership.Membership,
          json: authMembership.MembershipJSON,
        },
      },
      DeleteMembership: {
        name: "DeleteMembership",
        handler: service.DeleteMembership,
        input: {
          protobuf: DeleteMembershipRequest,
          json: DeleteMembershipRequestJSON,
        },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListMembershipsRequest = {
  /**
   * Serializes ListMembershipsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListMembershipsRequest>): Uint8Array {
    return ListMembershipsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListMembershipsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListMembershipsRequest {
    return ListMembershipsRequest._readMessage(
      ListMembershipsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListMembershipsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListMembershipsRequest>,
  ): ListMembershipsRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListMembershipsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    if (msg.pageSize) {
      writer.writeInt32(2, msg.pageSize);
    }
    if (msg.pageToken) {
      writer.writeString(3, msg.pageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMembershipsRequest,
    reader: protoscript.BinaryReader,
  ): ListMembershipsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        case 2: {
          msg.pageSize = reader.readInt32();
          break;
        }
        case 3: {
          msg.pageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListMembershipsResponse = {
  /**
   * Serializes ListMembershipsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListMembershipsResponse>): Uint8Array {
    return ListMembershipsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListMembershipsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListMembershipsResponse {
    return ListMembershipsResponse._readMessage(
      ListMembershipsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListMembershipsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListMembershipsResponse>,
  ): ListMembershipsResponse {
    return {
      Memberships: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListMembershipsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.Memberships?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.Memberships as any,
        authMembership.Membership._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    if (msg.nextPageToken) {
      writer.writeString(3, msg.nextPageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMembershipsResponse,
    reader: protoscript.BinaryReader,
  ): ListMembershipsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = authMembership.Membership.initialize();
          reader.readMessage(m, authMembership.Membership._readMessage);
          msg.Memberships.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.nextPageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateMembershipRequest = {
  /**
   * Serializes CreateMembershipRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateMembershipRequest>): Uint8Array {
    return CreateMembershipRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateMembershipRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateMembershipRequest {
    return CreateMembershipRequest._readMessage(
      CreateMembershipRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateMembershipRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateMembershipRequest>,
  ): CreateMembershipRequest {
    return {
      membershipId: "",
      membership: authMembership.Membership.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateMembershipRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.membershipId) {
      writer.writeString(1, msg.membershipId);
    }
    if (msg.membership) {
      writer.writeMessage(
        2,
        msg.membership,
        authMembership.Membership._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateMembershipRequest,
    reader: protoscript.BinaryReader,
  ): CreateMembershipRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.membershipId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(
            msg.membership,
            authMembership.Membership._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetMembershipRequest = {
  /**
   * Serializes GetMembershipRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetMembershipRequest>): Uint8Array {
    return GetMembershipRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetMembershipRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetMembershipRequest {
    return GetMembershipRequest._readMessage(
      GetMembershipRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetMembershipRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetMembershipRequest>,
  ): GetMembershipRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetMembershipRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMembershipRequest,
    reader: protoscript.BinaryReader,
  ): GetMembershipRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateMembershipRequest = {
  /**
   * Serializes UpdateMembershipRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateMembershipRequest>): Uint8Array {
    return UpdateMembershipRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateMembershipRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateMembershipRequest {
    return UpdateMembershipRequest._readMessage(
      UpdateMembershipRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateMembershipRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateMembershipRequest>,
  ): UpdateMembershipRequest {
    return {
      membership: authMembership.Membership.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateMembershipRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.membership) {
      writer.writeMessage(
        1,
        msg.membership,
        authMembership.Membership._writeMessage,
      );
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateMembershipRequest,
    reader: protoscript.BinaryReader,
  ): UpdateMembershipRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(
            msg.membership,
            authMembership.Membership._readMessage,
          );
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteMembershipRequest = {
  /**
   * Serializes DeleteMembershipRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteMembershipRequest>): Uint8Array {
    return DeleteMembershipRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteMembershipRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteMembershipRequest {
    return DeleteMembershipRequest._readMessage(
      DeleteMembershipRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteMembershipRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteMembershipRequest>,
  ): DeleteMembershipRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteMembershipRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteMembershipRequest,
    reader: protoscript.BinaryReader,
  ): DeleteMembershipRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListMembershipsRequestJSON = {
  /**
   * Serializes ListMembershipsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListMembershipsRequest>): string {
    return JSON.stringify(ListMembershipsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListMembershipsRequest from JSON.
   */
  decode: function (json: string): ListMembershipsRequest {
    return ListMembershipsRequestJSON._readMessage(
      ListMembershipsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListMembershipsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListMembershipsRequest>,
  ): ListMembershipsRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListMembershipsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    if (msg.pageSize) {
      json["pageSize"] = msg.pageSize;
    }
    if (msg.pageToken) {
      json["pageToken"] = msg.pageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMembershipsRequest,
    json: any,
  ): ListMembershipsRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    const _pageSize_ = json["pageSize"] ?? json["page_size"];
    if (_pageSize_) {
      msg.pageSize = protoscript.parseNumber(_pageSize_);
    }
    const _pageToken_ = json["pageToken"] ?? json["page_token"];
    if (_pageToken_) {
      msg.pageToken = _pageToken_;
    }
    return msg;
  },
};

export const ListMembershipsResponseJSON = {
  /**
   * Serializes ListMembershipsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListMembershipsResponse>): string {
    return JSON.stringify(ListMembershipsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListMembershipsResponse from JSON.
   */
  decode: function (json: string): ListMembershipsResponse {
    return ListMembershipsResponseJSON._readMessage(
      ListMembershipsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListMembershipsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListMembershipsResponse>,
  ): ListMembershipsResponse {
    return {
      Memberships: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListMembershipsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Memberships?.length) {
      json["Memberships"] = msg.Memberships.map(
        authMembership.MembershipJSON._writeMessage,
      );
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    if (msg.nextPageToken) {
      json["nextPageToken"] = msg.nextPageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMembershipsResponse,
    json: any,
  ): ListMembershipsResponse {
    const _Memberships_ = json["Memberships"];
    if (_Memberships_) {
      for (const item of _Memberships_) {
        const m = authMembership.MembershipJSON.initialize();
        authMembership.MembershipJSON._readMessage(m, item);
        msg.Memberships.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    const _nextPageToken_ = json["nextPageToken"] ?? json["next_page_token"];
    if (_nextPageToken_) {
      msg.nextPageToken = _nextPageToken_;
    }
    return msg;
  },
};

export const CreateMembershipRequestJSON = {
  /**
   * Serializes CreateMembershipRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateMembershipRequest>): string {
    return JSON.stringify(CreateMembershipRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateMembershipRequest from JSON.
   */
  decode: function (json: string): CreateMembershipRequest {
    return CreateMembershipRequestJSON._readMessage(
      CreateMembershipRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateMembershipRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateMembershipRequest>,
  ): CreateMembershipRequest {
    return {
      membershipId: "",
      membership: authMembership.MembershipJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateMembershipRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.membershipId) {
      json["membershipId"] = msg.membershipId;
    }
    if (msg.membership) {
      const _membership_ = authMembership.MembershipJSON._writeMessage(
        msg.membership,
      );
      if (Object.keys(_membership_).length > 0) {
        json["membership"] = _membership_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateMembershipRequest,
    json: any,
  ): CreateMembershipRequest {
    const _membershipId_ = json["membershipId"] ?? json["membership_id"];
    if (_membershipId_) {
      msg.membershipId = _membershipId_;
    }
    const _membership_ = json["membership"];
    if (_membership_) {
      authMembership.MembershipJSON._readMessage(msg.membership, _membership_);
    }
    return msg;
  },
};

export const GetMembershipRequestJSON = {
  /**
   * Serializes GetMembershipRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetMembershipRequest>): string {
    return JSON.stringify(GetMembershipRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetMembershipRequest from JSON.
   */
  decode: function (json: string): GetMembershipRequest {
    return GetMembershipRequestJSON._readMessage(
      GetMembershipRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetMembershipRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetMembershipRequest>,
  ): GetMembershipRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetMembershipRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMembershipRequest,
    json: any,
  ): GetMembershipRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdateMembershipRequestJSON = {
  /**
   * Serializes UpdateMembershipRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateMembershipRequest>): string {
    return JSON.stringify(UpdateMembershipRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateMembershipRequest from JSON.
   */
  decode: function (json: string): UpdateMembershipRequest {
    return UpdateMembershipRequestJSON._readMessage(
      UpdateMembershipRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateMembershipRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateMembershipRequest>,
  ): UpdateMembershipRequest {
    return {
      membership: authMembership.MembershipJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateMembershipRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.membership) {
      const _membership_ = authMembership.MembershipJSON._writeMessage(
        msg.membership,
      );
      if (Object.keys(_membership_).length > 0) {
        json["membership"] = _membership_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateMembershipRequest,
    json: any,
  ): UpdateMembershipRequest {
    const _membership_ = json["membership"];
    if (_membership_) {
      authMembership.MembershipJSON._readMessage(msg.membership, _membership_);
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeleteMembershipRequestJSON = {
  /**
   * Serializes DeleteMembershipRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteMembershipRequest>): string {
    return JSON.stringify(DeleteMembershipRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteMembershipRequest from JSON.
   */
  decode: function (json: string): DeleteMembershipRequest {
    return DeleteMembershipRequestJSON._readMessage(
      DeleteMembershipRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteMembershipRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteMembershipRequest>,
  ): DeleteMembershipRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteMembershipRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteMembershipRequest,
    json: any,
  ): DeleteMembershipRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
