// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: auth/client.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface Client {
  name: string;
  uid: string;
  membershipID: string;
  membershipHistory: string[];
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Client = {
  /**
   * Serializes Client to protobuf.
   */
  encode: function (msg: PartialDeep<Client>): Uint8Array {
    return Client._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Client from protobuf.
   */
  decode: function (bytes: ByteSource): Client {
    return Client._readMessage(
      Client.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Client with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Client>): Client {
    return {
      name: "",
      uid: "",
      membershipID: "",
      membershipHistory: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Client>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.uid) {
      writer.writeString(2, msg.uid);
    }
    if (msg.membershipID) {
      writer.writeString(3, msg.membershipID);
    }
    if (msg.membershipHistory?.length) {
      writer.writeRepeatedString(4, msg.membershipHistory);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Client,
    reader: protoscript.BinaryReader,
  ): Client {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.uid = reader.readString();
          break;
        }
        case 3: {
          msg.membershipID = reader.readString();
          break;
        }
        case 4: {
          msg.membershipHistory.push(reader.readString());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ClientJSON = {
  /**
   * Serializes Client to JSON.
   */
  encode: function (msg: PartialDeep<Client>): string {
    return JSON.stringify(ClientJSON._writeMessage(msg));
  },

  /**
   * Deserializes Client from JSON.
   */
  decode: function (json: string): Client {
    return ClientJSON._readMessage(ClientJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Client with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Client>): Client {
    return {
      name: "",
      uid: "",
      membershipID: "",
      membershipHistory: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Client>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.uid) {
      json["uid"] = msg.uid;
    }
    if (msg.membershipID) {
      json["membershipID"] = msg.membershipID;
    }
    if (msg.membershipHistory?.length) {
      json["membershipHistory"] = msg.membershipHistory;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Client, json: any): Client {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _uid_ = json["uid"];
    if (_uid_) {
      msg.uid = _uid_;
    }
    const _membershipID_ = json["membershipID"];
    if (_membershipID_) {
      msg.membershipID = _membershipID_;
    }
    const _membershipHistory_ = json["membershipHistory"];
    if (_membershipHistory_) {
      msg.membershipHistory = _membershipHistory_;
    }
    return msg;
  },
};
