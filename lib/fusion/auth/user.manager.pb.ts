// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: auth/user.manager.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as authUser from "./user.pb";
import * as authRole from "./role.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListUsersRequest {
  filter: string;
}

export interface ListUsersResponse {
  users: authUser.User[];
  total: bigint;
}

export interface CreateUserRequest {
  /**
   * The name to use for the user, which will become the final component of
   * the user's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  userId: string;
  user: authUser.User;
}

export interface GetUserRequest {
  name: string;
}

export interface UpdateUserRequest {
  /**
   * The user to update.
   *
   * The user's 'name' field is used to identify the user to be updated.
   * Format: users/{user_id}
   */
  user: authUser.User;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeleteUserRequest {
  name: string;
}

export interface SetUserRoleRequest {
  name: string;
  role: authRole.Role;
}

export interface SetUserPasswordRequest {
  name: string;
  password: string;
}

//========================================//
//      UserManager Protobuf Client       //
//========================================//

export async function ListUsers(
  listUsersRequest: ListUsersRequest,
  config?: ClientConfiguration,
): Promise<ListUsersResponse> {
  const response = await PBrequest(
    "/auth.UserManager/ListUsers",
    ListUsersRequest.encode(listUsersRequest),
    config,
  );
  return ListUsersResponse.decode(response);
}

export async function CreateUser(
  createUserRequest: CreateUserRequest,
  config?: ClientConfiguration,
): Promise<authUser.User> {
  const response = await PBrequest(
    "/auth.UserManager/CreateUser",
    CreateUserRequest.encode(createUserRequest),
    config,
  );
  return authUser.User.decode(response);
}

export async function GetUser(
  getUserRequest: GetUserRequest,
  config?: ClientConfiguration,
): Promise<authUser.User> {
  const response = await PBrequest(
    "/auth.UserManager/GetUser",
    GetUserRequest.encode(getUserRequest),
    config,
  );
  return authUser.User.decode(response);
}

export async function UpdateUser(
  updateUserRequest: UpdateUserRequest,
  config?: ClientConfiguration,
): Promise<authUser.User> {
  const response = await PBrequest(
    "/auth.UserManager/UpdateUser",
    UpdateUserRequest.encode(updateUserRequest),
    config,
  );
  return authUser.User.decode(response);
}

export async function DeleteUser(
  deleteUserRequest: DeleteUserRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/auth.UserManager/DeleteUser",
    DeleteUserRequest.encode(deleteUserRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

export async function SetUserRole(
  setUserRoleRequest: SetUserRoleRequest,
  config?: ClientConfiguration,
): Promise<authUser.User> {
  const response = await PBrequest(
    "/auth.UserManager/SetUserRole",
    SetUserRoleRequest.encode(setUserRoleRequest),
    config,
  );
  return authUser.User.decode(response);
}

export async function SetUserPassword(
  setUserPasswordRequest: SetUserPasswordRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/auth.UserManager/SetUserPassword",
    SetUserPasswordRequest.encode(setUserPasswordRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//        UserManager JSON Client         //
//========================================//

export async function ListUsersJSON(
  listUsersRequest: ListUsersRequest,
  config?: ClientConfiguration,
): Promise<ListUsersResponse> {
  const response = await JSONrequest(
    "/auth.UserManager/ListUsers",
    ListUsersRequestJSON.encode(listUsersRequest),
    config,
  );
  return ListUsersResponseJSON.decode(response);
}

export async function CreateUserJSON(
  createUserRequest: CreateUserRequest,
  config?: ClientConfiguration,
): Promise<authUser.User> {
  const response = await JSONrequest(
    "/auth.UserManager/CreateUser",
    CreateUserRequestJSON.encode(createUserRequest),
    config,
  );
  return authUser.UserJSON.decode(response);
}

export async function GetUserJSON(
  getUserRequest: GetUserRequest,
  config?: ClientConfiguration,
): Promise<authUser.User> {
  const response = await JSONrequest(
    "/auth.UserManager/GetUser",
    GetUserRequestJSON.encode(getUserRequest),
    config,
  );
  return authUser.UserJSON.decode(response);
}

export async function UpdateUserJSON(
  updateUserRequest: UpdateUserRequest,
  config?: ClientConfiguration,
): Promise<authUser.User> {
  const response = await JSONrequest(
    "/auth.UserManager/UpdateUser",
    UpdateUserRequestJSON.encode(updateUserRequest),
    config,
  );
  return authUser.UserJSON.decode(response);
}

export async function DeleteUserJSON(
  deleteUserRequest: DeleteUserRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/auth.UserManager/DeleteUser",
    DeleteUserRequestJSON.encode(deleteUserRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

export async function SetUserRoleJSON(
  setUserRoleRequest: SetUserRoleRequest,
  config?: ClientConfiguration,
): Promise<authUser.User> {
  const response = await JSONrequest(
    "/auth.UserManager/SetUserRole",
    SetUserRoleRequestJSON.encode(setUserRoleRequest),
    config,
  );
  return authUser.UserJSON.decode(response);
}

export async function SetUserPasswordJSON(
  setUserPasswordRequest: SetUserPasswordRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/auth.UserManager/SetUserPassword",
    SetUserPasswordRequestJSON.encode(setUserPasswordRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//              UserManager               //
//========================================//

/**
 *
 * UserManager allows you to manage users.
 */
export interface UserManager<Context = unknown> {
  ListUsers: (
    listUsersRequest: ListUsersRequest,
    context: Context,
  ) => Promise<ListUsersResponse> | ListUsersResponse;
  CreateUser: (
    createUserRequest: CreateUserRequest,
    context: Context,
  ) => Promise<authUser.User> | authUser.User;
  GetUser: (
    getUserRequest: GetUserRequest,
    context: Context,
  ) => Promise<authUser.User> | authUser.User;
  UpdateUser: (
    updateUserRequest: UpdateUserRequest,
    context: Context,
  ) => Promise<authUser.User> | authUser.User;
  DeleteUser: (
    deleteUserRequest: DeleteUserRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
  SetUserRole: (
    setUserRoleRequest: SetUserRoleRequest,
    context: Context,
  ) => Promise<authUser.User> | authUser.User;
  SetUserPassword: (
    setUserPasswordRequest: SetUserPasswordRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createUserManager<Context>(service: UserManager<Context>) {
  return {
    name: "auth.UserManager",
    methods: {
      ListUsers: {
        name: "ListUsers",
        handler: service.ListUsers,
        input: { protobuf: ListUsersRequest, json: ListUsersRequestJSON },
        output: { protobuf: ListUsersResponse, json: ListUsersResponseJSON },
      },
      CreateUser: {
        name: "CreateUser",
        handler: service.CreateUser,
        input: { protobuf: CreateUserRequest, json: CreateUserRequestJSON },
        output: { protobuf: authUser.User, json: authUser.UserJSON },
      },
      GetUser: {
        name: "GetUser",
        handler: service.GetUser,
        input: { protobuf: GetUserRequest, json: GetUserRequestJSON },
        output: { protobuf: authUser.User, json: authUser.UserJSON },
      },
      UpdateUser: {
        name: "UpdateUser",
        handler: service.UpdateUser,
        input: { protobuf: UpdateUserRequest, json: UpdateUserRequestJSON },
        output: { protobuf: authUser.User, json: authUser.UserJSON },
      },
      DeleteUser: {
        name: "DeleteUser",
        handler: service.DeleteUser,
        input: { protobuf: DeleteUserRequest, json: DeleteUserRequestJSON },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
      SetUserRole: {
        name: "SetUserRole",
        handler: service.SetUserRole,
        input: { protobuf: SetUserRoleRequest, json: SetUserRoleRequestJSON },
        output: { protobuf: authUser.User, json: authUser.UserJSON },
      },
      SetUserPassword: {
        name: "SetUserPassword",
        handler: service.SetUserPassword,
        input: {
          protobuf: SetUserPasswordRequest,
          json: SetUserPasswordRequestJSON,
        },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListUsersRequest = {
  /**
   * Serializes ListUsersRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListUsersRequest>): Uint8Array {
    return ListUsersRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListUsersRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListUsersRequest {
    return ListUsersRequest._readMessage(
      ListUsersRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListUsersRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListUsersRequest>): ListUsersRequest {
    return {
      filter: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListUsersRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListUsersRequest,
    reader: protoscript.BinaryReader,
  ): ListUsersRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListUsersResponse = {
  /**
   * Serializes ListUsersResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListUsersResponse>): Uint8Array {
    return ListUsersResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListUsersResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListUsersResponse {
    return ListUsersResponse._readMessage(
      ListUsersResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListUsersResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListUsersResponse>): ListUsersResponse {
    return {
      users: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListUsersResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.users?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.users as any,
        authUser.User._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListUsersResponse,
    reader: protoscript.BinaryReader,
  ): ListUsersResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = authUser.User.initialize();
          reader.readMessage(m, authUser.User._readMessage);
          msg.users.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateUserRequest = {
  /**
   * Serializes CreateUserRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateUserRequest>): Uint8Array {
    return CreateUserRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateUserRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateUserRequest {
    return CreateUserRequest._readMessage(
      CreateUserRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateUserRequest>): CreateUserRequest {
    return {
      userId: "",
      user: authUser.User.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.user) {
      writer.writeMessage(2, msg.user, authUser.User._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserRequest,
    reader: protoscript.BinaryReader,
  ): CreateUserRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.user, authUser.User._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserRequest = {
  /**
   * Serializes GetUserRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetUserRequest>): Uint8Array {
    return GetUserRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserRequest {
    return GetUserRequest._readMessage(
      GetUserRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetUserRequest>): GetUserRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserRequest,
    reader: protoscript.BinaryReader,
  ): GetUserRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateUserRequest = {
  /**
   * Serializes UpdateUserRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateUserRequest>): Uint8Array {
    return UpdateUserRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateUserRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateUserRequest {
    return UpdateUserRequest._readMessage(
      UpdateUserRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateUserRequest>): UpdateUserRequest {
    return {
      user: authUser.User.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateUserRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, authUser.User._writeMessage);
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateUserRequest,
    reader: protoscript.BinaryReader,
  ): UpdateUserRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, authUser.User._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteUserRequest = {
  /**
   * Serializes DeleteUserRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteUserRequest>): Uint8Array {
    return DeleteUserRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteUserRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteUserRequest {
    return DeleteUserRequest._readMessage(
      DeleteUserRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteUserRequest>): DeleteUserRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteUserRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteUserRequest,
    reader: protoscript.BinaryReader,
  ): DeleteUserRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SetUserRoleRequest = {
  /**
   * Serializes SetUserRoleRequest to protobuf.
   */
  encode: function (msg: PartialDeep<SetUserRoleRequest>): Uint8Array {
    return SetUserRoleRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SetUserRoleRequest from protobuf.
   */
  decode: function (bytes: ByteSource): SetUserRoleRequest {
    return SetUserRoleRequest._readMessage(
      SetUserRoleRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SetUserRoleRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SetUserRoleRequest>): SetUserRoleRequest {
    return {
      name: "",
      role: authRole.Role._fromInt(0),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SetUserRoleRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.role && authRole.Role._toInt(msg.role)) {
      writer.writeEnum(2, authRole.Role._toInt(msg.role));
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SetUserRoleRequest,
    reader: protoscript.BinaryReader,
  ): SetUserRoleRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.role = authRole.Role._fromInt(reader.readEnum());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SetUserPasswordRequest = {
  /**
   * Serializes SetUserPasswordRequest to protobuf.
   */
  encode: function (msg: PartialDeep<SetUserPasswordRequest>): Uint8Array {
    return SetUserPasswordRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SetUserPasswordRequest from protobuf.
   */
  decode: function (bytes: ByteSource): SetUserPasswordRequest {
    return SetUserPasswordRequest._readMessage(
      SetUserPasswordRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SetUserPasswordRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SetUserPasswordRequest>,
  ): SetUserPasswordRequest {
    return {
      name: "",
      password: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SetUserPasswordRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.password) {
      writer.writeString(2, msg.password);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SetUserPasswordRequest,
    reader: protoscript.BinaryReader,
  ): SetUserPasswordRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.password = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListUsersRequestJSON = {
  /**
   * Serializes ListUsersRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListUsersRequest>): string {
    return JSON.stringify(ListUsersRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListUsersRequest from JSON.
   */
  decode: function (json: string): ListUsersRequest {
    return ListUsersRequestJSON._readMessage(
      ListUsersRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListUsersRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListUsersRequest>): ListUsersRequest {
    return {
      filter: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListUsersRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ListUsersRequest, json: any): ListUsersRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    return msg;
  },
};

export const ListUsersResponseJSON = {
  /**
   * Serializes ListUsersResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListUsersResponse>): string {
    return JSON.stringify(ListUsersResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListUsersResponse from JSON.
   */
  decode: function (json: string): ListUsersResponse {
    return ListUsersResponseJSON._readMessage(
      ListUsersResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListUsersResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListUsersResponse>): ListUsersResponse {
    return {
      users: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListUsersResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.users?.length) {
      json["users"] = msg.users.map(authUser.UserJSON._writeMessage);
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListUsersResponse,
    json: any,
  ): ListUsersResponse {
    const _users_ = json["users"];
    if (_users_) {
      for (const item of _users_) {
        const m = authUser.UserJSON.initialize();
        authUser.UserJSON._readMessage(m, item);
        msg.users.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    return msg;
  },
};

export const CreateUserRequestJSON = {
  /**
   * Serializes CreateUserRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateUserRequest>): string {
    return JSON.stringify(CreateUserRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateUserRequest from JSON.
   */
  decode: function (json: string): CreateUserRequest {
    return CreateUserRequestJSON._readMessage(
      CreateUserRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateUserRequest>): CreateUserRequest {
    return {
      userId: "",
      user: authUser.UserJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateUserRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json["userId"] = msg.userId;
    }
    if (msg.user) {
      const _user_ = authUser.UserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateUserRequest,
    json: any,
  ): CreateUserRequest {
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = _userId_;
    }
    const _user_ = json["user"];
    if (_user_) {
      authUser.UserJSON._readMessage(msg.user, _user_);
    }
    return msg;
  },
};

export const GetUserRequestJSON = {
  /**
   * Serializes GetUserRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetUserRequest>): string {
    return JSON.stringify(GetUserRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserRequest from JSON.
   */
  decode: function (json: string): GetUserRequest {
    return GetUserRequestJSON._readMessage(
      GetUserRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetUserRequest>): GetUserRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetUserRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetUserRequest, json: any): GetUserRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdateUserRequestJSON = {
  /**
   * Serializes UpdateUserRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateUserRequest>): string {
    return JSON.stringify(UpdateUserRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateUserRequest from JSON.
   */
  decode: function (json: string): UpdateUserRequest {
    return UpdateUserRequestJSON._readMessage(
      UpdateUserRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateUserRequest>): UpdateUserRequest {
    return {
      user: authUser.UserJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateUserRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const _user_ = authUser.UserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateUserRequest,
    json: any,
  ): UpdateUserRequest {
    const _user_ = json["user"];
    if (_user_) {
      authUser.UserJSON._readMessage(msg.user, _user_);
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeleteUserRequestJSON = {
  /**
   * Serializes DeleteUserRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteUserRequest>): string {
    return JSON.stringify(DeleteUserRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteUserRequest from JSON.
   */
  decode: function (json: string): DeleteUserRequest {
    return DeleteUserRequestJSON._readMessage(
      DeleteUserRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteUserRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteUserRequest>): DeleteUserRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteUserRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteUserRequest,
    json: any,
  ): DeleteUserRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const SetUserRoleRequestJSON = {
  /**
   * Serializes SetUserRoleRequest to JSON.
   */
  encode: function (msg: PartialDeep<SetUserRoleRequest>): string {
    return JSON.stringify(SetUserRoleRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes SetUserRoleRequest from JSON.
   */
  decode: function (json: string): SetUserRoleRequest {
    return SetUserRoleRequestJSON._readMessage(
      SetUserRoleRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SetUserRoleRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<SetUserRoleRequest>): SetUserRoleRequest {
    return {
      name: "",
      role: authRole.Role._fromInt(0),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SetUserRoleRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.role && authRole.RoleJSON._toInt(msg.role)) {
      json["role"] = msg.role;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SetUserRoleRequest,
    json: any,
  ): SetUserRoleRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _role_ = json["role"];
    if (_role_) {
      msg.role = authRole.Role._fromInt(_role_);
    }
    return msg;
  },
};

export const SetUserPasswordRequestJSON = {
  /**
   * Serializes SetUserPasswordRequest to JSON.
   */
  encode: function (msg: PartialDeep<SetUserPasswordRequest>): string {
    return JSON.stringify(SetUserPasswordRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes SetUserPasswordRequest from JSON.
   */
  decode: function (json: string): SetUserPasswordRequest {
    return SetUserPasswordRequestJSON._readMessage(
      SetUserPasswordRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SetUserPasswordRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SetUserPasswordRequest>,
  ): SetUserPasswordRequest {
    return {
      name: "",
      password: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SetUserPasswordRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.password) {
      json["password"] = msg.password;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SetUserPasswordRequest,
    json: any,
  ): SetUserPasswordRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _password_ = json["password"];
    if (_password_) {
      msg.password = _password_;
    }
    return msg;
  },
};
