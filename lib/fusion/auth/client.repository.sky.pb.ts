// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: auth/client.repository.sky.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as authClient from "./client.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListClientsRequest {
  /**
   * Filter allows you to search by fields set as searchable.
   * TODO Generate the list of searchable fields for this comment
   */
  filter: string;
  /**
   * The maximum number of items to return.
   */
  pageSize: number;
  /**
   * The next_page_token value returned from a previous List request, if any.
   */
  pageToken: string;
}

export interface ListClientsResponse {
  /**
   * There will be a maximum number of records returned based on the page_size field in the request.
   */
  Clients: authClient.Client[];
  total: bigint;
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

export interface CreateClientRequest {
  /**
   * The name to use for the client, which will become the final component of
   * the client's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  clientId: string;
  /**
   * The client to create.
   */
  client: authClient.Client;
}

export interface GetClientRequest {
  name: string;
}

export interface UpdateClientRequest {
  /**
   * The client to update.
   *
   * The client's 'name' field is used to identify the client to be updated.
   * Format: auth/client}}
   */
  client: authClient.Client;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeleteClientRequest {
  name: string;
}

//========================================//
//    ClientRepository Protobuf Client    //
//========================================//

export async function ListClients(
  listClientsRequest: ListClientsRequest,
  config?: ClientConfiguration,
): Promise<ListClientsResponse> {
  const response = await PBrequest(
    "/auth.ClientRepository/ListClients",
    ListClientsRequest.encode(listClientsRequest),
    config,
  );
  return ListClientsResponse.decode(response);
}

export async function CreateClient(
  createClientRequest: CreateClientRequest,
  config?: ClientConfiguration,
): Promise<authClient.Client> {
  const response = await PBrequest(
    "/auth.ClientRepository/CreateClient",
    CreateClientRequest.encode(createClientRequest),
    config,
  );
  return authClient.Client.decode(response);
}

export async function GetClient(
  getClientRequest: GetClientRequest,
  config?: ClientConfiguration,
): Promise<authClient.Client> {
  const response = await PBrequest(
    "/auth.ClientRepository/GetClient",
    GetClientRequest.encode(getClientRequest),
    config,
  );
  return authClient.Client.decode(response);
}

export async function UpdateClient(
  updateClientRequest: UpdateClientRequest,
  config?: ClientConfiguration,
): Promise<authClient.Client> {
  const response = await PBrequest(
    "/auth.ClientRepository/UpdateClient",
    UpdateClientRequest.encode(updateClientRequest),
    config,
  );
  return authClient.Client.decode(response);
}

export async function DeleteClient(
  deleteClientRequest: DeleteClientRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/auth.ClientRepository/DeleteClient",
    DeleteClientRequest.encode(deleteClientRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//      ClientRepository JSON Client      //
//========================================//

export async function ListClientsJSON(
  listClientsRequest: ListClientsRequest,
  config?: ClientConfiguration,
): Promise<ListClientsResponse> {
  const response = await JSONrequest(
    "/auth.ClientRepository/ListClients",
    ListClientsRequestJSON.encode(listClientsRequest),
    config,
  );
  return ListClientsResponseJSON.decode(response);
}

export async function CreateClientJSON(
  createClientRequest: CreateClientRequest,
  config?: ClientConfiguration,
): Promise<authClient.Client> {
  const response = await JSONrequest(
    "/auth.ClientRepository/CreateClient",
    CreateClientRequestJSON.encode(createClientRequest),
    config,
  );
  return authClient.ClientJSON.decode(response);
}

export async function GetClientJSON(
  getClientRequest: GetClientRequest,
  config?: ClientConfiguration,
): Promise<authClient.Client> {
  const response = await JSONrequest(
    "/auth.ClientRepository/GetClient",
    GetClientRequestJSON.encode(getClientRequest),
    config,
  );
  return authClient.ClientJSON.decode(response);
}

export async function UpdateClientJSON(
  updateClientRequest: UpdateClientRequest,
  config?: ClientConfiguration,
): Promise<authClient.Client> {
  const response = await JSONrequest(
    "/auth.ClientRepository/UpdateClient",
    UpdateClientRequestJSON.encode(updateClientRequest),
    config,
  );
  return authClient.ClientJSON.decode(response);
}

export async function DeleteClientJSON(
  deleteClientRequest: DeleteClientRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/auth.ClientRepository/DeleteClient",
    DeleteClientRequestJSON.encode(deleteClientRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//            ClientRepository            //
//========================================//

/**
 *
 * ClientRepository allows you to manage Clients.
 */
export interface ClientRepository<Context = unknown> {
  ListClients: (
    listClientsRequest: ListClientsRequest,
    context: Context,
  ) => Promise<ListClientsResponse> | ListClientsResponse;
  CreateClient: (
    createClientRequest: CreateClientRequest,
    context: Context,
  ) => Promise<authClient.Client> | authClient.Client;
  GetClient: (
    getClientRequest: GetClientRequest,
    context: Context,
  ) => Promise<authClient.Client> | authClient.Client;
  UpdateClient: (
    updateClientRequest: UpdateClientRequest,
    context: Context,
  ) => Promise<authClient.Client> | authClient.Client;
  DeleteClient: (
    deleteClientRequest: DeleteClientRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createClientRepository<Context>(
  service: ClientRepository<Context>,
) {
  return {
    name: "auth.ClientRepository",
    methods: {
      ListClients: {
        name: "ListClients",
        handler: service.ListClients,
        input: { protobuf: ListClientsRequest, json: ListClientsRequestJSON },
        output: {
          protobuf: ListClientsResponse,
          json: ListClientsResponseJSON,
        },
      },
      CreateClient: {
        name: "CreateClient",
        handler: service.CreateClient,
        input: { protobuf: CreateClientRequest, json: CreateClientRequestJSON },
        output: { protobuf: authClient.Client, json: authClient.ClientJSON },
      },
      GetClient: {
        name: "GetClient",
        handler: service.GetClient,
        input: { protobuf: GetClientRequest, json: GetClientRequestJSON },
        output: { protobuf: authClient.Client, json: authClient.ClientJSON },
      },
      UpdateClient: {
        name: "UpdateClient",
        handler: service.UpdateClient,
        input: { protobuf: UpdateClientRequest, json: UpdateClientRequestJSON },
        output: { protobuf: authClient.Client, json: authClient.ClientJSON },
      },
      DeleteClient: {
        name: "DeleteClient",
        handler: service.DeleteClient,
        input: { protobuf: DeleteClientRequest, json: DeleteClientRequestJSON },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListClientsRequest = {
  /**
   * Serializes ListClientsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListClientsRequest>): Uint8Array {
    return ListClientsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListClientsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListClientsRequest {
    return ListClientsRequest._readMessage(
      ListClientsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListClientsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListClientsRequest>): ListClientsRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListClientsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    if (msg.pageSize) {
      writer.writeInt32(2, msg.pageSize);
    }
    if (msg.pageToken) {
      writer.writeString(3, msg.pageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListClientsRequest,
    reader: protoscript.BinaryReader,
  ): ListClientsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        case 2: {
          msg.pageSize = reader.readInt32();
          break;
        }
        case 3: {
          msg.pageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListClientsResponse = {
  /**
   * Serializes ListClientsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListClientsResponse>): Uint8Array {
    return ListClientsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListClientsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListClientsResponse {
    return ListClientsResponse._readMessage(
      ListClientsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListClientsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListClientsResponse>,
  ): ListClientsResponse {
    return {
      Clients: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListClientsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.Clients?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.Clients as any,
        authClient.Client._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    if (msg.nextPageToken) {
      writer.writeString(3, msg.nextPageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListClientsResponse,
    reader: protoscript.BinaryReader,
  ): ListClientsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = authClient.Client.initialize();
          reader.readMessage(m, authClient.Client._readMessage);
          msg.Clients.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.nextPageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateClientRequest = {
  /**
   * Serializes CreateClientRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateClientRequest>): Uint8Array {
    return CreateClientRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateClientRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateClientRequest {
    return CreateClientRequest._readMessage(
      CreateClientRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateClientRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateClientRequest>,
  ): CreateClientRequest {
    return {
      clientId: "",
      client: authClient.Client.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateClientRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.clientId) {
      writer.writeString(1, msg.clientId);
    }
    if (msg.client) {
      writer.writeMessage(2, msg.client, authClient.Client._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateClientRequest,
    reader: protoscript.BinaryReader,
  ): CreateClientRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.clientId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.client, authClient.Client._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetClientRequest = {
  /**
   * Serializes GetClientRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetClientRequest>): Uint8Array {
    return GetClientRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetClientRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetClientRequest {
    return GetClientRequest._readMessage(
      GetClientRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetClientRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetClientRequest>): GetClientRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetClientRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetClientRequest,
    reader: protoscript.BinaryReader,
  ): GetClientRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateClientRequest = {
  /**
   * Serializes UpdateClientRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateClientRequest>): Uint8Array {
    return UpdateClientRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateClientRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateClientRequest {
    return UpdateClientRequest._readMessage(
      UpdateClientRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateClientRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateClientRequest>,
  ): UpdateClientRequest {
    return {
      client: authClient.Client.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateClientRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.client) {
      writer.writeMessage(1, msg.client, authClient.Client._writeMessage);
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateClientRequest,
    reader: protoscript.BinaryReader,
  ): UpdateClientRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.client, authClient.Client._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteClientRequest = {
  /**
   * Serializes DeleteClientRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteClientRequest>): Uint8Array {
    return DeleteClientRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteClientRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteClientRequest {
    return DeleteClientRequest._readMessage(
      DeleteClientRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteClientRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteClientRequest>,
  ): DeleteClientRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteClientRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteClientRequest,
    reader: protoscript.BinaryReader,
  ): DeleteClientRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListClientsRequestJSON = {
  /**
   * Serializes ListClientsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListClientsRequest>): string {
    return JSON.stringify(ListClientsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListClientsRequest from JSON.
   */
  decode: function (json: string): ListClientsRequest {
    return ListClientsRequestJSON._readMessage(
      ListClientsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListClientsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListClientsRequest>): ListClientsRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListClientsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    if (msg.pageSize) {
      json["pageSize"] = msg.pageSize;
    }
    if (msg.pageToken) {
      json["pageToken"] = msg.pageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListClientsRequest,
    json: any,
  ): ListClientsRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    const _pageSize_ = json["pageSize"] ?? json["page_size"];
    if (_pageSize_) {
      msg.pageSize = protoscript.parseNumber(_pageSize_);
    }
    const _pageToken_ = json["pageToken"] ?? json["page_token"];
    if (_pageToken_) {
      msg.pageToken = _pageToken_;
    }
    return msg;
  },
};

export const ListClientsResponseJSON = {
  /**
   * Serializes ListClientsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListClientsResponse>): string {
    return JSON.stringify(ListClientsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListClientsResponse from JSON.
   */
  decode: function (json: string): ListClientsResponse {
    return ListClientsResponseJSON._readMessage(
      ListClientsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListClientsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListClientsResponse>,
  ): ListClientsResponse {
    return {
      Clients: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListClientsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Clients?.length) {
      json["Clients"] = msg.Clients.map(authClient.ClientJSON._writeMessage);
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    if (msg.nextPageToken) {
      json["nextPageToken"] = msg.nextPageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListClientsResponse,
    json: any,
  ): ListClientsResponse {
    const _Clients_ = json["Clients"];
    if (_Clients_) {
      for (const item of _Clients_) {
        const m = authClient.ClientJSON.initialize();
        authClient.ClientJSON._readMessage(m, item);
        msg.Clients.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    const _nextPageToken_ = json["nextPageToken"] ?? json["next_page_token"];
    if (_nextPageToken_) {
      msg.nextPageToken = _nextPageToken_;
    }
    return msg;
  },
};

export const CreateClientRequestJSON = {
  /**
   * Serializes CreateClientRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateClientRequest>): string {
    return JSON.stringify(CreateClientRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateClientRequest from JSON.
   */
  decode: function (json: string): CreateClientRequest {
    return CreateClientRequestJSON._readMessage(
      CreateClientRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateClientRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateClientRequest>,
  ): CreateClientRequest {
    return {
      clientId: "",
      client: authClient.ClientJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateClientRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.clientId) {
      json["clientId"] = msg.clientId;
    }
    if (msg.client) {
      const _client_ = authClient.ClientJSON._writeMessage(msg.client);
      if (Object.keys(_client_).length > 0) {
        json["client"] = _client_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateClientRequest,
    json: any,
  ): CreateClientRequest {
    const _clientId_ = json["clientId"] ?? json["client_id"];
    if (_clientId_) {
      msg.clientId = _clientId_;
    }
    const _client_ = json["client"];
    if (_client_) {
      authClient.ClientJSON._readMessage(msg.client, _client_);
    }
    return msg;
  },
};

export const GetClientRequestJSON = {
  /**
   * Serializes GetClientRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetClientRequest>): string {
    return JSON.stringify(GetClientRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetClientRequest from JSON.
   */
  decode: function (json: string): GetClientRequest {
    return GetClientRequestJSON._readMessage(
      GetClientRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetClientRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetClientRequest>): GetClientRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetClientRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetClientRequest, json: any): GetClientRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdateClientRequestJSON = {
  /**
   * Serializes UpdateClientRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateClientRequest>): string {
    return JSON.stringify(UpdateClientRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateClientRequest from JSON.
   */
  decode: function (json: string): UpdateClientRequest {
    return UpdateClientRequestJSON._readMessage(
      UpdateClientRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateClientRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateClientRequest>,
  ): UpdateClientRequest {
    return {
      client: authClient.ClientJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateClientRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.client) {
      const _client_ = authClient.ClientJSON._writeMessage(msg.client);
      if (Object.keys(_client_).length > 0) {
        json["client"] = _client_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateClientRequest,
    json: any,
  ): UpdateClientRequest {
    const _client_ = json["client"];
    if (_client_) {
      authClient.ClientJSON._readMessage(msg.client, _client_);
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeleteClientRequestJSON = {
  /**
   * Serializes DeleteClientRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteClientRequest>): string {
    return JSON.stringify(DeleteClientRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteClientRequest from JSON.
   */
  decode: function (json: string): DeleteClientRequest {
    return DeleteClientRequestJSON._readMessage(
      DeleteClientRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteClientRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteClientRequest>,
  ): DeleteClientRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteClientRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteClientRequest,
    json: any,
  ): DeleteClientRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
