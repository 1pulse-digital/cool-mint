// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: yoco/webhook.repository.sky.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as yocoWebhook from "./webhook.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListWebhooksRequest {
  /**
   * Filter allows you to search by fields set as searchable.
   * TODO Generate the list of searchable fields for this comment
   */
  filter: string;
  /**
   * The maximum number of items to return.
   */
  pageSize: number;
  /**
   * The next_page_token value returned from a previous List request, if any.
   */
  pageToken: string;
}

export interface ListWebhooksResponse {
  /**
   * There will be a maximum number of records returned based on the page_size field in the request.
   */
  Webhooks: yocoWebhook.Webhook[];
  total: bigint;
  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   */
  nextPageToken: string;
}

export interface CreateWebhookRequest {
  /**
   * The name to use for the webhook, which will become the final component of
   * the webhook's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  webhookId: string;
  /**
   * The webhook to create.
   */
  webhook: yocoWebhook.Webhook;
}

export interface GetWebhookRequest {
  name: string;
}

export interface UpdateWebhookRequest {
  /**
   * The webhook to update.
   *
   * The webhook's 'name' field is used to identify the webhook to be updated.
   * Format: yoco/webhook}}
   */
  webhook: yocoWebhook.Webhook;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeleteWebhookRequest {
  name: string;
}

//========================================//
//   WebhookRepository Protobuf Client    //
//========================================//

export async function ListWebhooks(
  listWebhooksRequest: ListWebhooksRequest,
  config?: ClientConfiguration,
): Promise<ListWebhooksResponse> {
  const response = await PBrequest(
    "/yoco.WebhookRepository/ListWebhooks",
    ListWebhooksRequest.encode(listWebhooksRequest),
    config,
  );
  return ListWebhooksResponse.decode(response);
}

export async function CreateWebhook(
  createWebhookRequest: CreateWebhookRequest,
  config?: ClientConfiguration,
): Promise<yocoWebhook.Webhook> {
  const response = await PBrequest(
    "/yoco.WebhookRepository/CreateWebhook",
    CreateWebhookRequest.encode(createWebhookRequest),
    config,
  );
  return yocoWebhook.Webhook.decode(response);
}

export async function GetWebhook(
  getWebhookRequest: GetWebhookRequest,
  config?: ClientConfiguration,
): Promise<yocoWebhook.Webhook> {
  const response = await PBrequest(
    "/yoco.WebhookRepository/GetWebhook",
    GetWebhookRequest.encode(getWebhookRequest),
    config,
  );
  return yocoWebhook.Webhook.decode(response);
}

export async function UpdateWebhook(
  updateWebhookRequest: UpdateWebhookRequest,
  config?: ClientConfiguration,
): Promise<yocoWebhook.Webhook> {
  const response = await PBrequest(
    "/yoco.WebhookRepository/UpdateWebhook",
    UpdateWebhookRequest.encode(updateWebhookRequest),
    config,
  );
  return yocoWebhook.Webhook.decode(response);
}

export async function DeleteWebhook(
  deleteWebhookRequest: DeleteWebhookRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/yoco.WebhookRepository/DeleteWebhook",
    DeleteWebhookRequest.encode(deleteWebhookRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//     WebhookRepository JSON Client      //
//========================================//

export async function ListWebhooksJSON(
  listWebhooksRequest: ListWebhooksRequest,
  config?: ClientConfiguration,
): Promise<ListWebhooksResponse> {
  const response = await JSONrequest(
    "/yoco.WebhookRepository/ListWebhooks",
    ListWebhooksRequestJSON.encode(listWebhooksRequest),
    config,
  );
  return ListWebhooksResponseJSON.decode(response);
}

export async function CreateWebhookJSON(
  createWebhookRequest: CreateWebhookRequest,
  config?: ClientConfiguration,
): Promise<yocoWebhook.Webhook> {
  const response = await JSONrequest(
    "/yoco.WebhookRepository/CreateWebhook",
    CreateWebhookRequestJSON.encode(createWebhookRequest),
    config,
  );
  return yocoWebhook.WebhookJSON.decode(response);
}

export async function GetWebhookJSON(
  getWebhookRequest: GetWebhookRequest,
  config?: ClientConfiguration,
): Promise<yocoWebhook.Webhook> {
  const response = await JSONrequest(
    "/yoco.WebhookRepository/GetWebhook",
    GetWebhookRequestJSON.encode(getWebhookRequest),
    config,
  );
  return yocoWebhook.WebhookJSON.decode(response);
}

export async function UpdateWebhookJSON(
  updateWebhookRequest: UpdateWebhookRequest,
  config?: ClientConfiguration,
): Promise<yocoWebhook.Webhook> {
  const response = await JSONrequest(
    "/yoco.WebhookRepository/UpdateWebhook",
    UpdateWebhookRequestJSON.encode(updateWebhookRequest),
    config,
  );
  return yocoWebhook.WebhookJSON.decode(response);
}

export async function DeleteWebhookJSON(
  deleteWebhookRequest: DeleteWebhookRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/yoco.WebhookRepository/DeleteWebhook",
    DeleteWebhookRequestJSON.encode(deleteWebhookRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//           WebhookRepository            //
//========================================//

/**
 *
 * WebhookRepository allows you to manage Webhooks.
 */
export interface WebhookRepository<Context = unknown> {
  ListWebhooks: (
    listWebhooksRequest: ListWebhooksRequest,
    context: Context,
  ) => Promise<ListWebhooksResponse> | ListWebhooksResponse;
  CreateWebhook: (
    createWebhookRequest: CreateWebhookRequest,
    context: Context,
  ) => Promise<yocoWebhook.Webhook> | yocoWebhook.Webhook;
  GetWebhook: (
    getWebhookRequest: GetWebhookRequest,
    context: Context,
  ) => Promise<yocoWebhook.Webhook> | yocoWebhook.Webhook;
  UpdateWebhook: (
    updateWebhookRequest: UpdateWebhookRequest,
    context: Context,
  ) => Promise<yocoWebhook.Webhook> | yocoWebhook.Webhook;
  DeleteWebhook: (
    deleteWebhookRequest: DeleteWebhookRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createWebhookRepository<Context>(
  service: WebhookRepository<Context>,
) {
  return {
    name: "yoco.WebhookRepository",
    methods: {
      ListWebhooks: {
        name: "ListWebhooks",
        handler: service.ListWebhooks,
        input: { protobuf: ListWebhooksRequest, json: ListWebhooksRequestJSON },
        output: {
          protobuf: ListWebhooksResponse,
          json: ListWebhooksResponseJSON,
        },
      },
      CreateWebhook: {
        name: "CreateWebhook",
        handler: service.CreateWebhook,
        input: {
          protobuf: CreateWebhookRequest,
          json: CreateWebhookRequestJSON,
        },
        output: {
          protobuf: yocoWebhook.Webhook,
          json: yocoWebhook.WebhookJSON,
        },
      },
      GetWebhook: {
        name: "GetWebhook",
        handler: service.GetWebhook,
        input: { protobuf: GetWebhookRequest, json: GetWebhookRequestJSON },
        output: {
          protobuf: yocoWebhook.Webhook,
          json: yocoWebhook.WebhookJSON,
        },
      },
      UpdateWebhook: {
        name: "UpdateWebhook",
        handler: service.UpdateWebhook,
        input: {
          protobuf: UpdateWebhookRequest,
          json: UpdateWebhookRequestJSON,
        },
        output: {
          protobuf: yocoWebhook.Webhook,
          json: yocoWebhook.WebhookJSON,
        },
      },
      DeleteWebhook: {
        name: "DeleteWebhook",
        handler: service.DeleteWebhook,
        input: {
          protobuf: DeleteWebhookRequest,
          json: DeleteWebhookRequestJSON,
        },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListWebhooksRequest = {
  /**
   * Serializes ListWebhooksRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListWebhooksRequest>): Uint8Array {
    return ListWebhooksRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListWebhooksRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListWebhooksRequest {
    return ListWebhooksRequest._readMessage(
      ListWebhooksRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListWebhooksRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListWebhooksRequest>,
  ): ListWebhooksRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListWebhooksRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    if (msg.pageSize) {
      writer.writeInt32(2, msg.pageSize);
    }
    if (msg.pageToken) {
      writer.writeString(3, msg.pageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListWebhooksRequest,
    reader: protoscript.BinaryReader,
  ): ListWebhooksRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        case 2: {
          msg.pageSize = reader.readInt32();
          break;
        }
        case 3: {
          msg.pageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListWebhooksResponse = {
  /**
   * Serializes ListWebhooksResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListWebhooksResponse>): Uint8Array {
    return ListWebhooksResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListWebhooksResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListWebhooksResponse {
    return ListWebhooksResponse._readMessage(
      ListWebhooksResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListWebhooksResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListWebhooksResponse>,
  ): ListWebhooksResponse {
    return {
      Webhooks: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListWebhooksResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.Webhooks?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.Webhooks as any,
        yocoWebhook.Webhook._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    if (msg.nextPageToken) {
      writer.writeString(3, msg.nextPageToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListWebhooksResponse,
    reader: protoscript.BinaryReader,
  ): ListWebhooksResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = yocoWebhook.Webhook.initialize();
          reader.readMessage(m, yocoWebhook.Webhook._readMessage);
          msg.Webhooks.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.nextPageToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateWebhookRequest = {
  /**
   * Serializes CreateWebhookRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateWebhookRequest>): Uint8Array {
    return CreateWebhookRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateWebhookRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateWebhookRequest {
    return CreateWebhookRequest._readMessage(
      CreateWebhookRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateWebhookRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateWebhookRequest>,
  ): CreateWebhookRequest {
    return {
      webhookId: "",
      webhook: yocoWebhook.Webhook.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateWebhookRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.webhookId) {
      writer.writeString(1, msg.webhookId);
    }
    if (msg.webhook) {
      writer.writeMessage(2, msg.webhook, yocoWebhook.Webhook._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateWebhookRequest,
    reader: protoscript.BinaryReader,
  ): CreateWebhookRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.webhookId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.webhook, yocoWebhook.Webhook._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetWebhookRequest = {
  /**
   * Serializes GetWebhookRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetWebhookRequest>): Uint8Array {
    return GetWebhookRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetWebhookRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetWebhookRequest {
    return GetWebhookRequest._readMessage(
      GetWebhookRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetWebhookRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetWebhookRequest>): GetWebhookRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetWebhookRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetWebhookRequest,
    reader: protoscript.BinaryReader,
  ): GetWebhookRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateWebhookRequest = {
  /**
   * Serializes UpdateWebhookRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateWebhookRequest>): Uint8Array {
    return UpdateWebhookRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateWebhookRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateWebhookRequest {
    return UpdateWebhookRequest._readMessage(
      UpdateWebhookRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateWebhookRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateWebhookRequest>,
  ): UpdateWebhookRequest {
    return {
      webhook: yocoWebhook.Webhook.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateWebhookRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.webhook) {
      writer.writeMessage(1, msg.webhook, yocoWebhook.Webhook._writeMessage);
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateWebhookRequest,
    reader: protoscript.BinaryReader,
  ): UpdateWebhookRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.webhook, yocoWebhook.Webhook._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteWebhookRequest = {
  /**
   * Serializes DeleteWebhookRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteWebhookRequest>): Uint8Array {
    return DeleteWebhookRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteWebhookRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteWebhookRequest {
    return DeleteWebhookRequest._readMessage(
      DeleteWebhookRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteWebhookRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteWebhookRequest>,
  ): DeleteWebhookRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteWebhookRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteWebhookRequest,
    reader: protoscript.BinaryReader,
  ): DeleteWebhookRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListWebhooksRequestJSON = {
  /**
   * Serializes ListWebhooksRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListWebhooksRequest>): string {
    return JSON.stringify(ListWebhooksRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListWebhooksRequest from JSON.
   */
  decode: function (json: string): ListWebhooksRequest {
    return ListWebhooksRequestJSON._readMessage(
      ListWebhooksRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListWebhooksRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListWebhooksRequest>,
  ): ListWebhooksRequest {
    return {
      filter: "",
      pageSize: 0,
      pageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListWebhooksRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    if (msg.pageSize) {
      json["pageSize"] = msg.pageSize;
    }
    if (msg.pageToken) {
      json["pageToken"] = msg.pageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListWebhooksRequest,
    json: any,
  ): ListWebhooksRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    const _pageSize_ = json["pageSize"] ?? json["page_size"];
    if (_pageSize_) {
      msg.pageSize = protoscript.parseNumber(_pageSize_);
    }
    const _pageToken_ = json["pageToken"] ?? json["page_token"];
    if (_pageToken_) {
      msg.pageToken = _pageToken_;
    }
    return msg;
  },
};

export const ListWebhooksResponseJSON = {
  /**
   * Serializes ListWebhooksResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListWebhooksResponse>): string {
    return JSON.stringify(ListWebhooksResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListWebhooksResponse from JSON.
   */
  decode: function (json: string): ListWebhooksResponse {
    return ListWebhooksResponseJSON._readMessage(
      ListWebhooksResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListWebhooksResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListWebhooksResponse>,
  ): ListWebhooksResponse {
    return {
      Webhooks: [],
      total: 0n,
      nextPageToken: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListWebhooksResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Webhooks?.length) {
      json["Webhooks"] = msg.Webhooks.map(
        yocoWebhook.WebhookJSON._writeMessage,
      );
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    if (msg.nextPageToken) {
      json["nextPageToken"] = msg.nextPageToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListWebhooksResponse,
    json: any,
  ): ListWebhooksResponse {
    const _Webhooks_ = json["Webhooks"];
    if (_Webhooks_) {
      for (const item of _Webhooks_) {
        const m = yocoWebhook.WebhookJSON.initialize();
        yocoWebhook.WebhookJSON._readMessage(m, item);
        msg.Webhooks.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    const _nextPageToken_ = json["nextPageToken"] ?? json["next_page_token"];
    if (_nextPageToken_) {
      msg.nextPageToken = _nextPageToken_;
    }
    return msg;
  },
};

export const CreateWebhookRequestJSON = {
  /**
   * Serializes CreateWebhookRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateWebhookRequest>): string {
    return JSON.stringify(CreateWebhookRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateWebhookRequest from JSON.
   */
  decode: function (json: string): CreateWebhookRequest {
    return CreateWebhookRequestJSON._readMessage(
      CreateWebhookRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateWebhookRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateWebhookRequest>,
  ): CreateWebhookRequest {
    return {
      webhookId: "",
      webhook: yocoWebhook.WebhookJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateWebhookRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.webhookId) {
      json["webhookId"] = msg.webhookId;
    }
    if (msg.webhook) {
      const _webhook_ = yocoWebhook.WebhookJSON._writeMessage(msg.webhook);
      if (Object.keys(_webhook_).length > 0) {
        json["webhook"] = _webhook_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateWebhookRequest,
    json: any,
  ): CreateWebhookRequest {
    const _webhookId_ = json["webhookId"] ?? json["webhook_id"];
    if (_webhookId_) {
      msg.webhookId = _webhookId_;
    }
    const _webhook_ = json["webhook"];
    if (_webhook_) {
      yocoWebhook.WebhookJSON._readMessage(msg.webhook, _webhook_);
    }
    return msg;
  },
};

export const GetWebhookRequestJSON = {
  /**
   * Serializes GetWebhookRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetWebhookRequest>): string {
    return JSON.stringify(GetWebhookRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetWebhookRequest from JSON.
   */
  decode: function (json: string): GetWebhookRequest {
    return GetWebhookRequestJSON._readMessage(
      GetWebhookRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetWebhookRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetWebhookRequest>): GetWebhookRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetWebhookRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetWebhookRequest,
    json: any,
  ): GetWebhookRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdateWebhookRequestJSON = {
  /**
   * Serializes UpdateWebhookRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateWebhookRequest>): string {
    return JSON.stringify(UpdateWebhookRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateWebhookRequest from JSON.
   */
  decode: function (json: string): UpdateWebhookRequest {
    return UpdateWebhookRequestJSON._readMessage(
      UpdateWebhookRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateWebhookRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateWebhookRequest>,
  ): UpdateWebhookRequest {
    return {
      webhook: yocoWebhook.WebhookJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateWebhookRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.webhook) {
      const _webhook_ = yocoWebhook.WebhookJSON._writeMessage(msg.webhook);
      if (Object.keys(_webhook_).length > 0) {
        json["webhook"] = _webhook_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateWebhookRequest,
    json: any,
  ): UpdateWebhookRequest {
    const _webhook_ = json["webhook"];
    if (_webhook_) {
      yocoWebhook.WebhookJSON._readMessage(msg.webhook, _webhook_);
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeleteWebhookRequestJSON = {
  /**
   * Serializes DeleteWebhookRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteWebhookRequest>): string {
    return JSON.stringify(DeleteWebhookRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteWebhookRequest from JSON.
   */
  decode: function (json: string): DeleteWebhookRequest {
    return DeleteWebhookRequestJSON._readMessage(
      DeleteWebhookRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteWebhookRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteWebhookRequest>,
  ): DeleteWebhookRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteWebhookRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteWebhookRequest,
    json: any,
  ): DeleteWebhookRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
