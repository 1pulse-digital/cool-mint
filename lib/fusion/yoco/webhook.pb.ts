// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: yoco/webhook.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface Webhook {
  name: string;
  uid: string;
  displayName: string;
  url: string;
  mode: string;
  secret: string;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Webhook = {
  /**
   * Serializes Webhook to protobuf.
   */
  encode: function (msg: PartialDeep<Webhook>): Uint8Array {
    return Webhook._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Webhook from protobuf.
   */
  decode: function (bytes: ByteSource): Webhook {
    return Webhook._readMessage(
      Webhook.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Webhook with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Webhook>): Webhook {
    return {
      name: "",
      uid: "",
      displayName: "",
      url: "",
      mode: "",
      secret: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Webhook>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.uid) {
      writer.writeString(2, msg.uid);
    }
    if (msg.displayName) {
      writer.writeString(3, msg.displayName);
    }
    if (msg.url) {
      writer.writeString(4, msg.url);
    }
    if (msg.mode) {
      writer.writeString(5, msg.mode);
    }
    if (msg.secret) {
      writer.writeString(6, msg.secret);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Webhook,
    reader: protoscript.BinaryReader,
  ): Webhook {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.uid = reader.readString();
          break;
        }
        case 3: {
          msg.displayName = reader.readString();
          break;
        }
        case 4: {
          msg.url = reader.readString();
          break;
        }
        case 5: {
          msg.mode = reader.readString();
          break;
        }
        case 6: {
          msg.secret = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const WebhookJSON = {
  /**
   * Serializes Webhook to JSON.
   */
  encode: function (msg: PartialDeep<Webhook>): string {
    return JSON.stringify(WebhookJSON._writeMessage(msg));
  },

  /**
   * Deserializes Webhook from JSON.
   */
  decode: function (json: string): Webhook {
    return WebhookJSON._readMessage(WebhookJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Webhook with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Webhook>): Webhook {
    return {
      name: "",
      uid: "",
      displayName: "",
      url: "",
      mode: "",
      secret: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Webhook>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.uid) {
      json["uid"] = msg.uid;
    }
    if (msg.displayName) {
      json["displayName"] = msg.displayName;
    }
    if (msg.url) {
      json["url"] = msg.url;
    }
    if (msg.mode) {
      json["mode"] = msg.mode;
    }
    if (msg.secret) {
      json["secret"] = msg.secret;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Webhook, json: any): Webhook {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _uid_ = json["uid"];
    if (_uid_) {
      msg.uid = _uid_;
    }
    const _displayName_ = json["displayName"];
    if (_displayName_) {
      msg.displayName = _displayName_;
    }
    const _url_ = json["url"];
    if (_url_) {
      msg.url = _url_;
    }
    const _mode_ = json["mode"];
    if (_mode_) {
      msg.mode = _mode_;
    }
    const _secret_ = json["secret"];
    if (_secret_) {
      msg.secret = _secret_;
    }
    return msg;
  },
};
