// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: yoco/refund.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface Refund {
  id: string;
  status: string;
  createdDate: string;
  amount: bigint;
  currency: string;
  paymentId: string;
  mode: string;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Refund = {
  /**
   * Serializes Refund to protobuf.
   */
  encode: function (msg: PartialDeep<Refund>): Uint8Array {
    return Refund._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Refund from protobuf.
   */
  decode: function (bytes: ByteSource): Refund {
    return Refund._readMessage(
      Refund.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Refund with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Refund>): Refund {
    return {
      id: "",
      status: "",
      createdDate: "",
      amount: 0n,
      currency: "",
      paymentId: "",
      mode: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Refund>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.status) {
      writer.writeString(2, msg.status);
    }
    if (msg.createdDate) {
      writer.writeString(3, msg.createdDate);
    }
    if (msg.amount) {
      writer.writeInt64String(4, msg.amount.toString() as any);
    }
    if (msg.currency) {
      writer.writeString(5, msg.currency);
    }
    if (msg.paymentId) {
      writer.writeString(6, msg.paymentId);
    }
    if (msg.mode) {
      writer.writeString(7, msg.mode);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Refund,
    reader: protoscript.BinaryReader,
  ): Refund {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.status = reader.readString();
          break;
        }
        case 3: {
          msg.createdDate = reader.readString();
          break;
        }
        case 4: {
          msg.amount = BigInt(reader.readInt64String());
          break;
        }
        case 5: {
          msg.currency = reader.readString();
          break;
        }
        case 6: {
          msg.paymentId = reader.readString();
          break;
        }
        case 7: {
          msg.mode = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const RefundJSON = {
  /**
   * Serializes Refund to JSON.
   */
  encode: function (msg: PartialDeep<Refund>): string {
    return JSON.stringify(RefundJSON._writeMessage(msg));
  },

  /**
   * Deserializes Refund from JSON.
   */
  decode: function (json: string): Refund {
    return RefundJSON._readMessage(RefundJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Refund with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Refund>): Refund {
    return {
      id: "",
      status: "",
      createdDate: "",
      amount: 0n,
      currency: "",
      paymentId: "",
      mode: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Refund>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id;
    }
    if (msg.status) {
      json["status"] = msg.status;
    }
    if (msg.createdDate) {
      json["createdDate"] = msg.createdDate;
    }
    if (msg.amount) {
      json["amount"] = String(msg.amount);
    }
    if (msg.currency) {
      json["currency"] = msg.currency;
    }
    if (msg.paymentId) {
      json["paymentId"] = msg.paymentId;
    }
    if (msg.mode) {
      json["mode"] = msg.mode;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Refund, json: any): Refund {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = _id_;
    }
    const _status_ = json["status"];
    if (_status_) {
      msg.status = _status_;
    }
    const _createdDate_ = json["createdDate"];
    if (_createdDate_) {
      msg.createdDate = _createdDate_;
    }
    const _amount_ = json["amount"];
    if (_amount_) {
      msg.amount = BigInt(_amount_);
    }
    const _currency_ = json["currency"];
    if (_currency_) {
      msg.currency = _currency_;
    }
    const _paymentId_ = json["paymentId"];
    if (_paymentId_) {
      msg.paymentId = _paymentId_;
    }
    const _mode_ = json["mode"];
    if (_mode_) {
      msg.mode = _mode_;
    }
    return msg;
  },
};
