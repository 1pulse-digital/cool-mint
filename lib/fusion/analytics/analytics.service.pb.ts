// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: analytics/analytics.service.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as workshopTourBooking from "../workshop/tourBooking.pb";

//========================================//
//                 Types                  //
//========================================//

export interface TotalRevenueRequest {}

export interface TotalRevenueResponse {
  total: bigint;
  prevTotal: bigint;
  change: string;
}

export interface NumberOfOrdersRequest {}

export interface NumberOfOrdersResponse {
  total: bigint;
  prevTotal: bigint;
  change: string;
}

export interface NumberOfInquiriesRequest {}

export interface NumberOfInquiriesResponse {
  total: bigint;
  prevTotal: bigint;
  change: string;
}

export interface NumberOfToursRequest {}

export interface NumberOfToursResponse {
  total: bigint;
  prevTotal: bigint;
  change: string;
}

export interface SalesOverviewRequest {}

export interface SalesOverviewResponse {
  records: SalesOverviewResponse.Record[];
}

export declare namespace SalesOverviewResponse {
  export interface Record {
    firstName: string;
    lastName: string;
    product: string;
    productDisplayName: string;
    date: string;
    total: bigint;
    orderNumber: bigint;
  }
}

export interface ClassOverviewRequest {}

export interface ClassOverviewResponse {
  classes: ClassOverviewResponse.ClassOverview[];
}

export declare namespace ClassOverviewResponse {
  export interface ClassOverview {
    name: string;
    date: string;
    totalSeats: number;
    numberSold: number;
  }
}

export interface UpcomingToursRequest {}

export interface UpcomingToursResponse {
  tours: workshopTourBooking.TourBooking[];
}

//========================================//
//    AnalyticsService Protobuf Client    //
//========================================//

/**
 * TotalRevenue returns the total revenue for the current month, last month and the percentage increase
 */
export async function TotalRevenue(
  totalRevenueRequest: TotalRevenueRequest,
  config?: ClientConfiguration,
): Promise<TotalRevenueResponse> {
  const response = await PBrequest(
    "/analytics.AnalyticsService/TotalRevenue",
    TotalRevenueRequest.encode(totalRevenueRequest),
    config,
  );
  return TotalRevenueResponse.decode(response);
}

/**
 * NumberOfOrders returns the total number of orders for the current month, last month and the percentage increase
 */
export async function NumberOfOrders(
  numberOfOrdersRequest: NumberOfOrdersRequest,
  config?: ClientConfiguration,
): Promise<NumberOfOrdersResponse> {
  const response = await PBrequest(
    "/analytics.AnalyticsService/NumberOfOrders",
    NumberOfOrdersRequest.encode(numberOfOrdersRequest),
    config,
  );
  return NumberOfOrdersResponse.decode(response);
}

/**
 * NumberOfInquireis returns the total number of inquiries for the current month, last month and the percentage increase
 */
export async function NumberOfInquiries(
  numberOfInquiriesRequest: NumberOfInquiriesRequest,
  config?: ClientConfiguration,
): Promise<NumberOfInquiriesResponse> {
  const response = await PBrequest(
    "/analytics.AnalyticsService/NumberOfInquiries",
    NumberOfInquiriesRequest.encode(numberOfInquiriesRequest),
    config,
  );
  return NumberOfInquiriesResponse.decode(response);
}

/**
 * NumberOfTours returns the total number of tours for the current month, last month and the percentage increase
 */
export async function NumberOfTours(
  numberOfToursRequest: NumberOfToursRequest,
  config?: ClientConfiguration,
): Promise<NumberOfToursResponse> {
  const response = await PBrequest(
    "/analytics.AnalyticsService/NumberOfTours",
    NumberOfToursRequest.encode(numberOfToursRequest),
    config,
  );
  return NumberOfToursResponse.decode(response);
}

/**
 * SalesOverview returns a list of the 5 most recent COMPLETED orders, each record contains:
 * In the case of multiple line items, a response record is returned for each line item
 * - customer name
 * - class name
 * - class display name
 * - date
 * - amount
 * - order number
 */
export async function SalesOverview(
  salesOverviewRequest: SalesOverviewRequest,
  config?: ClientConfiguration,
): Promise<SalesOverviewResponse> {
  const response = await PBrequest(
    "/analytics.AnalyticsService/SalesOverview",
    SalesOverviewRequest.encode(salesOverviewRequest),
    config,
  );
  return SalesOverviewResponse.decode(response);
}

/**
 * ClassOverview returns a list of all classes, each record contains:
 * - class name
 * - date
 * - total seats
 * - number sold
 * - number available
 */
export async function ClassOverview(
  classOverviewRequest: ClassOverviewRequest,
  config?: ClientConfiguration,
): Promise<ClassOverviewResponse> {
  const response = await PBrequest(
    "/analytics.AnalyticsService/ClassOverview",
    ClassOverviewRequest.encode(classOverviewRequest),
    config,
  );
  return ClassOverviewResponse.decode(response);
}

/**
 * UpcomingTours returns a list of all upcoming tours, each record contains:
 * - contact name
 * - date & time
 * - contact details
 */
export async function UpcomingTours(
  upcomingToursRequest: UpcomingToursRequest,
  config?: ClientConfiguration,
): Promise<UpcomingToursResponse> {
  const response = await PBrequest(
    "/analytics.AnalyticsService/UpcomingTours",
    UpcomingToursRequest.encode(upcomingToursRequest),
    config,
  );
  return UpcomingToursResponse.decode(response);
}

//========================================//
//      AnalyticsService JSON Client      //
//========================================//

/**
 * TotalRevenue returns the total revenue for the current month, last month and the percentage increase
 */
export async function TotalRevenueJSON(
  totalRevenueRequest: TotalRevenueRequest,
  config?: ClientConfiguration,
): Promise<TotalRevenueResponse> {
  const response = await JSONrequest(
    "/analytics.AnalyticsService/TotalRevenue",
    TotalRevenueRequestJSON.encode(totalRevenueRequest),
    config,
  );
  return TotalRevenueResponseJSON.decode(response);
}

/**
 * NumberOfOrders returns the total number of orders for the current month, last month and the percentage increase
 */
export async function NumberOfOrdersJSON(
  numberOfOrdersRequest: NumberOfOrdersRequest,
  config?: ClientConfiguration,
): Promise<NumberOfOrdersResponse> {
  const response = await JSONrequest(
    "/analytics.AnalyticsService/NumberOfOrders",
    NumberOfOrdersRequestJSON.encode(numberOfOrdersRequest),
    config,
  );
  return NumberOfOrdersResponseJSON.decode(response);
}

/**
 * NumberOfInquireis returns the total number of inquiries for the current month, last month and the percentage increase
 */
export async function NumberOfInquiriesJSON(
  numberOfInquiriesRequest: NumberOfInquiriesRequest,
  config?: ClientConfiguration,
): Promise<NumberOfInquiriesResponse> {
  const response = await JSONrequest(
    "/analytics.AnalyticsService/NumberOfInquiries",
    NumberOfInquiriesRequestJSON.encode(numberOfInquiriesRequest),
    config,
  );
  return NumberOfInquiriesResponseJSON.decode(response);
}

/**
 * NumberOfTours returns the total number of tours for the current month, last month and the percentage increase
 */
export async function NumberOfToursJSON(
  numberOfToursRequest: NumberOfToursRequest,
  config?: ClientConfiguration,
): Promise<NumberOfToursResponse> {
  const response = await JSONrequest(
    "/analytics.AnalyticsService/NumberOfTours",
    NumberOfToursRequestJSON.encode(numberOfToursRequest),
    config,
  );
  return NumberOfToursResponseJSON.decode(response);
}

/**
 * SalesOverview returns a list of the 5 most recent COMPLETED orders, each record contains:
 * In the case of multiple line items, a response record is returned for each line item
 * - customer name
 * - class name
 * - class display name
 * - date
 * - amount
 * - order number
 */
export async function SalesOverviewJSON(
  salesOverviewRequest: SalesOverviewRequest,
  config?: ClientConfiguration,
): Promise<SalesOverviewResponse> {
  const response = await JSONrequest(
    "/analytics.AnalyticsService/SalesOverview",
    SalesOverviewRequestJSON.encode(salesOverviewRequest),
    config,
  );
  return SalesOverviewResponseJSON.decode(response);
}

/**
 * ClassOverview returns a list of all classes, each record contains:
 * - class name
 * - date
 * - total seats
 * - number sold
 * - number available
 */
export async function ClassOverviewJSON(
  classOverviewRequest: ClassOverviewRequest,
  config?: ClientConfiguration,
): Promise<ClassOverviewResponse> {
  const response = await JSONrequest(
    "/analytics.AnalyticsService/ClassOverview",
    ClassOverviewRequestJSON.encode(classOverviewRequest),
    config,
  );
  return ClassOverviewResponseJSON.decode(response);
}

/**
 * UpcomingTours returns a list of all upcoming tours, each record contains:
 * - contact name
 * - date & time
 * - contact details
 */
export async function UpcomingToursJSON(
  upcomingToursRequest: UpcomingToursRequest,
  config?: ClientConfiguration,
): Promise<UpcomingToursResponse> {
  const response = await JSONrequest(
    "/analytics.AnalyticsService/UpcomingTours",
    UpcomingToursRequestJSON.encode(upcomingToursRequest),
    config,
  );
  return UpcomingToursResponseJSON.decode(response);
}

//========================================//
//            AnalyticsService            //
//========================================//

export interface AnalyticsService<Context = unknown> {
  /**
   * TotalRevenue returns the total revenue for the current month, last month and the percentage increase
   */
  TotalRevenue: (
    totalRevenueRequest: TotalRevenueRequest,
    context: Context,
  ) => Promise<TotalRevenueResponse> | TotalRevenueResponse;
  /**
   * NumberOfOrders returns the total number of orders for the current month, last month and the percentage increase
   */
  NumberOfOrders: (
    numberOfOrdersRequest: NumberOfOrdersRequest,
    context: Context,
  ) => Promise<NumberOfOrdersResponse> | NumberOfOrdersResponse;
  /**
   * NumberOfInquireis returns the total number of inquiries for the current month, last month and the percentage increase
   */
  NumberOfInquiries: (
    numberOfInquiriesRequest: NumberOfInquiriesRequest,
    context: Context,
  ) => Promise<NumberOfInquiriesResponse> | NumberOfInquiriesResponse;
  /**
   * NumberOfTours returns the total number of tours for the current month, last month and the percentage increase
   */
  NumberOfTours: (
    numberOfToursRequest: NumberOfToursRequest,
    context: Context,
  ) => Promise<NumberOfToursResponse> | NumberOfToursResponse;
  /**
   * SalesOverview returns a list of the 5 most recent COMPLETED orders, each record contains:
   * In the case of multiple line items, a response record is returned for each line item
   * - customer name
   * - class name
   * - class display name
   * - date
   * - amount
   * - order number
   */
  SalesOverview: (
    salesOverviewRequest: SalesOverviewRequest,
    context: Context,
  ) => Promise<SalesOverviewResponse> | SalesOverviewResponse;
  /**
   * ClassOverview returns a list of all classes, each record contains:
   * - class name
   * - date
   * - total seats
   * - number sold
   * - number available
   */
  ClassOverview: (
    classOverviewRequest: ClassOverviewRequest,
    context: Context,
  ) => Promise<ClassOverviewResponse> | ClassOverviewResponse;
  /**
   * UpcomingTours returns a list of all upcoming tours, each record contains:
   * - contact name
   * - date & time
   * - contact details
   */
  UpcomingTours: (
    upcomingToursRequest: UpcomingToursRequest,
    context: Context,
  ) => Promise<UpcomingToursResponse> | UpcomingToursResponse;
}

export function createAnalyticsService<Context>(
  service: AnalyticsService<Context>,
) {
  return {
    name: "analytics.AnalyticsService",
    methods: {
      TotalRevenue: {
        name: "TotalRevenue",
        handler: service.TotalRevenue,
        input: { protobuf: TotalRevenueRequest, json: TotalRevenueRequestJSON },
        output: {
          protobuf: TotalRevenueResponse,
          json: TotalRevenueResponseJSON,
        },
      },
      NumberOfOrders: {
        name: "NumberOfOrders",
        handler: service.NumberOfOrders,
        input: {
          protobuf: NumberOfOrdersRequest,
          json: NumberOfOrdersRequestJSON,
        },
        output: {
          protobuf: NumberOfOrdersResponse,
          json: NumberOfOrdersResponseJSON,
        },
      },
      NumberOfInquiries: {
        name: "NumberOfInquiries",
        handler: service.NumberOfInquiries,
        input: {
          protobuf: NumberOfInquiriesRequest,
          json: NumberOfInquiriesRequestJSON,
        },
        output: {
          protobuf: NumberOfInquiriesResponse,
          json: NumberOfInquiriesResponseJSON,
        },
      },
      NumberOfTours: {
        name: "NumberOfTours",
        handler: service.NumberOfTours,
        input: {
          protobuf: NumberOfToursRequest,
          json: NumberOfToursRequestJSON,
        },
        output: {
          protobuf: NumberOfToursResponse,
          json: NumberOfToursResponseJSON,
        },
      },
      SalesOverview: {
        name: "SalesOverview",
        handler: service.SalesOverview,
        input: {
          protobuf: SalesOverviewRequest,
          json: SalesOverviewRequestJSON,
        },
        output: {
          protobuf: SalesOverviewResponse,
          json: SalesOverviewResponseJSON,
        },
      },
      ClassOverview: {
        name: "ClassOverview",
        handler: service.ClassOverview,
        input: {
          protobuf: ClassOverviewRequest,
          json: ClassOverviewRequestJSON,
        },
        output: {
          protobuf: ClassOverviewResponse,
          json: ClassOverviewResponseJSON,
        },
      },
      UpcomingTours: {
        name: "UpcomingTours",
        handler: service.UpcomingTours,
        input: {
          protobuf: UpcomingToursRequest,
          json: UpcomingToursRequestJSON,
        },
        output: {
          protobuf: UpcomingToursResponse,
          json: UpcomingToursResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const TotalRevenueRequest = {
  /**
   * Serializes TotalRevenueRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<TotalRevenueRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes TotalRevenueRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): TotalRevenueRequest {
    return {};
  },

  /**
   * Initializes TotalRevenueRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<TotalRevenueRequest>,
  ): TotalRevenueRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<TotalRevenueRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: TotalRevenueRequest,
    _reader: protoscript.BinaryReader,
  ): TotalRevenueRequest {
    return _msg;
  },
};

export const TotalRevenueResponse = {
  /**
   * Serializes TotalRevenueResponse to protobuf.
   */
  encode: function (msg: PartialDeep<TotalRevenueResponse>): Uint8Array {
    return TotalRevenueResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes TotalRevenueResponse from protobuf.
   */
  decode: function (bytes: ByteSource): TotalRevenueResponse {
    return TotalRevenueResponse._readMessage(
      TotalRevenueResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes TotalRevenueResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<TotalRevenueResponse>,
  ): TotalRevenueResponse {
    return {
      total: 0n,
      prevTotal: 0n,
      change: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TotalRevenueResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.total) {
      writer.writeInt64String(1, msg.total.toString() as any);
    }
    if (msg.prevTotal) {
      writer.writeInt64String(2, msg.prevTotal.toString() as any);
    }
    if (msg.change) {
      writer.writeString(3, msg.change);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TotalRevenueResponse,
    reader: protoscript.BinaryReader,
  ): TotalRevenueResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.prevTotal = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.change = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const NumberOfOrdersRequest = {
  /**
   * Serializes NumberOfOrdersRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<NumberOfOrdersRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes NumberOfOrdersRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): NumberOfOrdersRequest {
    return {};
  },

  /**
   * Initializes NumberOfOrdersRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<NumberOfOrdersRequest>,
  ): NumberOfOrdersRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<NumberOfOrdersRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: NumberOfOrdersRequest,
    _reader: protoscript.BinaryReader,
  ): NumberOfOrdersRequest {
    return _msg;
  },
};

export const NumberOfOrdersResponse = {
  /**
   * Serializes NumberOfOrdersResponse to protobuf.
   */
  encode: function (msg: PartialDeep<NumberOfOrdersResponse>): Uint8Array {
    return NumberOfOrdersResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes NumberOfOrdersResponse from protobuf.
   */
  decode: function (bytes: ByteSource): NumberOfOrdersResponse {
    return NumberOfOrdersResponse._readMessage(
      NumberOfOrdersResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes NumberOfOrdersResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<NumberOfOrdersResponse>,
  ): NumberOfOrdersResponse {
    return {
      total: 0n,
      prevTotal: 0n,
      change: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<NumberOfOrdersResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.total) {
      writer.writeInt64String(1, msg.total.toString() as any);
    }
    if (msg.prevTotal) {
      writer.writeInt64String(2, msg.prevTotal.toString() as any);
    }
    if (msg.change) {
      writer.writeString(3, msg.change);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NumberOfOrdersResponse,
    reader: protoscript.BinaryReader,
  ): NumberOfOrdersResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.prevTotal = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.change = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const NumberOfInquiriesRequest = {
  /**
   * Serializes NumberOfInquiriesRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<NumberOfInquiriesRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes NumberOfInquiriesRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): NumberOfInquiriesRequest {
    return {};
  },

  /**
   * Initializes NumberOfInquiriesRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<NumberOfInquiriesRequest>,
  ): NumberOfInquiriesRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<NumberOfInquiriesRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: NumberOfInquiriesRequest,
    _reader: protoscript.BinaryReader,
  ): NumberOfInquiriesRequest {
    return _msg;
  },
};

export const NumberOfInquiriesResponse = {
  /**
   * Serializes NumberOfInquiriesResponse to protobuf.
   */
  encode: function (msg: PartialDeep<NumberOfInquiriesResponse>): Uint8Array {
    return NumberOfInquiriesResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes NumberOfInquiriesResponse from protobuf.
   */
  decode: function (bytes: ByteSource): NumberOfInquiriesResponse {
    return NumberOfInquiriesResponse._readMessage(
      NumberOfInquiriesResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes NumberOfInquiriesResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<NumberOfInquiriesResponse>,
  ): NumberOfInquiriesResponse {
    return {
      total: 0n,
      prevTotal: 0n,
      change: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<NumberOfInquiriesResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.total) {
      writer.writeInt64String(1, msg.total.toString() as any);
    }
    if (msg.prevTotal) {
      writer.writeInt64String(2, msg.prevTotal.toString() as any);
    }
    if (msg.change) {
      writer.writeString(3, msg.change);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NumberOfInquiriesResponse,
    reader: protoscript.BinaryReader,
  ): NumberOfInquiriesResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.prevTotal = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.change = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const NumberOfToursRequest = {
  /**
   * Serializes NumberOfToursRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<NumberOfToursRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes NumberOfToursRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): NumberOfToursRequest {
    return {};
  },

  /**
   * Initializes NumberOfToursRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<NumberOfToursRequest>,
  ): NumberOfToursRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<NumberOfToursRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: NumberOfToursRequest,
    _reader: protoscript.BinaryReader,
  ): NumberOfToursRequest {
    return _msg;
  },
};

export const NumberOfToursResponse = {
  /**
   * Serializes NumberOfToursResponse to protobuf.
   */
  encode: function (msg: PartialDeep<NumberOfToursResponse>): Uint8Array {
    return NumberOfToursResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes NumberOfToursResponse from protobuf.
   */
  decode: function (bytes: ByteSource): NumberOfToursResponse {
    return NumberOfToursResponse._readMessage(
      NumberOfToursResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes NumberOfToursResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<NumberOfToursResponse>,
  ): NumberOfToursResponse {
    return {
      total: 0n,
      prevTotal: 0n,
      change: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<NumberOfToursResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.total) {
      writer.writeInt64String(1, msg.total.toString() as any);
    }
    if (msg.prevTotal) {
      writer.writeInt64String(2, msg.prevTotal.toString() as any);
    }
    if (msg.change) {
      writer.writeString(3, msg.change);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NumberOfToursResponse,
    reader: protoscript.BinaryReader,
  ): NumberOfToursResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.prevTotal = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.change = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SalesOverviewRequest = {
  /**
   * Serializes SalesOverviewRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<SalesOverviewRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes SalesOverviewRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): SalesOverviewRequest {
    return {};
  },

  /**
   * Initializes SalesOverviewRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SalesOverviewRequest>,
  ): SalesOverviewRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<SalesOverviewRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: SalesOverviewRequest,
    _reader: protoscript.BinaryReader,
  ): SalesOverviewRequest {
    return _msg;
  },
};

export const SalesOverviewResponse = {
  /**
   * Serializes SalesOverviewResponse to protobuf.
   */
  encode: function (msg: PartialDeep<SalesOverviewResponse>): Uint8Array {
    return SalesOverviewResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SalesOverviewResponse from protobuf.
   */
  decode: function (bytes: ByteSource): SalesOverviewResponse {
    return SalesOverviewResponse._readMessage(
      SalesOverviewResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SalesOverviewResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SalesOverviewResponse>,
  ): SalesOverviewResponse {
    return {
      records: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SalesOverviewResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.records?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.records as any,
        SalesOverviewResponse.Record._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SalesOverviewResponse,
    reader: protoscript.BinaryReader,
  ): SalesOverviewResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = SalesOverviewResponse.Record.initialize();
          reader.readMessage(m, SalesOverviewResponse.Record._readMessage);
          msg.records.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Record: {
    /**
     * Serializes SalesOverviewResponse.Record to protobuf.
     */
    encode: function (
      msg: PartialDeep<SalesOverviewResponse.Record>,
    ): Uint8Array {
      return SalesOverviewResponse.Record._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes SalesOverviewResponse.Record from protobuf.
     */
    decode: function (bytes: ByteSource): SalesOverviewResponse.Record {
      return SalesOverviewResponse.Record._readMessage(
        SalesOverviewResponse.Record.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes SalesOverviewResponse.Record with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<SalesOverviewResponse.Record>,
    ): SalesOverviewResponse.Record {
      return {
        firstName: "",
        lastName: "",
        product: "",
        productDisplayName: "",
        date: "",
        total: 0n,
        orderNumber: 0n,
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<SalesOverviewResponse.Record>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.firstName) {
        writer.writeString(1, msg.firstName);
      }
      if (msg.lastName) {
        writer.writeString(2, msg.lastName);
      }
      if (msg.product) {
        writer.writeString(3, msg.product);
      }
      if (msg.productDisplayName) {
        writer.writeString(4, msg.productDisplayName);
      }
      if (msg.date) {
        writer.writeString(5, msg.date);
      }
      if (msg.total) {
        writer.writeInt64String(6, msg.total.toString() as any);
      }
      if (msg.orderNumber) {
        writer.writeInt64String(7, msg.orderNumber.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: SalesOverviewResponse.Record,
      reader: protoscript.BinaryReader,
    ): SalesOverviewResponse.Record {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.firstName = reader.readString();
            break;
          }
          case 2: {
            msg.lastName = reader.readString();
            break;
          }
          case 3: {
            msg.product = reader.readString();
            break;
          }
          case 4: {
            msg.productDisplayName = reader.readString();
            break;
          }
          case 5: {
            msg.date = reader.readString();
            break;
          }
          case 6: {
            msg.total = BigInt(reader.readInt64String());
            break;
          }
          case 7: {
            msg.orderNumber = BigInt(reader.readInt64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const ClassOverviewRequest = {
  /**
   * Serializes ClassOverviewRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<ClassOverviewRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes ClassOverviewRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): ClassOverviewRequest {
    return {};
  },

  /**
   * Initializes ClassOverviewRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClassOverviewRequest>,
  ): ClassOverviewRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ClassOverviewRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: ClassOverviewRequest,
    _reader: protoscript.BinaryReader,
  ): ClassOverviewRequest {
    return _msg;
  },
};

export const ClassOverviewResponse = {
  /**
   * Serializes ClassOverviewResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ClassOverviewResponse>): Uint8Array {
    return ClassOverviewResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ClassOverviewResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ClassOverviewResponse {
    return ClassOverviewResponse._readMessage(
      ClassOverviewResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ClassOverviewResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClassOverviewResponse>,
  ): ClassOverviewResponse {
    return {
      classes: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ClassOverviewResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.classes?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.classes as any,
        ClassOverviewResponse.ClassOverview._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClassOverviewResponse,
    reader: protoscript.BinaryReader,
  ): ClassOverviewResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = ClassOverviewResponse.ClassOverview.initialize();
          reader.readMessage(
            m,
            ClassOverviewResponse.ClassOverview._readMessage,
          );
          msg.classes.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  ClassOverview: {
    /**
     * Serializes ClassOverviewResponse.ClassOverview to protobuf.
     */
    encode: function (
      msg: PartialDeep<ClassOverviewResponse.ClassOverview>,
    ): Uint8Array {
      return ClassOverviewResponse.ClassOverview._writeMessage(
        msg,
        new protoscript.BinaryWriter(),
      ).getResultBuffer();
    },

    /**
     * Deserializes ClassOverviewResponse.ClassOverview from protobuf.
     */
    decode: function (bytes: ByteSource): ClassOverviewResponse.ClassOverview {
      return ClassOverviewResponse.ClassOverview._readMessage(
        ClassOverviewResponse.ClassOverview.initialize(),
        new protoscript.BinaryReader(bytes),
      );
    },

    /**
     * Initializes ClassOverviewResponse.ClassOverview with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<ClassOverviewResponse.ClassOverview>,
    ): ClassOverviewResponse.ClassOverview {
      return {
        name: "",
        date: "",
        totalSeats: 0,
        numberSold: 0,
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<ClassOverviewResponse.ClassOverview>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.name) {
        writer.writeString(1, msg.name);
      }
      if (msg.date) {
        writer.writeString(2, msg.date);
      }
      if (msg.totalSeats) {
        writer.writeInt32(3, msg.totalSeats);
      }
      if (msg.numberSold) {
        writer.writeInt32(4, msg.numberSold);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: ClassOverviewResponse.ClassOverview,
      reader: protoscript.BinaryReader,
    ): ClassOverviewResponse.ClassOverview {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.name = reader.readString();
            break;
          }
          case 2: {
            msg.date = reader.readString();
            break;
          }
          case 3: {
            msg.totalSeats = reader.readInt32();
            break;
          }
          case 4: {
            msg.numberSold = reader.readInt32();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const UpcomingToursRequest = {
  /**
   * Serializes UpcomingToursRequest to protobuf.
   */
  encode: function (_msg?: PartialDeep<UpcomingToursRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes UpcomingToursRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): UpcomingToursRequest {
    return {};
  },

  /**
   * Initializes UpcomingToursRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpcomingToursRequest>,
  ): UpcomingToursRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<UpcomingToursRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: UpcomingToursRequest,
    _reader: protoscript.BinaryReader,
  ): UpcomingToursRequest {
    return _msg;
  },
};

export const UpcomingToursResponse = {
  /**
   * Serializes UpcomingToursResponse to protobuf.
   */
  encode: function (msg: PartialDeep<UpcomingToursResponse>): Uint8Array {
    return UpcomingToursResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpcomingToursResponse from protobuf.
   */
  decode: function (bytes: ByteSource): UpcomingToursResponse {
    return UpcomingToursResponse._readMessage(
      UpcomingToursResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpcomingToursResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpcomingToursResponse>,
  ): UpcomingToursResponse {
    return {
      tours: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpcomingToursResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.tours?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.tours as any,
        workshopTourBooking.TourBooking._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpcomingToursResponse,
    reader: protoscript.BinaryReader,
  ): UpcomingToursResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = workshopTourBooking.TourBooking.initialize();
          reader.readMessage(m, workshopTourBooking.TourBooking._readMessage);
          msg.tours.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const TotalRevenueRequestJSON = {
  /**
   * Serializes TotalRevenueRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<TotalRevenueRequest>): string {
    return "{}";
  },

  /**
   * Deserializes TotalRevenueRequest from JSON.
   */
  decode: function (_json?: string): TotalRevenueRequest {
    return {};
  },

  /**
   * Initializes TotalRevenueRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<TotalRevenueRequest>,
  ): TotalRevenueRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<TotalRevenueRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TotalRevenueRequest,
    _json: any,
  ): TotalRevenueRequest {
    return msg;
  },
};

export const TotalRevenueResponseJSON = {
  /**
   * Serializes TotalRevenueResponse to JSON.
   */
  encode: function (msg: PartialDeep<TotalRevenueResponse>): string {
    return JSON.stringify(TotalRevenueResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes TotalRevenueResponse from JSON.
   */
  decode: function (json: string): TotalRevenueResponse {
    return TotalRevenueResponseJSON._readMessage(
      TotalRevenueResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes TotalRevenueResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<TotalRevenueResponse>,
  ): TotalRevenueResponse {
    return {
      total: 0n,
      prevTotal: 0n,
      change: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<TotalRevenueResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    if (msg.prevTotal) {
      json["prevTotal"] = String(msg.prevTotal);
    }
    if (msg.change) {
      json["change"] = msg.change;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: TotalRevenueResponse,
    json: any,
  ): TotalRevenueResponse {
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    const _prevTotal_ = json["prevTotal"] ?? json["prev_total"];
    if (_prevTotal_) {
      msg.prevTotal = BigInt(_prevTotal_);
    }
    const _change_ = json["change"];
    if (_change_) {
      msg.change = _change_;
    }
    return msg;
  },
};

export const NumberOfOrdersRequestJSON = {
  /**
   * Serializes NumberOfOrdersRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<NumberOfOrdersRequest>): string {
    return "{}";
  },

  /**
   * Deserializes NumberOfOrdersRequest from JSON.
   */
  decode: function (_json?: string): NumberOfOrdersRequest {
    return {};
  },

  /**
   * Initializes NumberOfOrdersRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<NumberOfOrdersRequest>,
  ): NumberOfOrdersRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<NumberOfOrdersRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NumberOfOrdersRequest,
    _json: any,
  ): NumberOfOrdersRequest {
    return msg;
  },
};

export const NumberOfOrdersResponseJSON = {
  /**
   * Serializes NumberOfOrdersResponse to JSON.
   */
  encode: function (msg: PartialDeep<NumberOfOrdersResponse>): string {
    return JSON.stringify(NumberOfOrdersResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes NumberOfOrdersResponse from JSON.
   */
  decode: function (json: string): NumberOfOrdersResponse {
    return NumberOfOrdersResponseJSON._readMessage(
      NumberOfOrdersResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes NumberOfOrdersResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<NumberOfOrdersResponse>,
  ): NumberOfOrdersResponse {
    return {
      total: 0n,
      prevTotal: 0n,
      change: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<NumberOfOrdersResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    if (msg.prevTotal) {
      json["prevTotal"] = String(msg.prevTotal);
    }
    if (msg.change) {
      json["change"] = msg.change;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NumberOfOrdersResponse,
    json: any,
  ): NumberOfOrdersResponse {
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    const _prevTotal_ = json["prevTotal"] ?? json["prev_total"];
    if (_prevTotal_) {
      msg.prevTotal = BigInt(_prevTotal_);
    }
    const _change_ = json["change"];
    if (_change_) {
      msg.change = _change_;
    }
    return msg;
  },
};

export const NumberOfInquiriesRequestJSON = {
  /**
   * Serializes NumberOfInquiriesRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<NumberOfInquiriesRequest>): string {
    return "{}";
  },

  /**
   * Deserializes NumberOfInquiriesRequest from JSON.
   */
  decode: function (_json?: string): NumberOfInquiriesRequest {
    return {};
  },

  /**
   * Initializes NumberOfInquiriesRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<NumberOfInquiriesRequest>,
  ): NumberOfInquiriesRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<NumberOfInquiriesRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NumberOfInquiriesRequest,
    _json: any,
  ): NumberOfInquiriesRequest {
    return msg;
  },
};

export const NumberOfInquiriesResponseJSON = {
  /**
   * Serializes NumberOfInquiriesResponse to JSON.
   */
  encode: function (msg: PartialDeep<NumberOfInquiriesResponse>): string {
    return JSON.stringify(NumberOfInquiriesResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes NumberOfInquiriesResponse from JSON.
   */
  decode: function (json: string): NumberOfInquiriesResponse {
    return NumberOfInquiriesResponseJSON._readMessage(
      NumberOfInquiriesResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes NumberOfInquiriesResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<NumberOfInquiriesResponse>,
  ): NumberOfInquiriesResponse {
    return {
      total: 0n,
      prevTotal: 0n,
      change: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<NumberOfInquiriesResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    if (msg.prevTotal) {
      json["prevTotal"] = String(msg.prevTotal);
    }
    if (msg.change) {
      json["change"] = msg.change;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NumberOfInquiriesResponse,
    json: any,
  ): NumberOfInquiriesResponse {
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    const _prevTotal_ = json["prevTotal"] ?? json["prev_total"];
    if (_prevTotal_) {
      msg.prevTotal = BigInt(_prevTotal_);
    }
    const _change_ = json["change"];
    if (_change_) {
      msg.change = _change_;
    }
    return msg;
  },
};

export const NumberOfToursRequestJSON = {
  /**
   * Serializes NumberOfToursRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<NumberOfToursRequest>): string {
    return "{}";
  },

  /**
   * Deserializes NumberOfToursRequest from JSON.
   */
  decode: function (_json?: string): NumberOfToursRequest {
    return {};
  },

  /**
   * Initializes NumberOfToursRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<NumberOfToursRequest>,
  ): NumberOfToursRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<NumberOfToursRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NumberOfToursRequest,
    _json: any,
  ): NumberOfToursRequest {
    return msg;
  },
};

export const NumberOfToursResponseJSON = {
  /**
   * Serializes NumberOfToursResponse to JSON.
   */
  encode: function (msg: PartialDeep<NumberOfToursResponse>): string {
    return JSON.stringify(NumberOfToursResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes NumberOfToursResponse from JSON.
   */
  decode: function (json: string): NumberOfToursResponse {
    return NumberOfToursResponseJSON._readMessage(
      NumberOfToursResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes NumberOfToursResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<NumberOfToursResponse>,
  ): NumberOfToursResponse {
    return {
      total: 0n,
      prevTotal: 0n,
      change: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<NumberOfToursResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    if (msg.prevTotal) {
      json["prevTotal"] = String(msg.prevTotal);
    }
    if (msg.change) {
      json["change"] = msg.change;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: NumberOfToursResponse,
    json: any,
  ): NumberOfToursResponse {
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    const _prevTotal_ = json["prevTotal"] ?? json["prev_total"];
    if (_prevTotal_) {
      msg.prevTotal = BigInt(_prevTotal_);
    }
    const _change_ = json["change"];
    if (_change_) {
      msg.change = _change_;
    }
    return msg;
  },
};

export const SalesOverviewRequestJSON = {
  /**
   * Serializes SalesOverviewRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<SalesOverviewRequest>): string {
    return "{}";
  },

  /**
   * Deserializes SalesOverviewRequest from JSON.
   */
  decode: function (_json?: string): SalesOverviewRequest {
    return {};
  },

  /**
   * Initializes SalesOverviewRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SalesOverviewRequest>,
  ): SalesOverviewRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<SalesOverviewRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SalesOverviewRequest,
    _json: any,
  ): SalesOverviewRequest {
    return msg;
  },
};

export const SalesOverviewResponseJSON = {
  /**
   * Serializes SalesOverviewResponse to JSON.
   */
  encode: function (msg: PartialDeep<SalesOverviewResponse>): string {
    return JSON.stringify(SalesOverviewResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes SalesOverviewResponse from JSON.
   */
  decode: function (json: string): SalesOverviewResponse {
    return SalesOverviewResponseJSON._readMessage(
      SalesOverviewResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SalesOverviewResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<SalesOverviewResponse>,
  ): SalesOverviewResponse {
    return {
      records: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SalesOverviewResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.records?.length) {
      json["records"] = msg.records.map(
        SalesOverviewResponseJSON.Record._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SalesOverviewResponse,
    json: any,
  ): SalesOverviewResponse {
    const _records_ = json["records"];
    if (_records_) {
      for (const item of _records_) {
        const m = SalesOverviewResponseJSON.Record.initialize();
        SalesOverviewResponseJSON.Record._readMessage(m, item);
        msg.records.push(m);
      }
    }
    return msg;
  },

  Record: {
    /**
     * Serializes SalesOverviewResponse.Record to JSON.
     */
    encode: function (msg: PartialDeep<SalesOverviewResponse.Record>): string {
      return JSON.stringify(
        SalesOverviewResponseJSON.Record._writeMessage(msg),
      );
    },

    /**
     * Deserializes SalesOverviewResponse.Record from JSON.
     */
    decode: function (json: string): SalesOverviewResponse.Record {
      return SalesOverviewResponseJSON.Record._readMessage(
        SalesOverviewResponseJSON.Record.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes SalesOverviewResponse.Record with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<SalesOverviewResponse.Record>,
    ): SalesOverviewResponse.Record {
      return {
        firstName: "",
        lastName: "",
        product: "",
        productDisplayName: "",
        date: "",
        total: 0n,
        orderNumber: 0n,
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<SalesOverviewResponse.Record>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.firstName) {
        json["firstName"] = msg.firstName;
      }
      if (msg.lastName) {
        json["lastName"] = msg.lastName;
      }
      if (msg.product) {
        json["product"] = msg.product;
      }
      if (msg.productDisplayName) {
        json["productDisplayName"] = msg.productDisplayName;
      }
      if (msg.date) {
        json["date"] = msg.date;
      }
      if (msg.total) {
        json["total"] = String(msg.total);
      }
      if (msg.orderNumber) {
        json["orderNumber"] = String(msg.orderNumber);
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: SalesOverviewResponse.Record,
      json: any,
    ): SalesOverviewResponse.Record {
      const _firstName_ = json["firstName"] ?? json["first_name"];
      if (_firstName_) {
        msg.firstName = _firstName_;
      }
      const _lastName_ = json["lastName"] ?? json["last_name"];
      if (_lastName_) {
        msg.lastName = _lastName_;
      }
      const _product_ = json["product"];
      if (_product_) {
        msg.product = _product_;
      }
      const _productDisplayName_ =
        json["productDisplayName"] ?? json["product_display_name"];
      if (_productDisplayName_) {
        msg.productDisplayName = _productDisplayName_;
      }
      const _date_ = json["date"];
      if (_date_) {
        msg.date = _date_;
      }
      const _total_ = json["total"];
      if (_total_) {
        msg.total = BigInt(_total_);
      }
      const _orderNumber_ = json["orderNumber"] ?? json["order_number"];
      if (_orderNumber_) {
        msg.orderNumber = BigInt(_orderNumber_);
      }
      return msg;
    },
  },
};

export const ClassOverviewRequestJSON = {
  /**
   * Serializes ClassOverviewRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<ClassOverviewRequest>): string {
    return "{}";
  },

  /**
   * Deserializes ClassOverviewRequest from JSON.
   */
  decode: function (_json?: string): ClassOverviewRequest {
    return {};
  },

  /**
   * Initializes ClassOverviewRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClassOverviewRequest>,
  ): ClassOverviewRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<ClassOverviewRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClassOverviewRequest,
    _json: any,
  ): ClassOverviewRequest {
    return msg;
  },
};

export const ClassOverviewResponseJSON = {
  /**
   * Serializes ClassOverviewResponse to JSON.
   */
  encode: function (msg: PartialDeep<ClassOverviewResponse>): string {
    return JSON.stringify(ClassOverviewResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ClassOverviewResponse from JSON.
   */
  decode: function (json: string): ClassOverviewResponse {
    return ClassOverviewResponseJSON._readMessage(
      ClassOverviewResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ClassOverviewResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ClassOverviewResponse>,
  ): ClassOverviewResponse {
    return {
      classes: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ClassOverviewResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.classes?.length) {
      json["classes"] = msg.classes.map(
        ClassOverviewResponseJSON.ClassOverview._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ClassOverviewResponse,
    json: any,
  ): ClassOverviewResponse {
    const _classes_ = json["classes"];
    if (_classes_) {
      for (const item of _classes_) {
        const m = ClassOverviewResponseJSON.ClassOverview.initialize();
        ClassOverviewResponseJSON.ClassOverview._readMessage(m, item);
        msg.classes.push(m);
      }
    }
    return msg;
  },

  ClassOverview: {
    /**
     * Serializes ClassOverviewResponse.ClassOverview to JSON.
     */
    encode: function (
      msg: PartialDeep<ClassOverviewResponse.ClassOverview>,
    ): string {
      return JSON.stringify(
        ClassOverviewResponseJSON.ClassOverview._writeMessage(msg),
      );
    },

    /**
     * Deserializes ClassOverviewResponse.ClassOverview from JSON.
     */
    decode: function (json: string): ClassOverviewResponse.ClassOverview {
      return ClassOverviewResponseJSON.ClassOverview._readMessage(
        ClassOverviewResponseJSON.ClassOverview.initialize(),
        JSON.parse(json),
      );
    },

    /**
     * Initializes ClassOverviewResponse.ClassOverview with all fields set to their default value.
     */
    initialize: function (
      msg?: Partial<ClassOverviewResponse.ClassOverview>,
    ): ClassOverviewResponse.ClassOverview {
      return {
        name: "",
        date: "",
        totalSeats: 0,
        numberSold: 0,
        ...msg,
      };
    },

    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<ClassOverviewResponse.ClassOverview>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.name) {
        json["name"] = msg.name;
      }
      if (msg.date) {
        json["date"] = msg.date;
      }
      if (msg.totalSeats) {
        json["totalSeats"] = msg.totalSeats;
      }
      if (msg.numberSold) {
        json["numberSold"] = msg.numberSold;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: ClassOverviewResponse.ClassOverview,
      json: any,
    ): ClassOverviewResponse.ClassOverview {
      const _name_ = json["name"];
      if (_name_) {
        msg.name = _name_;
      }
      const _date_ = json["date"];
      if (_date_) {
        msg.date = _date_;
      }
      const _totalSeats_ = json["totalSeats"] ?? json["total_seats"];
      if (_totalSeats_) {
        msg.totalSeats = protoscript.parseNumber(_totalSeats_);
      }
      const _numberSold_ = json["numberSold"] ?? json["number_sold"];
      if (_numberSold_) {
        msg.numberSold = protoscript.parseNumber(_numberSold_);
      }
      return msg;
    },
  },
};

export const UpcomingToursRequestJSON = {
  /**
   * Serializes UpcomingToursRequest to JSON.
   */
  encode: function (_msg?: PartialDeep<UpcomingToursRequest>): string {
    return "{}";
  },

  /**
   * Deserializes UpcomingToursRequest from JSON.
   */
  decode: function (_json?: string): UpcomingToursRequest {
    return {};
  },

  /**
   * Initializes UpcomingToursRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpcomingToursRequest>,
  ): UpcomingToursRequest {
    return {
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: PartialDeep<UpcomingToursRequest>,
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpcomingToursRequest,
    _json: any,
  ): UpcomingToursRequest {
    return msg;
  },
};

export const UpcomingToursResponseJSON = {
  /**
   * Serializes UpcomingToursResponse to JSON.
   */
  encode: function (msg: PartialDeep<UpcomingToursResponse>): string {
    return JSON.stringify(UpcomingToursResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpcomingToursResponse from JSON.
   */
  decode: function (json: string): UpcomingToursResponse {
    return UpcomingToursResponseJSON._readMessage(
      UpcomingToursResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpcomingToursResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpcomingToursResponse>,
  ): UpcomingToursResponse {
    return {
      tours: [],
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpcomingToursResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.tours?.length) {
      json["tours"] = msg.tours.map(
        workshopTourBooking.TourBookingJSON._writeMessage,
      );
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpcomingToursResponse,
    json: any,
  ): UpcomingToursResponse {
    const _tours_ = json["tours"];
    if (_tours_) {
      for (const item of _tours_) {
        const m = workshopTourBooking.TourBookingJSON.initialize();
        workshopTourBooking.TourBookingJSON._readMessage(m, item);
        msg.tours.push(m);
      }
    }
    return msg;
  },
};
