// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: events/event.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface Event {
  type: string;
  payload: string;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Event = {
  /**
   * Serializes Event to protobuf.
   */
  encode: function (msg: PartialDeep<Event>): Uint8Array {
    return Event._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Event from protobuf.
   */
  decode: function (bytes: ByteSource): Event {
    return Event._readMessage(
      Event.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Event with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Event>): Event {
    return {
      type: "",
      payload: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Event>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.type) {
      writer.writeString(1, msg.type);
    }
    if (msg.payload) {
      writer.writeString(2, msg.payload);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Event, reader: protoscript.BinaryReader): Event {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.type = reader.readString();
          break;
        }
        case 2: {
          msg.payload = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const EventJSON = {
  /**
   * Serializes Event to JSON.
   */
  encode: function (msg: PartialDeep<Event>): string {
    return JSON.stringify(EventJSON._writeMessage(msg));
  },

  /**
   * Deserializes Event from JSON.
   */
  decode: function (json: string): Event {
    return EventJSON._readMessage(EventJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Event with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Event>): Event {
    return {
      type: "",
      payload: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Event>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.type) {
      json["type"] = msg.type;
    }
    if (msg.payload) {
      json["payload"] = msg.payload;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Event, json: any): Event {
    const _type_ = json["type"];
    if (_type_) {
      msg.type = _type_;
    }
    const _payload_ = json["payload"];
    if (_payload_) {
      msg.payload = _payload_;
    }
    return msg;
  },
};
