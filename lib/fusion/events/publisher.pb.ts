// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: events/publisher.proto
/* eslint-disable */

import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as eventsEvent from "./event.pb";

//========================================//
//       Publisher Protobuf Client        //
//========================================//

export async function Publish(
  event: eventsEvent.Event,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/events.Publisher/Publish",
    eventsEvent.Event.encode(event),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//         Publisher JSON Client          //
//========================================//

export async function PublishJSON(
  event: eventsEvent.Event,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/events.Publisher/Publish",
    eventsEvent.EventJSON.encode(event),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//               Publisher                //
//========================================//

export interface Publisher<Context = unknown> {
  Publish: (
    event: eventsEvent.Event,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createPublisher<Context>(service: Publisher<Context>) {
  return {
    name: "events.Publisher",
    methods: {
      Publish: {
        name: "Publish",
        handler: service.Publish,
        input: { protobuf: eventsEvent.Event, json: eventsEvent.EventJSON },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}
