// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: learn/course.repository.sky.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as learnCourse from "./course.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListCoursesRequest {
  /**
   * Filter allows you to search by fields set as searchable.
   * TODO Generate the list of searchable fields for this comment
   */
  filter: string;
}

export interface ListCoursesResponse {
  Courses: learnCourse.Course[];
  total: bigint;
}

export interface CreateCourseRequest {
  /**
   * The name to use for the course, which will become the final component of
   * the course's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  courseId: string;
  /**
   * The course to create.
   */
  course: learnCourse.Course;
}

export interface GetCourseRequest {
  name: string;
}

export interface UpdateCourseRequest {
  /**
   * The course to update.
   *
   * The course's 'name' field is used to identify the course to be updated.
   * Format: learn/course}}
   */
  course: learnCourse.Course;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeleteCourseRequest {
  name: string;
}

//========================================//
//    CourseRepository Protobuf Client    //
//========================================//

export async function ListCourses(
  listCoursesRequest: ListCoursesRequest,
  config?: ClientConfiguration,
): Promise<ListCoursesResponse> {
  const response = await PBrequest(
    "/learn.CourseRepository/ListCourses",
    ListCoursesRequest.encode(listCoursesRequest),
    config,
  );
  return ListCoursesResponse.decode(response);
}

export async function CreateCourse(
  createCourseRequest: CreateCourseRequest,
  config?: ClientConfiguration,
): Promise<learnCourse.Course> {
  const response = await PBrequest(
    "/learn.CourseRepository/CreateCourse",
    CreateCourseRequest.encode(createCourseRequest),
    config,
  );
  return learnCourse.Course.decode(response);
}

export async function GetCourse(
  getCourseRequest: GetCourseRequest,
  config?: ClientConfiguration,
): Promise<learnCourse.Course> {
  const response = await PBrequest(
    "/learn.CourseRepository/GetCourse",
    GetCourseRequest.encode(getCourseRequest),
    config,
  );
  return learnCourse.Course.decode(response);
}

export async function UpdateCourse(
  updateCourseRequest: UpdateCourseRequest,
  config?: ClientConfiguration,
): Promise<learnCourse.Course> {
  const response = await PBrequest(
    "/learn.CourseRepository/UpdateCourse",
    UpdateCourseRequest.encode(updateCourseRequest),
    config,
  );
  return learnCourse.Course.decode(response);
}

export async function DeleteCourse(
  deleteCourseRequest: DeleteCourseRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/learn.CourseRepository/DeleteCourse",
    DeleteCourseRequest.encode(deleteCourseRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//      CourseRepository JSON Client      //
//========================================//

export async function ListCoursesJSON(
  listCoursesRequest: ListCoursesRequest,
  config?: ClientConfiguration,
): Promise<ListCoursesResponse> {
  const response = await JSONrequest(
    "/learn.CourseRepository/ListCourses",
    ListCoursesRequestJSON.encode(listCoursesRequest),
    config,
  );
  return ListCoursesResponseJSON.decode(response);
}

export async function CreateCourseJSON(
  createCourseRequest: CreateCourseRequest,
  config?: ClientConfiguration,
): Promise<learnCourse.Course> {
  const response = await JSONrequest(
    "/learn.CourseRepository/CreateCourse",
    CreateCourseRequestJSON.encode(createCourseRequest),
    config,
  );
  return learnCourse.CourseJSON.decode(response);
}

export async function GetCourseJSON(
  getCourseRequest: GetCourseRequest,
  config?: ClientConfiguration,
): Promise<learnCourse.Course> {
  const response = await JSONrequest(
    "/learn.CourseRepository/GetCourse",
    GetCourseRequestJSON.encode(getCourseRequest),
    config,
  );
  return learnCourse.CourseJSON.decode(response);
}

export async function UpdateCourseJSON(
  updateCourseRequest: UpdateCourseRequest,
  config?: ClientConfiguration,
): Promise<learnCourse.Course> {
  const response = await JSONrequest(
    "/learn.CourseRepository/UpdateCourse",
    UpdateCourseRequestJSON.encode(updateCourseRequest),
    config,
  );
  return learnCourse.CourseJSON.decode(response);
}

export async function DeleteCourseJSON(
  deleteCourseRequest: DeleteCourseRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/learn.CourseRepository/DeleteCourse",
    DeleteCourseRequestJSON.encode(deleteCourseRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//            CourseRepository            //
//========================================//

/**
 *
 * CourseRepository allows you to manage Courses.
 */
export interface CourseRepository<Context = unknown> {
  ListCourses: (
    listCoursesRequest: ListCoursesRequest,
    context: Context,
  ) => Promise<ListCoursesResponse> | ListCoursesResponse;
  CreateCourse: (
    createCourseRequest: CreateCourseRequest,
    context: Context,
  ) => Promise<learnCourse.Course> | learnCourse.Course;
  GetCourse: (
    getCourseRequest: GetCourseRequest,
    context: Context,
  ) => Promise<learnCourse.Course> | learnCourse.Course;
  UpdateCourse: (
    updateCourseRequest: UpdateCourseRequest,
    context: Context,
  ) => Promise<learnCourse.Course> | learnCourse.Course;
  DeleteCourse: (
    deleteCourseRequest: DeleteCourseRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createCourseRepository<Context>(
  service: CourseRepository<Context>,
) {
  return {
    name: "learn.CourseRepository",
    methods: {
      ListCourses: {
        name: "ListCourses",
        handler: service.ListCourses,
        input: { protobuf: ListCoursesRequest, json: ListCoursesRequestJSON },
        output: {
          protobuf: ListCoursesResponse,
          json: ListCoursesResponseJSON,
        },
      },
      CreateCourse: {
        name: "CreateCourse",
        handler: service.CreateCourse,
        input: { protobuf: CreateCourseRequest, json: CreateCourseRequestJSON },
        output: { protobuf: learnCourse.Course, json: learnCourse.CourseJSON },
      },
      GetCourse: {
        name: "GetCourse",
        handler: service.GetCourse,
        input: { protobuf: GetCourseRequest, json: GetCourseRequestJSON },
        output: { protobuf: learnCourse.Course, json: learnCourse.CourseJSON },
      },
      UpdateCourse: {
        name: "UpdateCourse",
        handler: service.UpdateCourse,
        input: { protobuf: UpdateCourseRequest, json: UpdateCourseRequestJSON },
        output: { protobuf: learnCourse.Course, json: learnCourse.CourseJSON },
      },
      DeleteCourse: {
        name: "DeleteCourse",
        handler: service.DeleteCourse,
        input: { protobuf: DeleteCourseRequest, json: DeleteCourseRequestJSON },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListCoursesRequest = {
  /**
   * Serializes ListCoursesRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListCoursesRequest>): Uint8Array {
    return ListCoursesRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListCoursesRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListCoursesRequest {
    return ListCoursesRequest._readMessage(
      ListCoursesRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListCoursesRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListCoursesRequest>): ListCoursesRequest {
    return {
      filter: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCoursesRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCoursesRequest,
    reader: protoscript.BinaryReader,
  ): ListCoursesRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListCoursesResponse = {
  /**
   * Serializes ListCoursesResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListCoursesResponse>): Uint8Array {
    return ListCoursesResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListCoursesResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListCoursesResponse {
    return ListCoursesResponse._readMessage(
      ListCoursesResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListCoursesResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListCoursesResponse>,
  ): ListCoursesResponse {
    return {
      Courses: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCoursesResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.Courses?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.Courses as any,
        learnCourse.Course._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCoursesResponse,
    reader: protoscript.BinaryReader,
  ): ListCoursesResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = learnCourse.Course.initialize();
          reader.readMessage(m, learnCourse.Course._readMessage);
          msg.Courses.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateCourseRequest = {
  /**
   * Serializes CreateCourseRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateCourseRequest>): Uint8Array {
    return CreateCourseRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateCourseRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateCourseRequest {
    return CreateCourseRequest._readMessage(
      CreateCourseRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateCourseRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateCourseRequest>,
  ): CreateCourseRequest {
    return {
      courseId: "",
      course: learnCourse.Course.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateCourseRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.courseId) {
      writer.writeString(1, msg.courseId);
    }
    if (msg.course) {
      writer.writeMessage(2, msg.course, learnCourse.Course._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateCourseRequest,
    reader: protoscript.BinaryReader,
  ): CreateCourseRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.courseId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.course, learnCourse.Course._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetCourseRequest = {
  /**
   * Serializes GetCourseRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetCourseRequest>): Uint8Array {
    return GetCourseRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetCourseRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetCourseRequest {
    return GetCourseRequest._readMessage(
      GetCourseRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetCourseRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetCourseRequest>): GetCourseRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetCourseRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetCourseRequest,
    reader: protoscript.BinaryReader,
  ): GetCourseRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateCourseRequest = {
  /**
   * Serializes UpdateCourseRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateCourseRequest>): Uint8Array {
    return UpdateCourseRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateCourseRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateCourseRequest {
    return UpdateCourseRequest._readMessage(
      UpdateCourseRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateCourseRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateCourseRequest>,
  ): UpdateCourseRequest {
    return {
      course: learnCourse.Course.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateCourseRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.course) {
      writer.writeMessage(1, msg.course, learnCourse.Course._writeMessage);
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateCourseRequest,
    reader: protoscript.BinaryReader,
  ): UpdateCourseRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.course, learnCourse.Course._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteCourseRequest = {
  /**
   * Serializes DeleteCourseRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteCourseRequest>): Uint8Array {
    return DeleteCourseRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteCourseRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteCourseRequest {
    return DeleteCourseRequest._readMessage(
      DeleteCourseRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteCourseRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteCourseRequest>,
  ): DeleteCourseRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCourseRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCourseRequest,
    reader: protoscript.BinaryReader,
  ): DeleteCourseRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListCoursesRequestJSON = {
  /**
   * Serializes ListCoursesRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListCoursesRequest>): string {
    return JSON.stringify(ListCoursesRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListCoursesRequest from JSON.
   */
  decode: function (json: string): ListCoursesRequest {
    return ListCoursesRequestJSON._readMessage(
      ListCoursesRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListCoursesRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListCoursesRequest>): ListCoursesRequest {
    return {
      filter: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCoursesRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCoursesRequest,
    json: any,
  ): ListCoursesRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    return msg;
  },
};

export const ListCoursesResponseJSON = {
  /**
   * Serializes ListCoursesResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListCoursesResponse>): string {
    return JSON.stringify(ListCoursesResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListCoursesResponse from JSON.
   */
  decode: function (json: string): ListCoursesResponse {
    return ListCoursesResponseJSON._readMessage(
      ListCoursesResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListCoursesResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListCoursesResponse>,
  ): ListCoursesResponse {
    return {
      Courses: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCoursesResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Courses?.length) {
      json["Courses"] = msg.Courses.map(learnCourse.CourseJSON._writeMessage);
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCoursesResponse,
    json: any,
  ): ListCoursesResponse {
    const _Courses_ = json["Courses"];
    if (_Courses_) {
      for (const item of _Courses_) {
        const m = learnCourse.CourseJSON.initialize();
        learnCourse.CourseJSON._readMessage(m, item);
        msg.Courses.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    return msg;
  },
};

export const CreateCourseRequestJSON = {
  /**
   * Serializes CreateCourseRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateCourseRequest>): string {
    return JSON.stringify(CreateCourseRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateCourseRequest from JSON.
   */
  decode: function (json: string): CreateCourseRequest {
    return CreateCourseRequestJSON._readMessage(
      CreateCourseRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateCourseRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateCourseRequest>,
  ): CreateCourseRequest {
    return {
      courseId: "",
      course: learnCourse.CourseJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateCourseRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.courseId) {
      json["courseId"] = msg.courseId;
    }
    if (msg.course) {
      const _course_ = learnCourse.CourseJSON._writeMessage(msg.course);
      if (Object.keys(_course_).length > 0) {
        json["course"] = _course_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateCourseRequest,
    json: any,
  ): CreateCourseRequest {
    const _courseId_ = json["courseId"] ?? json["course_id"];
    if (_courseId_) {
      msg.courseId = _courseId_;
    }
    const _course_ = json["course"];
    if (_course_) {
      learnCourse.CourseJSON._readMessage(msg.course, _course_);
    }
    return msg;
  },
};

export const GetCourseRequestJSON = {
  /**
   * Serializes GetCourseRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetCourseRequest>): string {
    return JSON.stringify(GetCourseRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetCourseRequest from JSON.
   */
  decode: function (json: string): GetCourseRequest {
    return GetCourseRequestJSON._readMessage(
      GetCourseRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetCourseRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetCourseRequest>): GetCourseRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetCourseRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetCourseRequest, json: any): GetCourseRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdateCourseRequestJSON = {
  /**
   * Serializes UpdateCourseRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateCourseRequest>): string {
    return JSON.stringify(UpdateCourseRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateCourseRequest from JSON.
   */
  decode: function (json: string): UpdateCourseRequest {
    return UpdateCourseRequestJSON._readMessage(
      UpdateCourseRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateCourseRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateCourseRequest>,
  ): UpdateCourseRequest {
    return {
      course: learnCourse.CourseJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateCourseRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.course) {
      const _course_ = learnCourse.CourseJSON._writeMessage(msg.course);
      if (Object.keys(_course_).length > 0) {
        json["course"] = _course_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateCourseRequest,
    json: any,
  ): UpdateCourseRequest {
    const _course_ = json["course"];
    if (_course_) {
      learnCourse.CourseJSON._readMessage(msg.course, _course_);
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeleteCourseRequestJSON = {
  /**
   * Serializes DeleteCourseRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteCourseRequest>): string {
    return JSON.stringify(DeleteCourseRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteCourseRequest from JSON.
   */
  decode: function (json: string): DeleteCourseRequest {
    return DeleteCourseRequestJSON._readMessage(
      DeleteCourseRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteCourseRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteCourseRequest>,
  ): DeleteCourseRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCourseRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCourseRequest,
    json: any,
  ): DeleteCourseRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
