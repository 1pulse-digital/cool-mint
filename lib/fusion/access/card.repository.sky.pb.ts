// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: access/card.repository.sky.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as accessCard from "./card.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListCardsRequest {
  /**
   * Filter allows you to search by fields set as searchable.
   * TODO Generate the list of searchable fields for this comment
   */
  filter: string;
}

export interface ListCardsResponse {
  Cards: accessCard.Card[];
  total: bigint;
}

export interface CreateCardRequest {
  /**
   * The name to use for the card, which will become the final component of
   * the card's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  cardId: string;
  /**
   * The card to create.
   */
  card: accessCard.Card;
}

export interface GetCardRequest {
  name: string;
}

export interface UpdateCardRequest {
  /**
   * The card to update.
   *
   * The card's 'name' field is used to identify the card to be updated.
   * Format: access/card}}
   */
  card: accessCard.Card;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeleteCardRequest {
  name: string;
}

//========================================//
//     CardRepository Protobuf Client     //
//========================================//

export async function ListCards(
  listCardsRequest: ListCardsRequest,
  config?: ClientConfiguration,
): Promise<ListCardsResponse> {
  const response = await PBrequest(
    "/access.CardRepository/ListCards",
    ListCardsRequest.encode(listCardsRequest),
    config,
  );
  return ListCardsResponse.decode(response);
}

export async function CreateCard(
  createCardRequest: CreateCardRequest,
  config?: ClientConfiguration,
): Promise<accessCard.Card> {
  const response = await PBrequest(
    "/access.CardRepository/CreateCard",
    CreateCardRequest.encode(createCardRequest),
    config,
  );
  return accessCard.Card.decode(response);
}

export async function GetCard(
  getCardRequest: GetCardRequest,
  config?: ClientConfiguration,
): Promise<accessCard.Card> {
  const response = await PBrequest(
    "/access.CardRepository/GetCard",
    GetCardRequest.encode(getCardRequest),
    config,
  );
  return accessCard.Card.decode(response);
}

export async function UpdateCard(
  updateCardRequest: UpdateCardRequest,
  config?: ClientConfiguration,
): Promise<accessCard.Card> {
  const response = await PBrequest(
    "/access.CardRepository/UpdateCard",
    UpdateCardRequest.encode(updateCardRequest),
    config,
  );
  return accessCard.Card.decode(response);
}

export async function DeleteCard(
  deleteCardRequest: DeleteCardRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/access.CardRepository/DeleteCard",
    DeleteCardRequest.encode(deleteCardRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//       CardRepository JSON Client       //
//========================================//

export async function ListCardsJSON(
  listCardsRequest: ListCardsRequest,
  config?: ClientConfiguration,
): Promise<ListCardsResponse> {
  const response = await JSONrequest(
    "/access.CardRepository/ListCards",
    ListCardsRequestJSON.encode(listCardsRequest),
    config,
  );
  return ListCardsResponseJSON.decode(response);
}

export async function CreateCardJSON(
  createCardRequest: CreateCardRequest,
  config?: ClientConfiguration,
): Promise<accessCard.Card> {
  const response = await JSONrequest(
    "/access.CardRepository/CreateCard",
    CreateCardRequestJSON.encode(createCardRequest),
    config,
  );
  return accessCard.CardJSON.decode(response);
}

export async function GetCardJSON(
  getCardRequest: GetCardRequest,
  config?: ClientConfiguration,
): Promise<accessCard.Card> {
  const response = await JSONrequest(
    "/access.CardRepository/GetCard",
    GetCardRequestJSON.encode(getCardRequest),
    config,
  );
  return accessCard.CardJSON.decode(response);
}

export async function UpdateCardJSON(
  updateCardRequest: UpdateCardRequest,
  config?: ClientConfiguration,
): Promise<accessCard.Card> {
  const response = await JSONrequest(
    "/access.CardRepository/UpdateCard",
    UpdateCardRequestJSON.encode(updateCardRequest),
    config,
  );
  return accessCard.CardJSON.decode(response);
}

export async function DeleteCardJSON(
  deleteCardRequest: DeleteCardRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/access.CardRepository/DeleteCard",
    DeleteCardRequestJSON.encode(deleteCardRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//             CardRepository             //
//========================================//

/**
 *
 * CardRepository allows you to manage Cards.
 */
export interface CardRepository<Context = unknown> {
  ListCards: (
    listCardsRequest: ListCardsRequest,
    context: Context,
  ) => Promise<ListCardsResponse> | ListCardsResponse;
  CreateCard: (
    createCardRequest: CreateCardRequest,
    context: Context,
  ) => Promise<accessCard.Card> | accessCard.Card;
  GetCard: (
    getCardRequest: GetCardRequest,
    context: Context,
  ) => Promise<accessCard.Card> | accessCard.Card;
  UpdateCard: (
    updateCardRequest: UpdateCardRequest,
    context: Context,
  ) => Promise<accessCard.Card> | accessCard.Card;
  DeleteCard: (
    deleteCardRequest: DeleteCardRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createCardRepository<Context>(
  service: CardRepository<Context>,
) {
  return {
    name: "access.CardRepository",
    methods: {
      ListCards: {
        name: "ListCards",
        handler: service.ListCards,
        input: { protobuf: ListCardsRequest, json: ListCardsRequestJSON },
        output: { protobuf: ListCardsResponse, json: ListCardsResponseJSON },
      },
      CreateCard: {
        name: "CreateCard",
        handler: service.CreateCard,
        input: { protobuf: CreateCardRequest, json: CreateCardRequestJSON },
        output: { protobuf: accessCard.Card, json: accessCard.CardJSON },
      },
      GetCard: {
        name: "GetCard",
        handler: service.GetCard,
        input: { protobuf: GetCardRequest, json: GetCardRequestJSON },
        output: { protobuf: accessCard.Card, json: accessCard.CardJSON },
      },
      UpdateCard: {
        name: "UpdateCard",
        handler: service.UpdateCard,
        input: { protobuf: UpdateCardRequest, json: UpdateCardRequestJSON },
        output: { protobuf: accessCard.Card, json: accessCard.CardJSON },
      },
      DeleteCard: {
        name: "DeleteCard",
        handler: service.DeleteCard,
        input: { protobuf: DeleteCardRequest, json: DeleteCardRequestJSON },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListCardsRequest = {
  /**
   * Serializes ListCardsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListCardsRequest>): Uint8Array {
    return ListCardsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListCardsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListCardsRequest {
    return ListCardsRequest._readMessage(
      ListCardsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListCardsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListCardsRequest>): ListCardsRequest {
    return {
      filter: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCardsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCardsRequest,
    reader: protoscript.BinaryReader,
  ): ListCardsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListCardsResponse = {
  /**
   * Serializes ListCardsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListCardsResponse>): Uint8Array {
    return ListCardsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListCardsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListCardsResponse {
    return ListCardsResponse._readMessage(
      ListCardsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListCardsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListCardsResponse>): ListCardsResponse {
    return {
      Cards: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCardsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.Cards?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.Cards as any,
        accessCard.Card._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCardsResponse,
    reader: protoscript.BinaryReader,
  ): ListCardsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = accessCard.Card.initialize();
          reader.readMessage(m, accessCard.Card._readMessage);
          msg.Cards.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateCardRequest = {
  /**
   * Serializes CreateCardRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateCardRequest>): Uint8Array {
    return CreateCardRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateCardRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateCardRequest {
    return CreateCardRequest._readMessage(
      CreateCardRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateCardRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateCardRequest>): CreateCardRequest {
    return {
      cardId: "",
      card: accessCard.Card.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateCardRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.cardId) {
      writer.writeString(1, msg.cardId);
    }
    if (msg.card) {
      writer.writeMessage(2, msg.card, accessCard.Card._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateCardRequest,
    reader: protoscript.BinaryReader,
  ): CreateCardRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.cardId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.card, accessCard.Card._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetCardRequest = {
  /**
   * Serializes GetCardRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetCardRequest>): Uint8Array {
    return GetCardRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetCardRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetCardRequest {
    return GetCardRequest._readMessage(
      GetCardRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetCardRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetCardRequest>): GetCardRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetCardRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetCardRequest,
    reader: protoscript.BinaryReader,
  ): GetCardRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateCardRequest = {
  /**
   * Serializes UpdateCardRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateCardRequest>): Uint8Array {
    return UpdateCardRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateCardRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateCardRequest {
    return UpdateCardRequest._readMessage(
      UpdateCardRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateCardRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateCardRequest>): UpdateCardRequest {
    return {
      card: accessCard.Card.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateCardRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.card) {
      writer.writeMessage(1, msg.card, accessCard.Card._writeMessage);
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateCardRequest,
    reader: protoscript.BinaryReader,
  ): UpdateCardRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.card, accessCard.Card._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteCardRequest = {
  /**
   * Serializes DeleteCardRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteCardRequest>): Uint8Array {
    return DeleteCardRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteCardRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteCardRequest {
    return DeleteCardRequest._readMessage(
      DeleteCardRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteCardRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteCardRequest>): DeleteCardRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCardRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCardRequest,
    reader: protoscript.BinaryReader,
  ): DeleteCardRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListCardsRequestJSON = {
  /**
   * Serializes ListCardsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListCardsRequest>): string {
    return JSON.stringify(ListCardsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListCardsRequest from JSON.
   */
  decode: function (json: string): ListCardsRequest {
    return ListCardsRequestJSON._readMessage(
      ListCardsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListCardsRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListCardsRequest>): ListCardsRequest {
    return {
      filter: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCardsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ListCardsRequest, json: any): ListCardsRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    return msg;
  },
};

export const ListCardsResponseJSON = {
  /**
   * Serializes ListCardsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListCardsResponse>): string {
    return JSON.stringify(ListCardsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListCardsResponse from JSON.
   */
  decode: function (json: string): ListCardsResponse {
    return ListCardsResponseJSON._readMessage(
      ListCardsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListCardsResponse with all fields set to their default value.
   */
  initialize: function (msg?: Partial<ListCardsResponse>): ListCardsResponse {
    return {
      Cards: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListCardsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Cards?.length) {
      json["Cards"] = msg.Cards.map(accessCard.CardJSON._writeMessage);
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListCardsResponse,
    json: any,
  ): ListCardsResponse {
    const _Cards_ = json["Cards"];
    if (_Cards_) {
      for (const item of _Cards_) {
        const m = accessCard.CardJSON.initialize();
        accessCard.CardJSON._readMessage(m, item);
        msg.Cards.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    return msg;
  },
};

export const CreateCardRequestJSON = {
  /**
   * Serializes CreateCardRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateCardRequest>): string {
    return JSON.stringify(CreateCardRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateCardRequest from JSON.
   */
  decode: function (json: string): CreateCardRequest {
    return CreateCardRequestJSON._readMessage(
      CreateCardRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateCardRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<CreateCardRequest>): CreateCardRequest {
    return {
      cardId: "",
      card: accessCard.CardJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateCardRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.cardId) {
      json["cardId"] = msg.cardId;
    }
    if (msg.card) {
      const _card_ = accessCard.CardJSON._writeMessage(msg.card);
      if (Object.keys(_card_).length > 0) {
        json["card"] = _card_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateCardRequest,
    json: any,
  ): CreateCardRequest {
    const _cardId_ = json["cardId"] ?? json["card_id"];
    if (_cardId_) {
      msg.cardId = _cardId_;
    }
    const _card_ = json["card"];
    if (_card_) {
      accessCard.CardJSON._readMessage(msg.card, _card_);
    }
    return msg;
  },
};

export const GetCardRequestJSON = {
  /**
   * Serializes GetCardRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetCardRequest>): string {
    return JSON.stringify(GetCardRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetCardRequest from JSON.
   */
  decode: function (json: string): GetCardRequest {
    return GetCardRequestJSON._readMessage(
      GetCardRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetCardRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetCardRequest>): GetCardRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetCardRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetCardRequest, json: any): GetCardRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdateCardRequestJSON = {
  /**
   * Serializes UpdateCardRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateCardRequest>): string {
    return JSON.stringify(UpdateCardRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateCardRequest from JSON.
   */
  decode: function (json: string): UpdateCardRequest {
    return UpdateCardRequestJSON._readMessage(
      UpdateCardRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateCardRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<UpdateCardRequest>): UpdateCardRequest {
    return {
      card: accessCard.CardJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateCardRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.card) {
      const _card_ = accessCard.CardJSON._writeMessage(msg.card);
      if (Object.keys(_card_).length > 0) {
        json["card"] = _card_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateCardRequest,
    json: any,
  ): UpdateCardRequest {
    const _card_ = json["card"];
    if (_card_) {
      accessCard.CardJSON._readMessage(msg.card, _card_);
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeleteCardRequestJSON = {
  /**
   * Serializes DeleteCardRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteCardRequest>): string {
    return JSON.stringify(DeleteCardRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteCardRequest from JSON.
   */
  decode: function (json: string): DeleteCardRequest {
    return DeleteCardRequestJSON._readMessage(
      DeleteCardRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteCardRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<DeleteCardRequest>): DeleteCardRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteCardRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteCardRequest,
    json: any,
  ): DeleteCardRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
