// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: access/card.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export type State = "INACTIVE" | "ACTIVE" | "SUSPENDED" | "REVOKED";

export interface Card {
  name: string;
  uid: string;
  issuedAt: string;
  expiresAt: string;
  state: State;
  personID: string;
  clientID: string;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const State = {
  INACTIVE: "INACTIVE",
  ACTIVE: "ACTIVE",
  SUSPENDED: "SUSPENDED",
  REVOKED: "REVOKED",
  /**
   * @private
   */
  _fromInt: function (i: number): State {
    switch (i) {
      case 0: {
        return "INACTIVE";
      }
      case 1: {
        return "ACTIVE";
      }
      case 2: {
        return "SUSPENDED";
      }
      case 3: {
        return "REVOKED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as State;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: State): number {
    switch (i) {
      case "INACTIVE": {
        return 0;
      }
      case "ACTIVE": {
        return 1;
      }
      case "SUSPENDED": {
        return 2;
      }
      case "REVOKED": {
        return 3;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const Card = {
  /**
   * Serializes Card to protobuf.
   */
  encode: function (msg: PartialDeep<Card>): Uint8Array {
    return Card._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Card from protobuf.
   */
  decode: function (bytes: ByteSource): Card {
    return Card._readMessage(
      Card.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Card with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Card>): Card {
    return {
      name: "",
      uid: "",
      issuedAt: "",
      expiresAt: "",
      state: State._fromInt(0),
      personID: "",
      clientID: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Card>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.uid) {
      writer.writeString(2, msg.uid);
    }
    if (msg.issuedAt) {
      writer.writeString(3, msg.issuedAt);
    }
    if (msg.expiresAt) {
      writer.writeString(4, msg.expiresAt);
    }
    if (msg.state && State._toInt(msg.state)) {
      writer.writeEnum(5, State._toInt(msg.state));
    }
    if (msg.personID) {
      writer.writeString(6, msg.personID);
    }
    if (msg.clientID) {
      writer.writeString(7, msg.clientID);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Card, reader: protoscript.BinaryReader): Card {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.uid = reader.readString();
          break;
        }
        case 3: {
          msg.issuedAt = reader.readString();
          break;
        }
        case 4: {
          msg.expiresAt = reader.readString();
          break;
        }
        case 5: {
          msg.state = State._fromInt(reader.readEnum());
          break;
        }
        case 6: {
          msg.personID = reader.readString();
          break;
        }
        case 7: {
          msg.clientID = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const StateJSON = {
  INACTIVE: "INACTIVE",
  ACTIVE: "ACTIVE",
  SUSPENDED: "SUSPENDED",
  REVOKED: "REVOKED",
  /**
   * @private
   */
  _fromInt: function (i: number): State {
    switch (i) {
      case 0: {
        return "INACTIVE";
      }
      case 1: {
        return "ACTIVE";
      }
      case 2: {
        return "SUSPENDED";
      }
      case 3: {
        return "REVOKED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as State;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: State): number {
    switch (i) {
      case "INACTIVE": {
        return 0;
      }
      case "ACTIVE": {
        return 1;
      }
      case "SUSPENDED": {
        return 2;
      }
      case "REVOKED": {
        return 3;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const CardJSON = {
  /**
   * Serializes Card to JSON.
   */
  encode: function (msg: PartialDeep<Card>): string {
    return JSON.stringify(CardJSON._writeMessage(msg));
  },

  /**
   * Deserializes Card from JSON.
   */
  decode: function (json: string): Card {
    return CardJSON._readMessage(CardJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Card with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Card>): Card {
    return {
      name: "",
      uid: "",
      issuedAt: "",
      expiresAt: "",
      state: State._fromInt(0),
      personID: "",
      clientID: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Card>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.uid) {
      json["uid"] = msg.uid;
    }
    if (msg.issuedAt) {
      json["issuedAt"] = msg.issuedAt;
    }
    if (msg.expiresAt) {
      json["expiresAt"] = msg.expiresAt;
    }
    if (msg.state && StateJSON._toInt(msg.state)) {
      json["state"] = msg.state;
    }
    if (msg.personID) {
      json["personID"] = msg.personID;
    }
    if (msg.clientID) {
      json["clientID"] = msg.clientID;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Card, json: any): Card {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _uid_ = json["uid"];
    if (_uid_) {
      msg.uid = _uid_;
    }
    const _issuedAt_ = json["issuedAt"];
    if (_issuedAt_) {
      msg.issuedAt = _issuedAt_;
    }
    const _expiresAt_ = json["expiresAt"];
    if (_expiresAt_) {
      msg.expiresAt = _expiresAt_;
    }
    const _state_ = json["state"];
    if (_state_) {
      msg.state = State._fromInt(_state_);
    }
    const _personID_ = json["personID"];
    if (_personID_) {
      msg.personID = _personID_;
    }
    const _clientID_ = json["clientID"];
    if (_clientID_) {
      msg.clientID = _clientID_;
    }
    return msg;
  },
};
