// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: masterClass/booking.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface Booking {
  name: string;
  uid: string;
  /**
   * Session is the name of the session
   */
  session: string;
  /**
   * Attendee is the name of the attendee
   */
  attendee: string;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Booking = {
  /**
   * Serializes Booking to protobuf.
   */
  encode: function (msg: PartialDeep<Booking>): Uint8Array {
    return Booking._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Booking from protobuf.
   */
  decode: function (bytes: ByteSource): Booking {
    return Booking._readMessage(
      Booking.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Booking with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Booking>): Booking {
    return {
      name: "",
      uid: "",
      session: "",
      attendee: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Booking>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.uid) {
      writer.writeString(2, msg.uid);
    }
    if (msg.session) {
      writer.writeString(5, msg.session);
    }
    if (msg.attendee) {
      writer.writeString(4, msg.attendee);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Booking,
    reader: protoscript.BinaryReader,
  ): Booking {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.uid = reader.readString();
          break;
        }
        case 5: {
          msg.session = reader.readString();
          break;
        }
        case 4: {
          msg.attendee = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const BookingJSON = {
  /**
   * Serializes Booking to JSON.
   */
  encode: function (msg: PartialDeep<Booking>): string {
    return JSON.stringify(BookingJSON._writeMessage(msg));
  },

  /**
   * Deserializes Booking from JSON.
   */
  decode: function (json: string): Booking {
    return BookingJSON._readMessage(BookingJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Booking with all fields set to their default value.
   */
  initialize: function (msg?: Partial<Booking>): Booking {
    return {
      name: "",
      uid: "",
      session: "",
      attendee: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Booking>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.uid) {
      json["uid"] = msg.uid;
    }
    if (msg.session) {
      json["session"] = msg.session;
    }
    if (msg.attendee) {
      json["attendee"] = msg.attendee;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Booking, json: any): Booking {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _uid_ = json["uid"];
    if (_uid_) {
      msg.uid = _uid_;
    }
    const _session_ = json["session"];
    if (_session_) {
      msg.session = _session_;
    }
    const _attendee_ = json["attendee"];
    if (_attendee_) {
      msg.attendee = _attendee_;
    }
    return msg;
  },
};
