// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: masterClass/masterClass.repository.sky.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as masterClassMasterClass from "./masterClass.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListMasterClassesRequest {
  /**
   * Filter allows you to search by fields set as searchable.
   * TODO Generate the list of searchable fields for this comment
   */
  filter: string;
}

export interface ListMasterClassesResponse {
  MasterClasses: masterClassMasterClass.MasterClass[];
  total: bigint;
}

export interface CreateMasterClassRequest {
  /**
   * The name to use for the masterClass, which will become the final component of
   * the masterClass's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  masterClassId: string;
  /**
   * The masterClass to create.
   */
  masterClass: masterClassMasterClass.MasterClass;
}

export interface GetMasterClassRequest {
  name: string;
}

export interface UpdateMasterClassRequest {
  /**
   * The masterClass to update.
   *
   * The masterClass's 'name' field is used to identify the masterClass to be updated.
   * Format: masterclass/masterclass}}
   */
  masterClass: masterClassMasterClass.MasterClass;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeleteMasterClassRequest {
  name: string;
}

//========================================//
// MasterClassRepository Protobuf Client  //
//========================================//

export async function ListMasterClasses(
  listMasterClassesRequest: ListMasterClassesRequest,
  config?: ClientConfiguration,
): Promise<ListMasterClassesResponse> {
  const response = await PBrequest(
    "/masterClass.MasterClassRepository/ListMasterClasses",
    ListMasterClassesRequest.encode(listMasterClassesRequest),
    config,
  );
  return ListMasterClassesResponse.decode(response);
}

export async function CreateMasterClass(
  createMasterClassRequest: CreateMasterClassRequest,
  config?: ClientConfiguration,
): Promise<masterClassMasterClass.MasterClass> {
  const response = await PBrequest(
    "/masterClass.MasterClassRepository/CreateMasterClass",
    CreateMasterClassRequest.encode(createMasterClassRequest),
    config,
  );
  return masterClassMasterClass.MasterClass.decode(response);
}

export async function GetMasterClass(
  getMasterClassRequest: GetMasterClassRequest,
  config?: ClientConfiguration,
): Promise<masterClassMasterClass.MasterClass> {
  const response = await PBrequest(
    "/masterClass.MasterClassRepository/GetMasterClass",
    GetMasterClassRequest.encode(getMasterClassRequest),
    config,
  );
  return masterClassMasterClass.MasterClass.decode(response);
}

export async function UpdateMasterClass(
  updateMasterClassRequest: UpdateMasterClassRequest,
  config?: ClientConfiguration,
): Promise<masterClassMasterClass.MasterClass> {
  const response = await PBrequest(
    "/masterClass.MasterClassRepository/UpdateMasterClass",
    UpdateMasterClassRequest.encode(updateMasterClassRequest),
    config,
  );
  return masterClassMasterClass.MasterClass.decode(response);
}

export async function DeleteMasterClass(
  deleteMasterClassRequest: DeleteMasterClassRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/masterClass.MasterClassRepository/DeleteMasterClass",
    DeleteMasterClassRequest.encode(deleteMasterClassRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//   MasterClassRepository JSON Client    //
//========================================//

export async function ListMasterClassesJSON(
  listMasterClassesRequest: ListMasterClassesRequest,
  config?: ClientConfiguration,
): Promise<ListMasterClassesResponse> {
  const response = await JSONrequest(
    "/masterClass.MasterClassRepository/ListMasterClasses",
    ListMasterClassesRequestJSON.encode(listMasterClassesRequest),
    config,
  );
  return ListMasterClassesResponseJSON.decode(response);
}

export async function CreateMasterClassJSON(
  createMasterClassRequest: CreateMasterClassRequest,
  config?: ClientConfiguration,
): Promise<masterClassMasterClass.MasterClass> {
  const response = await JSONrequest(
    "/masterClass.MasterClassRepository/CreateMasterClass",
    CreateMasterClassRequestJSON.encode(createMasterClassRequest),
    config,
  );
  return masterClassMasterClass.MasterClassJSON.decode(response);
}

export async function GetMasterClassJSON(
  getMasterClassRequest: GetMasterClassRequest,
  config?: ClientConfiguration,
): Promise<masterClassMasterClass.MasterClass> {
  const response = await JSONrequest(
    "/masterClass.MasterClassRepository/GetMasterClass",
    GetMasterClassRequestJSON.encode(getMasterClassRequest),
    config,
  );
  return masterClassMasterClass.MasterClassJSON.decode(response);
}

export async function UpdateMasterClassJSON(
  updateMasterClassRequest: UpdateMasterClassRequest,
  config?: ClientConfiguration,
): Promise<masterClassMasterClass.MasterClass> {
  const response = await JSONrequest(
    "/masterClass.MasterClassRepository/UpdateMasterClass",
    UpdateMasterClassRequestJSON.encode(updateMasterClassRequest),
    config,
  );
  return masterClassMasterClass.MasterClassJSON.decode(response);
}

export async function DeleteMasterClassJSON(
  deleteMasterClassRequest: DeleteMasterClassRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/masterClass.MasterClassRepository/DeleteMasterClass",
    DeleteMasterClassRequestJSON.encode(deleteMasterClassRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//         MasterClassRepository          //
//========================================//

/**
 *
 * MasterClassRepository allows you to manage MasterClasses.
 */
export interface MasterClassRepository<Context = unknown> {
  ListMasterClasses: (
    listMasterClassesRequest: ListMasterClassesRequest,
    context: Context,
  ) => Promise<ListMasterClassesResponse> | ListMasterClassesResponse;
  CreateMasterClass: (
    createMasterClassRequest: CreateMasterClassRequest,
    context: Context,
  ) =>
    | Promise<masterClassMasterClass.MasterClass>
    | masterClassMasterClass.MasterClass;
  GetMasterClass: (
    getMasterClassRequest: GetMasterClassRequest,
    context: Context,
  ) =>
    | Promise<masterClassMasterClass.MasterClass>
    | masterClassMasterClass.MasterClass;
  UpdateMasterClass: (
    updateMasterClassRequest: UpdateMasterClassRequest,
    context: Context,
  ) =>
    | Promise<masterClassMasterClass.MasterClass>
    | masterClassMasterClass.MasterClass;
  DeleteMasterClass: (
    deleteMasterClassRequest: DeleteMasterClassRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createMasterClassRepository<Context>(
  service: MasterClassRepository<Context>,
) {
  return {
    name: "masterClass.MasterClassRepository",
    methods: {
      ListMasterClasses: {
        name: "ListMasterClasses",
        handler: service.ListMasterClasses,
        input: {
          protobuf: ListMasterClassesRequest,
          json: ListMasterClassesRequestJSON,
        },
        output: {
          protobuf: ListMasterClassesResponse,
          json: ListMasterClassesResponseJSON,
        },
      },
      CreateMasterClass: {
        name: "CreateMasterClass",
        handler: service.CreateMasterClass,
        input: {
          protobuf: CreateMasterClassRequest,
          json: CreateMasterClassRequestJSON,
        },
        output: {
          protobuf: masterClassMasterClass.MasterClass,
          json: masterClassMasterClass.MasterClassJSON,
        },
      },
      GetMasterClass: {
        name: "GetMasterClass",
        handler: service.GetMasterClass,
        input: {
          protobuf: GetMasterClassRequest,
          json: GetMasterClassRequestJSON,
        },
        output: {
          protobuf: masterClassMasterClass.MasterClass,
          json: masterClassMasterClass.MasterClassJSON,
        },
      },
      UpdateMasterClass: {
        name: "UpdateMasterClass",
        handler: service.UpdateMasterClass,
        input: {
          protobuf: UpdateMasterClassRequest,
          json: UpdateMasterClassRequestJSON,
        },
        output: {
          protobuf: masterClassMasterClass.MasterClass,
          json: masterClassMasterClass.MasterClassJSON,
        },
      },
      DeleteMasterClass: {
        name: "DeleteMasterClass",
        handler: service.DeleteMasterClass,
        input: {
          protobuf: DeleteMasterClassRequest,
          json: DeleteMasterClassRequestJSON,
        },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListMasterClassesRequest = {
  /**
   * Serializes ListMasterClassesRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListMasterClassesRequest>): Uint8Array {
    return ListMasterClassesRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListMasterClassesRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListMasterClassesRequest {
    return ListMasterClassesRequest._readMessage(
      ListMasterClassesRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListMasterClassesRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListMasterClassesRequest>,
  ): ListMasterClassesRequest {
    return {
      filter: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListMasterClassesRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMasterClassesRequest,
    reader: protoscript.BinaryReader,
  ): ListMasterClassesRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListMasterClassesResponse = {
  /**
   * Serializes ListMasterClassesResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListMasterClassesResponse>): Uint8Array {
    return ListMasterClassesResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListMasterClassesResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListMasterClassesResponse {
    return ListMasterClassesResponse._readMessage(
      ListMasterClassesResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListMasterClassesResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListMasterClassesResponse>,
  ): ListMasterClassesResponse {
    return {
      MasterClasses: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListMasterClassesResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.MasterClasses?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.MasterClasses as any,
        masterClassMasterClass.MasterClass._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMasterClassesResponse,
    reader: protoscript.BinaryReader,
  ): ListMasterClassesResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = masterClassMasterClass.MasterClass.initialize();
          reader.readMessage(
            m,
            masterClassMasterClass.MasterClass._readMessage,
          );
          msg.MasterClasses.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateMasterClassRequest = {
  /**
   * Serializes CreateMasterClassRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateMasterClassRequest>): Uint8Array {
    return CreateMasterClassRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateMasterClassRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateMasterClassRequest {
    return CreateMasterClassRequest._readMessage(
      CreateMasterClassRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateMasterClassRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateMasterClassRequest>,
  ): CreateMasterClassRequest {
    return {
      masterClassId: "",
      masterClass: masterClassMasterClass.MasterClass.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateMasterClassRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.masterClassId) {
      writer.writeString(1, msg.masterClassId);
    }
    if (msg.masterClass) {
      writer.writeMessage(
        2,
        msg.masterClass,
        masterClassMasterClass.MasterClass._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateMasterClassRequest,
    reader: protoscript.BinaryReader,
  ): CreateMasterClassRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.masterClassId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(
            msg.masterClass,
            masterClassMasterClass.MasterClass._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetMasterClassRequest = {
  /**
   * Serializes GetMasterClassRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetMasterClassRequest>): Uint8Array {
    return GetMasterClassRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetMasterClassRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetMasterClassRequest {
    return GetMasterClassRequest._readMessage(
      GetMasterClassRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetMasterClassRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetMasterClassRequest>,
  ): GetMasterClassRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetMasterClassRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMasterClassRequest,
    reader: protoscript.BinaryReader,
  ): GetMasterClassRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateMasterClassRequest = {
  /**
   * Serializes UpdateMasterClassRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateMasterClassRequest>): Uint8Array {
    return UpdateMasterClassRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateMasterClassRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateMasterClassRequest {
    return UpdateMasterClassRequest._readMessage(
      UpdateMasterClassRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateMasterClassRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateMasterClassRequest>,
  ): UpdateMasterClassRequest {
    return {
      masterClass: masterClassMasterClass.MasterClass.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateMasterClassRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.masterClass) {
      writer.writeMessage(
        1,
        msg.masterClass,
        masterClassMasterClass.MasterClass._writeMessage,
      );
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateMasterClassRequest,
    reader: protoscript.BinaryReader,
  ): UpdateMasterClassRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(
            msg.masterClass,
            masterClassMasterClass.MasterClass._readMessage,
          );
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteMasterClassRequest = {
  /**
   * Serializes DeleteMasterClassRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteMasterClassRequest>): Uint8Array {
    return DeleteMasterClassRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteMasterClassRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteMasterClassRequest {
    return DeleteMasterClassRequest._readMessage(
      DeleteMasterClassRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteMasterClassRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteMasterClassRequest>,
  ): DeleteMasterClassRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteMasterClassRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteMasterClassRequest,
    reader: protoscript.BinaryReader,
  ): DeleteMasterClassRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListMasterClassesRequestJSON = {
  /**
   * Serializes ListMasterClassesRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListMasterClassesRequest>): string {
    return JSON.stringify(ListMasterClassesRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListMasterClassesRequest from JSON.
   */
  decode: function (json: string): ListMasterClassesRequest {
    return ListMasterClassesRequestJSON._readMessage(
      ListMasterClassesRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListMasterClassesRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListMasterClassesRequest>,
  ): ListMasterClassesRequest {
    return {
      filter: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListMasterClassesRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMasterClassesRequest,
    json: any,
  ): ListMasterClassesRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    return msg;
  },
};

export const ListMasterClassesResponseJSON = {
  /**
   * Serializes ListMasterClassesResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListMasterClassesResponse>): string {
    return JSON.stringify(ListMasterClassesResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListMasterClassesResponse from JSON.
   */
  decode: function (json: string): ListMasterClassesResponse {
    return ListMasterClassesResponseJSON._readMessage(
      ListMasterClassesResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListMasterClassesResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListMasterClassesResponse>,
  ): ListMasterClassesResponse {
    return {
      MasterClasses: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListMasterClassesResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.MasterClasses?.length) {
      json["MasterClasses"] = msg.MasterClasses.map(
        masterClassMasterClass.MasterClassJSON._writeMessage,
      );
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListMasterClassesResponse,
    json: any,
  ): ListMasterClassesResponse {
    const _MasterClasses_ = json["MasterClasses"];
    if (_MasterClasses_) {
      for (const item of _MasterClasses_) {
        const m = masterClassMasterClass.MasterClassJSON.initialize();
        masterClassMasterClass.MasterClassJSON._readMessage(m, item);
        msg.MasterClasses.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    return msg;
  },
};

export const CreateMasterClassRequestJSON = {
  /**
   * Serializes CreateMasterClassRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateMasterClassRequest>): string {
    return JSON.stringify(CreateMasterClassRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateMasterClassRequest from JSON.
   */
  decode: function (json: string): CreateMasterClassRequest {
    return CreateMasterClassRequestJSON._readMessage(
      CreateMasterClassRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateMasterClassRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateMasterClassRequest>,
  ): CreateMasterClassRequest {
    return {
      masterClassId: "",
      masterClass: masterClassMasterClass.MasterClassJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateMasterClassRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.masterClassId) {
      json["masterClassId"] = msg.masterClassId;
    }
    if (msg.masterClass) {
      const _masterClass_ =
        masterClassMasterClass.MasterClassJSON._writeMessage(msg.masterClass);
      if (Object.keys(_masterClass_).length > 0) {
        json["masterClass"] = _masterClass_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateMasterClassRequest,
    json: any,
  ): CreateMasterClassRequest {
    const _masterClassId_ = json["masterClassId"] ?? json["masterClass_id"];
    if (_masterClassId_) {
      msg.masterClassId = _masterClassId_;
    }
    const _masterClass_ = json["masterClass"];
    if (_masterClass_) {
      masterClassMasterClass.MasterClassJSON._readMessage(
        msg.masterClass,
        _masterClass_,
      );
    }
    return msg;
  },
};

export const GetMasterClassRequestJSON = {
  /**
   * Serializes GetMasterClassRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetMasterClassRequest>): string {
    return JSON.stringify(GetMasterClassRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetMasterClassRequest from JSON.
   */
  decode: function (json: string): GetMasterClassRequest {
    return GetMasterClassRequestJSON._readMessage(
      GetMasterClassRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetMasterClassRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<GetMasterClassRequest>,
  ): GetMasterClassRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetMasterClassRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMasterClassRequest,
    json: any,
  ): GetMasterClassRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdateMasterClassRequestJSON = {
  /**
   * Serializes UpdateMasterClassRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateMasterClassRequest>): string {
    return JSON.stringify(UpdateMasterClassRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateMasterClassRequest from JSON.
   */
  decode: function (json: string): UpdateMasterClassRequest {
    return UpdateMasterClassRequestJSON._readMessage(
      UpdateMasterClassRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateMasterClassRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateMasterClassRequest>,
  ): UpdateMasterClassRequest {
    return {
      masterClass: masterClassMasterClass.MasterClassJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateMasterClassRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.masterClass) {
      const _masterClass_ =
        masterClassMasterClass.MasterClassJSON._writeMessage(msg.masterClass);
      if (Object.keys(_masterClass_).length > 0) {
        json["masterClass"] = _masterClass_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateMasterClassRequest,
    json: any,
  ): UpdateMasterClassRequest {
    const _masterClass_ = json["masterClass"];
    if (_masterClass_) {
      masterClassMasterClass.MasterClassJSON._readMessage(
        msg.masterClass,
        _masterClass_,
      );
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeleteMasterClassRequestJSON = {
  /**
   * Serializes DeleteMasterClassRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteMasterClassRequest>): string {
    return JSON.stringify(DeleteMasterClassRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteMasterClassRequest from JSON.
   */
  decode: function (json: string): DeleteMasterClassRequest {
    return DeleteMasterClassRequestJSON._readMessage(
      DeleteMasterClassRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteMasterClassRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteMasterClassRequest>,
  ): DeleteMasterClassRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteMasterClassRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteMasterClassRequest,
    json: any,
  ): DeleteMasterClassRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
