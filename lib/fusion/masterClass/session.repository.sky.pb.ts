// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: masterClass/session.repository.sky.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";
import * as masterClassSession from "./session.pb";

//========================================//
//                 Types                  //
//========================================//

export interface ListSessionsRequest {
  /**
   * Filter allows you to search by fields set as searchable.
   * TODO Generate the list of searchable fields for this comment
   */
  filter: string;
  /**
   * Parent references a masterClass.name
   */
  parent: string;
}

export interface ListSessionsResponse {
  Sessions: masterClassSession.Session[];
  total: bigint;
}

export interface CreateSessionRequest {
  /**
   * The name to use for the session, which will become the final component of
   * the session's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   */
  sessionId: string;
  /**
   * The session to create.
   */
  session: masterClassSession.Session;
}

export interface GetSessionRequest {
  name: string;
}

export interface UpdateSessionRequest {
  /**
   * The session to update.
   *
   * The session's 'name' field is used to identify the session to be updated.
   * Format: masterclass/session}}
   */
  session: masterClassSession.Session;
  /**
   * The list of fields to be updated.
   */
  updateMask: protoscript.FieldMask;
}

export interface DeleteSessionRequest {
  name: string;
}

//========================================//
//   SessionRepository Protobuf Client    //
//========================================//

export async function ListSessions(
  listSessionsRequest: ListSessionsRequest,
  config?: ClientConfiguration,
): Promise<ListSessionsResponse> {
  const response = await PBrequest(
    "/masterClass.SessionRepository/ListSessions",
    ListSessionsRequest.encode(listSessionsRequest),
    config,
  );
  return ListSessionsResponse.decode(response);
}

export async function CreateSession(
  createSessionRequest: CreateSessionRequest,
  config?: ClientConfiguration,
): Promise<masterClassSession.Session> {
  const response = await PBrequest(
    "/masterClass.SessionRepository/CreateSession",
    CreateSessionRequest.encode(createSessionRequest),
    config,
  );
  return masterClassSession.Session.decode(response);
}

export async function GetSession(
  getSessionRequest: GetSessionRequest,
  config?: ClientConfiguration,
): Promise<masterClassSession.Session> {
  const response = await PBrequest(
    "/masterClass.SessionRepository/GetSession",
    GetSessionRequest.encode(getSessionRequest),
    config,
  );
  return masterClassSession.Session.decode(response);
}

export async function UpdateSession(
  updateSessionRequest: UpdateSessionRequest,
  config?: ClientConfiguration,
): Promise<masterClassSession.Session> {
  const response = await PBrequest(
    "/masterClass.SessionRepository/UpdateSession",
    UpdateSessionRequest.encode(updateSessionRequest),
    config,
  );
  return masterClassSession.Session.decode(response);
}

export async function DeleteSession(
  deleteSessionRequest: DeleteSessionRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await PBrequest(
    "/masterClass.SessionRepository/DeleteSession",
    DeleteSessionRequest.encode(deleteSessionRequest),
    config,
  );
  return protoscript.Empty.decode(response);
}

//========================================//
//     SessionRepository JSON Client      //
//========================================//

export async function ListSessionsJSON(
  listSessionsRequest: ListSessionsRequest,
  config?: ClientConfiguration,
): Promise<ListSessionsResponse> {
  const response = await JSONrequest(
    "/masterClass.SessionRepository/ListSessions",
    ListSessionsRequestJSON.encode(listSessionsRequest),
    config,
  );
  return ListSessionsResponseJSON.decode(response);
}

export async function CreateSessionJSON(
  createSessionRequest: CreateSessionRequest,
  config?: ClientConfiguration,
): Promise<masterClassSession.Session> {
  const response = await JSONrequest(
    "/masterClass.SessionRepository/CreateSession",
    CreateSessionRequestJSON.encode(createSessionRequest),
    config,
  );
  return masterClassSession.SessionJSON.decode(response);
}

export async function GetSessionJSON(
  getSessionRequest: GetSessionRequest,
  config?: ClientConfiguration,
): Promise<masterClassSession.Session> {
  const response = await JSONrequest(
    "/masterClass.SessionRepository/GetSession",
    GetSessionRequestJSON.encode(getSessionRequest),
    config,
  );
  return masterClassSession.SessionJSON.decode(response);
}

export async function UpdateSessionJSON(
  updateSessionRequest: UpdateSessionRequest,
  config?: ClientConfiguration,
): Promise<masterClassSession.Session> {
  const response = await JSONrequest(
    "/masterClass.SessionRepository/UpdateSession",
    UpdateSessionRequestJSON.encode(updateSessionRequest),
    config,
  );
  return masterClassSession.SessionJSON.decode(response);
}

export async function DeleteSessionJSON(
  deleteSessionRequest: DeleteSessionRequest,
  config?: ClientConfiguration,
): Promise<protoscript.Empty> {
  const response = await JSONrequest(
    "/masterClass.SessionRepository/DeleteSession",
    DeleteSessionRequestJSON.encode(deleteSessionRequest),
    config,
  );
  return protoscript.EmptyJSON.decode(response);
}

//========================================//
//           SessionRepository            //
//========================================//

/**
 *
 * SessionRepository allows you to manage Sessions.
 */
export interface SessionRepository<Context = unknown> {
  ListSessions: (
    listSessionsRequest: ListSessionsRequest,
    context: Context,
  ) => Promise<ListSessionsResponse> | ListSessionsResponse;
  CreateSession: (
    createSessionRequest: CreateSessionRequest,
    context: Context,
  ) => Promise<masterClassSession.Session> | masterClassSession.Session;
  GetSession: (
    getSessionRequest: GetSessionRequest,
    context: Context,
  ) => Promise<masterClassSession.Session> | masterClassSession.Session;
  UpdateSession: (
    updateSessionRequest: UpdateSessionRequest,
    context: Context,
  ) => Promise<masterClassSession.Session> | masterClassSession.Session;
  DeleteSession: (
    deleteSessionRequest: DeleteSessionRequest,
    context: Context,
  ) => Promise<protoscript.Empty> | protoscript.Empty;
}

export function createSessionRepository<Context>(
  service: SessionRepository<Context>,
) {
  return {
    name: "masterClass.SessionRepository",
    methods: {
      ListSessions: {
        name: "ListSessions",
        handler: service.ListSessions,
        input: { protobuf: ListSessionsRequest, json: ListSessionsRequestJSON },
        output: {
          protobuf: ListSessionsResponse,
          json: ListSessionsResponseJSON,
        },
      },
      CreateSession: {
        name: "CreateSession",
        handler: service.CreateSession,
        input: {
          protobuf: CreateSessionRequest,
          json: CreateSessionRequestJSON,
        },
        output: {
          protobuf: masterClassSession.Session,
          json: masterClassSession.SessionJSON,
        },
      },
      GetSession: {
        name: "GetSession",
        handler: service.GetSession,
        input: { protobuf: GetSessionRequest, json: GetSessionRequestJSON },
        output: {
          protobuf: masterClassSession.Session,
          json: masterClassSession.SessionJSON,
        },
      },
      UpdateSession: {
        name: "UpdateSession",
        handler: service.UpdateSession,
        input: {
          protobuf: UpdateSessionRequest,
          json: UpdateSessionRequestJSON,
        },
        output: {
          protobuf: masterClassSession.Session,
          json: masterClassSession.SessionJSON,
        },
      },
      DeleteSession: {
        name: "DeleteSession",
        handler: service.DeleteSession,
        input: {
          protobuf: DeleteSessionRequest,
          json: DeleteSessionRequestJSON,
        },
        output: { protobuf: protoscript.Empty, json: protoscript.EmptyJSON },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ListSessionsRequest = {
  /**
   * Serializes ListSessionsRequest to protobuf.
   */
  encode: function (msg: PartialDeep<ListSessionsRequest>): Uint8Array {
    return ListSessionsRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListSessionsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ListSessionsRequest {
    return ListSessionsRequest._readMessage(
      ListSessionsRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListSessionsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListSessionsRequest>,
  ): ListSessionsRequest {
    return {
      filter: "",
      parent: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListSessionsRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.filter) {
      writer.writeString(1, msg.filter);
    }
    if (msg.parent) {
      writer.writeString(2, msg.parent);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListSessionsRequest,
    reader: protoscript.BinaryReader,
  ): ListSessionsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.filter = reader.readString();
          break;
        }
        case 2: {
          msg.parent = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ListSessionsResponse = {
  /**
   * Serializes ListSessionsResponse to protobuf.
   */
  encode: function (msg: PartialDeep<ListSessionsResponse>): Uint8Array {
    return ListSessionsResponse._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes ListSessionsResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ListSessionsResponse {
    return ListSessionsResponse._readMessage(
      ListSessionsResponse.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes ListSessionsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListSessionsResponse>,
  ): ListSessionsResponse {
    return {
      Sessions: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListSessionsResponse>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.Sessions?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.Sessions as any,
        masterClassSession.Session._writeMessage,
      );
    }
    if (msg.total) {
      writer.writeInt64String(2, msg.total.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListSessionsResponse,
    reader: protoscript.BinaryReader,
  ): ListSessionsResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = masterClassSession.Session.initialize();
          reader.readMessage(m, masterClassSession.Session._readMessage);
          msg.Sessions.push(m);
          break;
        }
        case 2: {
          msg.total = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateSessionRequest = {
  /**
   * Serializes CreateSessionRequest to protobuf.
   */
  encode: function (msg: PartialDeep<CreateSessionRequest>): Uint8Array {
    return CreateSessionRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateSessionRequest from protobuf.
   */
  decode: function (bytes: ByteSource): CreateSessionRequest {
    return CreateSessionRequest._readMessage(
      CreateSessionRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes CreateSessionRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateSessionRequest>,
  ): CreateSessionRequest {
    return {
      sessionId: "",
      session: masterClassSession.Session.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateSessionRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.sessionId) {
      writer.writeString(1, msg.sessionId);
    }
    if (msg.session) {
      writer.writeMessage(
        2,
        msg.session,
        masterClassSession.Session._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateSessionRequest,
    reader: protoscript.BinaryReader,
  ): CreateSessionRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.sessionId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(
            msg.session,
            masterClassSession.Session._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetSessionRequest = {
  /**
   * Serializes GetSessionRequest to protobuf.
   */
  encode: function (msg: PartialDeep<GetSessionRequest>): Uint8Array {
    return GetSessionRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes GetSessionRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetSessionRequest {
    return GetSessionRequest._readMessage(
      GetSessionRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes GetSessionRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetSessionRequest>): GetSessionRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetSessionRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetSessionRequest,
    reader: protoscript.BinaryReader,
  ): GetSessionRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateSessionRequest = {
  /**
   * Serializes UpdateSessionRequest to protobuf.
   */
  encode: function (msg: PartialDeep<UpdateSessionRequest>): Uint8Array {
    return UpdateSessionRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateSessionRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateSessionRequest {
    return UpdateSessionRequest._readMessage(
      UpdateSessionRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes UpdateSessionRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateSessionRequest>,
  ): UpdateSessionRequest {
    return {
      session: masterClassSession.Session.initialize(),
      updateMask: protoscript.FieldMask.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateSessionRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.session) {
      writer.writeMessage(
        1,
        msg.session,
        masterClassSession.Session._writeMessage,
      );
    }
    if (msg.updateMask) {
      writer.writeMessage(
        2,
        msg.updateMask,
        protoscript.FieldMask._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateSessionRequest,
    reader: protoscript.BinaryReader,
  ): UpdateSessionRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(
            msg.session,
            masterClassSession.Session._readMessage,
          );
          break;
        }
        case 2: {
          reader.readMessage(
            msg.updateMask,
            protoscript.FieldMask._readMessage,
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteSessionRequest = {
  /**
   * Serializes DeleteSessionRequest to protobuf.
   */
  encode: function (msg: PartialDeep<DeleteSessionRequest>): Uint8Array {
    return DeleteSessionRequest._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteSessionRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteSessionRequest {
    return DeleteSessionRequest._readMessage(
      DeleteSessionRequest.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes DeleteSessionRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteSessionRequest>,
  ): DeleteSessionRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteSessionRequest>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteSessionRequest,
    reader: protoscript.BinaryReader,
  ): DeleteSessionRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ListSessionsRequestJSON = {
  /**
   * Serializes ListSessionsRequest to JSON.
   */
  encode: function (msg: PartialDeep<ListSessionsRequest>): string {
    return JSON.stringify(ListSessionsRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListSessionsRequest from JSON.
   */
  decode: function (json: string): ListSessionsRequest {
    return ListSessionsRequestJSON._readMessage(
      ListSessionsRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListSessionsRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListSessionsRequest>,
  ): ListSessionsRequest {
    return {
      filter: "",
      parent: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListSessionsRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.filter) {
      json["filter"] = msg.filter;
    }
    if (msg.parent) {
      json["parent"] = msg.parent;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListSessionsRequest,
    json: any,
  ): ListSessionsRequest {
    const _filter_ = json["filter"];
    if (_filter_) {
      msg.filter = _filter_;
    }
    const _parent_ = json["parent"];
    if (_parent_) {
      msg.parent = _parent_;
    }
    return msg;
  },
};

export const ListSessionsResponseJSON = {
  /**
   * Serializes ListSessionsResponse to JSON.
   */
  encode: function (msg: PartialDeep<ListSessionsResponse>): string {
    return JSON.stringify(ListSessionsResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ListSessionsResponse from JSON.
   */
  decode: function (json: string): ListSessionsResponse {
    return ListSessionsResponseJSON._readMessage(
      ListSessionsResponseJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes ListSessionsResponse with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<ListSessionsResponse>,
  ): ListSessionsResponse {
    return {
      Sessions: [],
      total: 0n,
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<ListSessionsResponse>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.Sessions?.length) {
      json["Sessions"] = msg.Sessions.map(
        masterClassSession.SessionJSON._writeMessage,
      );
    }
    if (msg.total) {
      json["total"] = String(msg.total);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ListSessionsResponse,
    json: any,
  ): ListSessionsResponse {
    const _Sessions_ = json["Sessions"];
    if (_Sessions_) {
      for (const item of _Sessions_) {
        const m = masterClassSession.SessionJSON.initialize();
        masterClassSession.SessionJSON._readMessage(m, item);
        msg.Sessions.push(m);
      }
    }
    const _total_ = json["total"];
    if (_total_) {
      msg.total = BigInt(_total_);
    }
    return msg;
  },
};

export const CreateSessionRequestJSON = {
  /**
   * Serializes CreateSessionRequest to JSON.
   */
  encode: function (msg: PartialDeep<CreateSessionRequest>): string {
    return JSON.stringify(CreateSessionRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateSessionRequest from JSON.
   */
  decode: function (json: string): CreateSessionRequest {
    return CreateSessionRequestJSON._readMessage(
      CreateSessionRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes CreateSessionRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<CreateSessionRequest>,
  ): CreateSessionRequest {
    return {
      sessionId: "",
      session: masterClassSession.SessionJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<CreateSessionRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sessionId) {
      json["sessionId"] = msg.sessionId;
    }
    if (msg.session) {
      const _session_ = masterClassSession.SessionJSON._writeMessage(
        msg.session,
      );
      if (Object.keys(_session_).length > 0) {
        json["session"] = _session_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: CreateSessionRequest,
    json: any,
  ): CreateSessionRequest {
    const _sessionId_ = json["sessionId"] ?? json["session_id"];
    if (_sessionId_) {
      msg.sessionId = _sessionId_;
    }
    const _session_ = json["session"];
    if (_session_) {
      masterClassSession.SessionJSON._readMessage(msg.session, _session_);
    }
    return msg;
  },
};

export const GetSessionRequestJSON = {
  /**
   * Serializes GetSessionRequest to JSON.
   */
  encode: function (msg: PartialDeep<GetSessionRequest>): string {
    return JSON.stringify(GetSessionRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetSessionRequest from JSON.
   */
  decode: function (json: string): GetSessionRequest {
    return GetSessionRequestJSON._readMessage(
      GetSessionRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes GetSessionRequest with all fields set to their default value.
   */
  initialize: function (msg?: Partial<GetSessionRequest>): GetSessionRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<GetSessionRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetSessionRequest,
    json: any,
  ): GetSessionRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const UpdateSessionRequestJSON = {
  /**
   * Serializes UpdateSessionRequest to JSON.
   */
  encode: function (msg: PartialDeep<UpdateSessionRequest>): string {
    return JSON.stringify(UpdateSessionRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateSessionRequest from JSON.
   */
  decode: function (json: string): UpdateSessionRequest {
    return UpdateSessionRequestJSON._readMessage(
      UpdateSessionRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes UpdateSessionRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<UpdateSessionRequest>,
  ): UpdateSessionRequest {
    return {
      session: masterClassSession.SessionJSON.initialize(),
      updateMask: protoscript.FieldMaskJSON.initialize(),
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<UpdateSessionRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.session) {
      const _session_ = masterClassSession.SessionJSON._writeMessage(
        msg.session,
      );
      if (Object.keys(_session_).length > 0) {
        json["session"] = _session_;
      }
    }
    if (msg.updateMask) {
      const _updateMask_ = protoscript.FieldMaskJSON._writeMessage(
        msg.updateMask,
      );
      if (Object.keys(_updateMask_).length > 0) {
        json["updateMask"] = _updateMask_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateSessionRequest,
    json: any,
  ): UpdateSessionRequest {
    const _session_ = json["session"];
    if (_session_) {
      masterClassSession.SessionJSON._readMessage(msg.session, _session_);
    }
    const _updateMask_ = json["updateMask"] ?? json["update_mask"];
    if (_updateMask_) {
      protoscript.FieldMaskJSON._readMessage(msg.updateMask, _updateMask_);
    }
    return msg;
  },
};

export const DeleteSessionRequestJSON = {
  /**
   * Serializes DeleteSessionRequest to JSON.
   */
  encode: function (msg: PartialDeep<DeleteSessionRequest>): string {
    return JSON.stringify(DeleteSessionRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteSessionRequest from JSON.
   */
  decode: function (json: string): DeleteSessionRequest {
    return DeleteSessionRequestJSON._readMessage(
      DeleteSessionRequestJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes DeleteSessionRequest with all fields set to their default value.
   */
  initialize: function (
    msg?: Partial<DeleteSessionRequest>,
  ): DeleteSessionRequest {
    return {
      name: "",
      ...msg,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<DeleteSessionRequest>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteSessionRequest,
    json: any,
  ): DeleteSessionRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};
